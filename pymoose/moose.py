# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_moose', [dirname(__file__)])
        except ImportError:
            import _moose
            return _moose
        if fp is not None:
            try:
                _mod = imp.load_module('_moose', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _moose = swig_import_helper()
    del swig_import_helper
else:
    import _moose
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _moose.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _moose.SwigPyIterator_value(self)
    def incr(self, n=1): return _moose.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _moose.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _moose.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _moose.SwigPyIterator_equal(self, *args)
    def copy(self): return _moose.SwigPyIterator_copy(self)
    def next(self): return _moose.SwigPyIterator_next(self)
    def __next__(self): return _moose.SwigPyIterator___next__(self)
    def previous(self): return _moose.SwigPyIterator_previous(self)
    def advance(self, *args): return _moose.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _moose.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _moose.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _moose.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _moose.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _moose.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _moose.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _moose.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class uint_vector(object):
    """Proxy of C++ std::vector<(unsigned int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(uint_vector self) -> SwigPyIterator"""
        return _moose.uint_vector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(uint_vector self) -> bool"""
        return _moose.uint_vector___nonzero__(self)

    def __bool__(self):
        """__bool__(uint_vector self) -> bool"""
        return _moose.uint_vector___bool__(self)

    def __len__(self):
        """__len__(uint_vector self) -> std::vector< unsigned int >::size_type"""
        return _moose.uint_vector___len__(self)

    def pop(self):
        """pop(uint_vector self) -> std::vector< unsigned int >::value_type"""
        return _moose.uint_vector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(uint_vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j) -> uint_vector"""
        return _moose.uint_vector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(uint_vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j, 
            uint_vector v=std::vector< unsigned int,std::allocator< unsigned int > >())
        __setslice__(uint_vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)
        """
        return _moose.uint_vector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(uint_vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)"""
        return _moose.uint_vector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(uint_vector self, std::vector< unsigned int >::difference_type i)
        __delitem__(uint_vector self, PySliceObject * slice)
        """
        return _moose.uint_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(uint_vector self, PySliceObject * slice) -> uint_vector
        __getitem__(uint_vector self, std::vector< unsigned int >::difference_type i) -> std::vector< unsigned int >::value_type const &
        """
        return _moose.uint_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(uint_vector self, PySliceObject * slice, uint_vector v)
        __setitem__(uint_vector self, PySliceObject * slice)
        __setitem__(uint_vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::value_type const & x)
        """
        return _moose.uint_vector___setitem__(self, *args)

    def append(self, *args):
        """append(uint_vector self, std::vector< unsigned int >::value_type const & x)"""
        return _moose.uint_vector_append(self, *args)

    def empty(self):
        """empty(uint_vector self) -> bool"""
        return _moose.uint_vector_empty(self)

    def size(self):
        """size(uint_vector self) -> std::vector< unsigned int >::size_type"""
        return _moose.uint_vector_size(self)

    def clear(self):
        """clear(uint_vector self)"""
        return _moose.uint_vector_clear(self)

    def swap(self, *args):
        """swap(uint_vector self, uint_vector v)"""
        return _moose.uint_vector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(uint_vector self) -> std::vector< unsigned int >::allocator_type"""
        return _moose.uint_vector_get_allocator(self)

    def begin(self):
        """begin(uint_vector self) -> std::vector< unsigned int >::iterator"""
        return _moose.uint_vector_begin(self)

    def end(self):
        """end(uint_vector self) -> std::vector< unsigned int >::iterator"""
        return _moose.uint_vector_end(self)

    def rbegin(self):
        """rbegin(uint_vector self) -> std::vector< unsigned int >::reverse_iterator"""
        return _moose.uint_vector_rbegin(self)

    def rend(self):
        """rend(uint_vector self) -> std::vector< unsigned int >::reverse_iterator"""
        return _moose.uint_vector_rend(self)

    def pop_back(self):
        """pop_back(uint_vector self)"""
        return _moose.uint_vector_pop_back(self)

    def erase(self, *args):
        """
        erase(uint_vector self, std::vector< unsigned int >::iterator pos) -> std::vector< unsigned int >::iterator
        erase(uint_vector self, std::vector< unsigned int >::iterator first, std::vector< unsigned int >::iterator last) -> std::vector< unsigned int >::iterator
        """
        return _moose.uint_vector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(unsigned int)> self) -> uint_vector
        __init__(std::vector<(unsigned int)> self, uint_vector arg2) -> uint_vector
        __init__(std::vector<(unsigned int)> self, std::vector< unsigned int >::size_type size) -> uint_vector
        __init__(std::vector<(unsigned int)> self, std::vector< unsigned int >::size_type size, std::vector< unsigned int >::value_type const & value) -> uint_vector
        """
        this = _moose.new_uint_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(uint_vector self, std::vector< unsigned int >::value_type const & x)"""
        return _moose.uint_vector_push_back(self, *args)

    def front(self):
        """front(uint_vector self) -> std::vector< unsigned int >::value_type const &"""
        return _moose.uint_vector_front(self)

    def back(self):
        """back(uint_vector self) -> std::vector< unsigned int >::value_type const &"""
        return _moose.uint_vector_back(self)

    def assign(self, *args):
        """assign(uint_vector self, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)"""
        return _moose.uint_vector_assign(self, *args)

    def resize(self, *args):
        """
        resize(uint_vector self, std::vector< unsigned int >::size_type new_size)
        resize(uint_vector self, std::vector< unsigned int >::size_type new_size, std::vector< unsigned int >::value_type const & x)
        """
        return _moose.uint_vector_resize(self, *args)

    def insert(self, *args):
        """
        insert(uint_vector self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::value_type const & x) -> std::vector< unsigned int >::iterator
        insert(uint_vector self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::size_type n, 
            std::vector< unsigned int >::value_type const & x)
        """
        return _moose.uint_vector_insert(self, *args)

    def reserve(self, *args):
        """reserve(uint_vector self, std::vector< unsigned int >::size_type n)"""
        return _moose.uint_vector_reserve(self, *args)

    def capacity(self):
        """capacity(uint_vector self) -> std::vector< unsigned int >::size_type"""
        return _moose.uint_vector_capacity(self)

    __swig_destroy__ = _moose.delete_uint_vector
    __del__ = lambda self : None;
uint_vector_swigregister = _moose.uint_vector_swigregister
uint_vector_swigregister(uint_vector)

class int_vector(object):
    """Proxy of C++ std::vector<(int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(int_vector self) -> SwigPyIterator"""
        return _moose.int_vector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(int_vector self) -> bool"""
        return _moose.int_vector___nonzero__(self)

    def __bool__(self):
        """__bool__(int_vector self) -> bool"""
        return _moose.int_vector___bool__(self)

    def __len__(self):
        """__len__(int_vector self) -> std::vector< int >::size_type"""
        return _moose.int_vector___len__(self)

    def pop(self):
        """pop(int_vector self) -> std::vector< int >::value_type"""
        return _moose.int_vector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(int_vector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> int_vector"""
        return _moose.int_vector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(int_vector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, int_vector v=std::vector< int,std::allocator< int > >())
        __setslice__(int_vector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        """
        return _moose.int_vector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(int_vector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _moose.int_vector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(int_vector self, std::vector< int >::difference_type i)
        __delitem__(int_vector self, PySliceObject * slice)
        """
        return _moose.int_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(int_vector self, PySliceObject * slice) -> int_vector
        __getitem__(int_vector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _moose.int_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(int_vector self, PySliceObject * slice, int_vector v)
        __setitem__(int_vector self, PySliceObject * slice)
        __setitem__(int_vector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _moose.int_vector___setitem__(self, *args)

    def append(self, *args):
        """append(int_vector self, std::vector< int >::value_type const & x)"""
        return _moose.int_vector_append(self, *args)

    def empty(self):
        """empty(int_vector self) -> bool"""
        return _moose.int_vector_empty(self)

    def size(self):
        """size(int_vector self) -> std::vector< int >::size_type"""
        return _moose.int_vector_size(self)

    def clear(self):
        """clear(int_vector self)"""
        return _moose.int_vector_clear(self)

    def swap(self, *args):
        """swap(int_vector self, int_vector v)"""
        return _moose.int_vector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(int_vector self) -> std::vector< int >::allocator_type"""
        return _moose.int_vector_get_allocator(self)

    def begin(self):
        """begin(int_vector self) -> std::vector< int >::iterator"""
        return _moose.int_vector_begin(self)

    def end(self):
        """end(int_vector self) -> std::vector< int >::iterator"""
        return _moose.int_vector_end(self)

    def rbegin(self):
        """rbegin(int_vector self) -> std::vector< int >::reverse_iterator"""
        return _moose.int_vector_rbegin(self)

    def rend(self):
        """rend(int_vector self) -> std::vector< int >::reverse_iterator"""
        return _moose.int_vector_rend(self)

    def pop_back(self):
        """pop_back(int_vector self)"""
        return _moose.int_vector_pop_back(self)

    def erase(self, *args):
        """
        erase(int_vector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(int_vector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _moose.int_vector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(int)> self) -> int_vector
        __init__(std::vector<(int)> self, int_vector arg2) -> int_vector
        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> int_vector
        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> int_vector
        """
        this = _moose.new_int_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(int_vector self, std::vector< int >::value_type const & x)"""
        return _moose.int_vector_push_back(self, *args)

    def front(self):
        """front(int_vector self) -> std::vector< int >::value_type const &"""
        return _moose.int_vector_front(self)

    def back(self):
        """back(int_vector self) -> std::vector< int >::value_type const &"""
        return _moose.int_vector_back(self)

    def assign(self, *args):
        """assign(int_vector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _moose.int_vector_assign(self, *args)

    def resize(self, *args):
        """
        resize(int_vector self, std::vector< int >::size_type new_size)
        resize(int_vector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _moose.int_vector_resize(self, *args)

    def insert(self, *args):
        """
        insert(int_vector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(int_vector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _moose.int_vector_insert(self, *args)

    def reserve(self, *args):
        """reserve(int_vector self, std::vector< int >::size_type n)"""
        return _moose.int_vector_reserve(self, *args)

    def capacity(self):
        """capacity(int_vector self) -> std::vector< int >::size_type"""
        return _moose.int_vector_capacity(self)

    __swig_destroy__ = _moose.delete_int_vector
    __del__ = lambda self : None;
int_vector_swigregister = _moose.int_vector_swigregister
int_vector_swigregister(int_vector)

class double_vector(object):
    """Proxy of C++ std::vector<(double)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(double_vector self) -> SwigPyIterator"""
        return _moose.double_vector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(double_vector self) -> bool"""
        return _moose.double_vector___nonzero__(self)

    def __bool__(self):
        """__bool__(double_vector self) -> bool"""
        return _moose.double_vector___bool__(self)

    def __len__(self):
        """__len__(double_vector self) -> std::vector< double >::size_type"""
        return _moose.double_vector___len__(self)

    def pop(self):
        """pop(double_vector self) -> std::vector< double >::value_type"""
        return _moose.double_vector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(double_vector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> double_vector"""
        return _moose.double_vector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(double_vector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, 
            double_vector v=std::vector< double,std::allocator< double > >())
        __setslice__(double_vector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        """
        return _moose.double_vector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(double_vector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _moose.double_vector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(double_vector self, std::vector< double >::difference_type i)
        __delitem__(double_vector self, PySliceObject * slice)
        """
        return _moose.double_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(double_vector self, PySliceObject * slice) -> double_vector
        __getitem__(double_vector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _moose.double_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(double_vector self, PySliceObject * slice, double_vector v)
        __setitem__(double_vector self, PySliceObject * slice)
        __setitem__(double_vector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _moose.double_vector___setitem__(self, *args)

    def append(self, *args):
        """append(double_vector self, std::vector< double >::value_type const & x)"""
        return _moose.double_vector_append(self, *args)

    def empty(self):
        """empty(double_vector self) -> bool"""
        return _moose.double_vector_empty(self)

    def size(self):
        """size(double_vector self) -> std::vector< double >::size_type"""
        return _moose.double_vector_size(self)

    def clear(self):
        """clear(double_vector self)"""
        return _moose.double_vector_clear(self)

    def swap(self, *args):
        """swap(double_vector self, double_vector v)"""
        return _moose.double_vector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(double_vector self) -> std::vector< double >::allocator_type"""
        return _moose.double_vector_get_allocator(self)

    def begin(self):
        """begin(double_vector self) -> std::vector< double >::iterator"""
        return _moose.double_vector_begin(self)

    def end(self):
        """end(double_vector self) -> std::vector< double >::iterator"""
        return _moose.double_vector_end(self)

    def rbegin(self):
        """rbegin(double_vector self) -> std::vector< double >::reverse_iterator"""
        return _moose.double_vector_rbegin(self)

    def rend(self):
        """rend(double_vector self) -> std::vector< double >::reverse_iterator"""
        return _moose.double_vector_rend(self)

    def pop_back(self):
        """pop_back(double_vector self)"""
        return _moose.double_vector_pop_back(self)

    def erase(self, *args):
        """
        erase(double_vector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(double_vector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _moose.double_vector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(double)> self) -> double_vector
        __init__(std::vector<(double)> self, double_vector arg2) -> double_vector
        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> double_vector
        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> double_vector
        """
        this = _moose.new_double_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(double_vector self, std::vector< double >::value_type const & x)"""
        return _moose.double_vector_push_back(self, *args)

    def front(self):
        """front(double_vector self) -> std::vector< double >::value_type const &"""
        return _moose.double_vector_front(self)

    def back(self):
        """back(double_vector self) -> std::vector< double >::value_type const &"""
        return _moose.double_vector_back(self)

    def assign(self, *args):
        """assign(double_vector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _moose.double_vector_assign(self, *args)

    def resize(self, *args):
        """
        resize(double_vector self, std::vector< double >::size_type new_size)
        resize(double_vector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _moose.double_vector_resize(self, *args)

    def insert(self, *args):
        """
        insert(double_vector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(double_vector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _moose.double_vector_insert(self, *args)

    def reserve(self, *args):
        """reserve(double_vector self, std::vector< double >::size_type n)"""
        return _moose.double_vector_reserve(self, *args)

    def capacity(self):
        """capacity(double_vector self) -> std::vector< double >::size_type"""
        return _moose.double_vector_capacity(self)

    __swig_destroy__ = _moose.delete_double_vector
    __del__ = lambda self : None;
double_vector_swigregister = _moose.double_vector_swigregister
double_vector_swigregister(double_vector)

class string_vector(object):
    """Proxy of C++ std::vector<(std::string)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(string_vector self) -> SwigPyIterator"""
        return _moose.string_vector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(string_vector self) -> bool"""
        return _moose.string_vector___nonzero__(self)

    def __bool__(self):
        """__bool__(string_vector self) -> bool"""
        return _moose.string_vector___bool__(self)

    def __len__(self):
        """__len__(string_vector self) -> std::vector< std::string >::size_type"""
        return _moose.string_vector___len__(self)

    def pop(self):
        """pop(string_vector self) -> std::vector< std::string >::value_type"""
        return _moose.string_vector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(string_vector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> string_vector"""
        return _moose.string_vector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(string_vector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, 
            string_vector v=std::vector< std::string,std::allocator< std::string > >())
        __setslice__(string_vector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        """
        return _moose.string_vector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(string_vector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _moose.string_vector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(string_vector self, std::vector< std::string >::difference_type i)
        __delitem__(string_vector self, PySliceObject * slice)
        """
        return _moose.string_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(string_vector self, PySliceObject * slice) -> string_vector
        __getitem__(string_vector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _moose.string_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(string_vector self, PySliceObject * slice, string_vector v)
        __setitem__(string_vector self, PySliceObject * slice)
        __setitem__(string_vector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _moose.string_vector___setitem__(self, *args)

    def append(self, *args):
        """append(string_vector self, std::vector< std::string >::value_type const & x)"""
        return _moose.string_vector_append(self, *args)

    def empty(self):
        """empty(string_vector self) -> bool"""
        return _moose.string_vector_empty(self)

    def size(self):
        """size(string_vector self) -> std::vector< std::string >::size_type"""
        return _moose.string_vector_size(self)

    def clear(self):
        """clear(string_vector self)"""
        return _moose.string_vector_clear(self)

    def swap(self, *args):
        """swap(string_vector self, string_vector v)"""
        return _moose.string_vector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(string_vector self) -> std::vector< std::string >::allocator_type"""
        return _moose.string_vector_get_allocator(self)

    def begin(self):
        """begin(string_vector self) -> std::vector< std::string >::iterator"""
        return _moose.string_vector_begin(self)

    def end(self):
        """end(string_vector self) -> std::vector< std::string >::iterator"""
        return _moose.string_vector_end(self)

    def rbegin(self):
        """rbegin(string_vector self) -> std::vector< std::string >::reverse_iterator"""
        return _moose.string_vector_rbegin(self)

    def rend(self):
        """rend(string_vector self) -> std::vector< std::string >::reverse_iterator"""
        return _moose.string_vector_rend(self)

    def pop_back(self):
        """pop_back(string_vector self)"""
        return _moose.string_vector_pop_back(self)

    def erase(self, *args):
        """
        erase(string_vector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(string_vector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _moose.string_vector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(std::string)> self) -> string_vector
        __init__(std::vector<(std::string)> self, string_vector arg2) -> string_vector
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> string_vector
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> string_vector
        """
        this = _moose.new_string_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(string_vector self, std::vector< std::string >::value_type const & x)"""
        return _moose.string_vector_push_back(self, *args)

    def front(self):
        """front(string_vector self) -> std::vector< std::string >::value_type const &"""
        return _moose.string_vector_front(self)

    def back(self):
        """back(string_vector self) -> std::vector< std::string >::value_type const &"""
        return _moose.string_vector_back(self)

    def assign(self, *args):
        """assign(string_vector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _moose.string_vector_assign(self, *args)

    def resize(self, *args):
        """
        resize(string_vector self, std::vector< std::string >::size_type new_size)
        resize(string_vector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _moose.string_vector_resize(self, *args)

    def insert(self, *args):
        """
        insert(string_vector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(string_vector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, 
            std::vector< std::string >::value_type const & x)
        """
        return _moose.string_vector_insert(self, *args)

    def reserve(self, *args):
        """reserve(string_vector self, std::vector< std::string >::size_type n)"""
        return _moose.string_vector_reserve(self, *args)

    def capacity(self):
        """capacity(string_vector self) -> std::vector< std::string >::size_type"""
        return _moose.string_vector_capacity(self)

    __swig_destroy__ = _moose.delete_string_vector
    __del__ = lambda self : None;
string_vector_swigregister = _moose.string_vector_swigregister
string_vector_swigregister(string_vector)

class Id_vector(object):
    """Proxy of C++ std::vector<(Id)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(Id_vector self) -> SwigPyIterator"""
        return _moose.Id_vector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(Id_vector self) -> bool"""
        return _moose.Id_vector___nonzero__(self)

    def __bool__(self):
        """__bool__(Id_vector self) -> bool"""
        return _moose.Id_vector___bool__(self)

    def __len__(self):
        """__len__(Id_vector self) -> std::vector< Id >::size_type"""
        return _moose.Id_vector___len__(self)

    def pop(self):
        """pop(Id_vector self) -> Id"""
        return _moose.Id_vector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(Id_vector self, std::vector< Id >::difference_type i, std::vector< Id >::difference_type j) -> Id_vector"""
        return _moose.Id_vector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(Id_vector self, std::vector< Id >::difference_type i, std::vector< Id >::difference_type j, Id_vector v=std::vector< Id,std::allocator< Id > >())
        __setslice__(Id_vector self, std::vector< Id >::difference_type i, std::vector< Id >::difference_type j)
        """
        return _moose.Id_vector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(Id_vector self, std::vector< Id >::difference_type i, std::vector< Id >::difference_type j)"""
        return _moose.Id_vector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(Id_vector self, std::vector< Id >::difference_type i)
        __delitem__(Id_vector self, PySliceObject * slice)
        """
        return _moose.Id_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(Id_vector self, PySliceObject * slice) -> Id_vector
        __getitem__(Id_vector self, std::vector< Id >::difference_type i) -> Id
        """
        return _moose.Id_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(Id_vector self, PySliceObject * slice, Id_vector v)
        __setitem__(Id_vector self, PySliceObject * slice)
        __setitem__(Id_vector self, std::vector< Id >::difference_type i, Id x)
        """
        return _moose.Id_vector___setitem__(self, *args)

    def append(self, *args):
        """append(Id_vector self, Id x)"""
        return _moose.Id_vector_append(self, *args)

    def empty(self):
        """empty(Id_vector self) -> bool"""
        return _moose.Id_vector_empty(self)

    def size(self):
        """size(Id_vector self) -> std::vector< Id >::size_type"""
        return _moose.Id_vector_size(self)

    def clear(self):
        """clear(Id_vector self)"""
        return _moose.Id_vector_clear(self)

    def swap(self, *args):
        """swap(Id_vector self, Id_vector v)"""
        return _moose.Id_vector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(Id_vector self) -> std::vector< Id >::allocator_type"""
        return _moose.Id_vector_get_allocator(self)

    def begin(self):
        """begin(Id_vector self) -> std::vector< Id >::iterator"""
        return _moose.Id_vector_begin(self)

    def end(self):
        """end(Id_vector self) -> std::vector< Id >::iterator"""
        return _moose.Id_vector_end(self)

    def rbegin(self):
        """rbegin(Id_vector self) -> std::vector< Id >::reverse_iterator"""
        return _moose.Id_vector_rbegin(self)

    def rend(self):
        """rend(Id_vector self) -> std::vector< Id >::reverse_iterator"""
        return _moose.Id_vector_rend(self)

    def pop_back(self):
        """pop_back(Id_vector self)"""
        return _moose.Id_vector_pop_back(self)

    def erase(self, *args):
        """
        erase(Id_vector self, std::vector< Id >::iterator pos) -> std::vector< Id >::iterator
        erase(Id_vector self, std::vector< Id >::iterator first, std::vector< Id >::iterator last) -> std::vector< Id >::iterator
        """
        return _moose.Id_vector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(Id)> self) -> Id_vector
        __init__(std::vector<(Id)> self, Id_vector arg2) -> Id_vector
        __init__(std::vector<(Id)> self, std::vector< Id >::size_type size) -> Id_vector
        __init__(std::vector<(Id)> self, std::vector< Id >::size_type size, Id value) -> Id_vector
        """
        this = _moose.new_Id_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(Id_vector self, Id x)"""
        return _moose.Id_vector_push_back(self, *args)

    def front(self):
        """front(Id_vector self) -> Id"""
        return _moose.Id_vector_front(self)

    def back(self):
        """back(Id_vector self) -> Id"""
        return _moose.Id_vector_back(self)

    def assign(self, *args):
        """assign(Id_vector self, std::vector< Id >::size_type n, Id x)"""
        return _moose.Id_vector_assign(self, *args)

    def resize(self, *args):
        """
        resize(Id_vector self, std::vector< Id >::size_type new_size)
        resize(Id_vector self, std::vector< Id >::size_type new_size, Id x)
        """
        return _moose.Id_vector_resize(self, *args)

    def insert(self, *args):
        """
        insert(Id_vector self, std::vector< Id >::iterator pos, Id x) -> std::vector< Id >::iterator
        insert(Id_vector self, std::vector< Id >::iterator pos, std::vector< Id >::size_type n, Id x)
        """
        return _moose.Id_vector_insert(self, *args)

    def reserve(self, *args):
        """reserve(Id_vector self, std::vector< Id >::size_type n)"""
        return _moose.Id_vector_reserve(self, *args)

    def capacity(self):
        """capacity(Id_vector self) -> std::vector< Id >::size_type"""
        return _moose.Id_vector_capacity(self)

    __swig_destroy__ = _moose.delete_Id_vector
    __del__ = lambda self : None;
Id_vector_swigregister = _moose.Id_vector_swigregister
Id_vector_swigregister(Id_vector)

def listproperty(getter=None, setter=None, deller=None, len=None):
    """Adds property attributes that behave like lists or 
    dictionaries but use underlying function calls for getter and
    setter: For example, SynChan.weight, SynChan.delay
    """
    class iter(object):
        def __init__(self, obj):
	    self._obj = obj
            self.cur = 0
        def __iter__(self):
            return self
        def next(self):
	    if self.cur == len(self._obj):
               raise StopIteration()
            value = getter(self._obj, self.cur)
            self.cur += 1
            return value
    class _proxy(object):
        def __init__(self, obj):
            self._obj = obj
        def __getitem__(self, index):
            return getter(self._obj, index)
        # Note the order of index and value
        # This is reverse of MOOSE lookupSet.
        # Take care to to switch the order in C++
        # function implementing setter.
        def __setitem__(self, index, value):
            setter(self._obj, index, value)
        def __len__(self):
            return len(self._obj)
        def __iter__(self):
            return iter(self._obj)
    return property(_proxy)


def getParBuf(*args):
  """getParBuf(Conn const * c, unsigned int size) -> void *"""
  return _moose.getParBuf(*args)

def getAsyncParBuf(*args):
  """getAsyncParBuf(Conn const * c, unsigned int size) -> void *"""
  return _moose.getAsyncParBuf(*args)
SVN_REVISION = _moose.SVN_REVISION

def initNeutralCinfo():
  """initNeutralCinfo() -> Cinfo const *"""
  return _moose.initNeutralCinfo()

def separateString(*args):
  """separateString(std::string const & s, string_vector v, std::string const & separator)"""
  return _moose.separateString(*args)

def parseString(*args):
  """parseString(std::string const & s, string_vector v, char const * separators)"""
  return _moose.parseString(*args)
class Id(object):
    """Proxy of C++ Id class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def dumpState(*args):
        """dumpState(ostream & stream)"""
        return _moose.Id_dumpState(*args)

    dumpState = staticmethod(dumpState)
    __swig_destroy__ = _moose.delete_Id
    __del__ = lambda self : None;
    def localId(*args):
        """
        localId(std::string const & path, std::string const & separator="/") -> Id
        localId(std::string const & path) -> Id
        """
        return _moose.Id_localId(*args)

    localId = staticmethod(localId)
    def childNode(*args):
        """childNode(Id parent) -> unsigned int"""
        return _moose.Id_childNode(*args)

    childNode = staticmethod(childNode)
    def childId(*args):
        """childId(Id parent) -> Id"""
        return _moose.Id_childId(*args)

    childId = staticmethod(childId)
    def scratchId():
        """scratchId() -> Id"""
        return _moose.Id_scratchId()

    scratchId = staticmethod(scratchId)
    def newId():
        """newId() -> Id"""
        return _moose.Id_newId()

    newId = staticmethod(newId)
    def initId():
        """initId() -> Id"""
        return _moose.Id_initId()

    initId = staticmethod(initId)
    def makeIdOnNode(*args):
        """makeIdOnNode(unsigned int childNode) -> Id"""
        return _moose.Id_makeIdOnNode(*args)

    makeIdOnNode = staticmethod(makeIdOnNode)
    def shellId():
        """shellId() -> Id"""
        return _moose.Id_shellId()

    shellId = staticmethod(shellId)
    def postId(*args):
        """postId(unsigned int node) -> Id"""
        return _moose.Id_postId(*args)

    postId = staticmethod(postId)
    def assignIndex(self, *args):
        """assignIndex(Id self, unsigned int index) -> Id"""
        return _moose.Id_assignIndex(self, *args)

    def newIdBlock(*args):
        """newIdBlock(unsigned int size, unsigned int node) -> unsigned int"""
        return _moose.Id_newIdBlock(*args)

    newIdBlock = staticmethod(newIdBlock)
    def generator(*args):
        """generator(unsigned int node) -> IdGenerator"""
        return _moose.Id_generator(*args)

    generator = staticmethod(generator)
    def path(self, separator="/"):
        """
        path(Id self, std::string const & separator="/") -> std::string
        path(Id self) -> std::string
        """
        return _moose.Id_path(self, separator)

    def id(self):
        """id(Id self) -> unsigned int"""
        return _moose.Id_id(self)

    def index(self):
        """index(Id self) -> unsigned int"""
        return _moose.Id_index(self)

    def node(self):
        """node(Id self) -> unsigned int"""
        return _moose.Id_node(self)

    def isGlobal(self):
        """isGlobal(Id self) -> bool"""
        return _moose.Id_isGlobal(self)

    def setGlobal(self):
        """setGlobal(Id self)"""
        return _moose.Id_setGlobal(self)

    def setNode(self, *args):
        """setNode(Id self, unsigned int node)"""
        return _moose.Id_setNode(self, *args)

    def lastId():
        """lastId() -> Id"""
        return _moose.Id_lastId()

    lastId = staticmethod(lastId)
    def badId():
        """badId() -> Id"""
        return _moose.Id_badId()

    badId = staticmethod(badId)
    def str2Id(*args):
        """str2Id(std::string const & s) -> Id"""
        return _moose.Id_str2Id(*args)

    str2Id = staticmethod(str2Id)
    def id2str(*args):
        """id2str(Id id) -> std::string"""
        return _moose.Id_id2str(*args)

    id2str = staticmethod(id2str)
    def bad(self):
        """bad(Id self) -> bool"""
        return _moose.Id_bad(self)

    def good(self):
        """good(Id self) -> bool"""
        return _moose.Id_good(self)

    def zero(self):
        """zero(Id self) -> bool"""
        return _moose.Id_zero(self)

    def outOfRange(self):
        """outOfRange(Id self) -> bool"""
        return _moose.Id_outOfRange(self)

    def isProxy(self):
        """isProxy(Id self) -> bool"""
        return _moose.Id_isProxy(self)

    def __eq__(self, *args):
        """__eq__(Id self, Id other) -> bool"""
        return _moose.Id___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Id self, Id other) -> bool"""
        return _moose.Id___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(Id self, Id other) -> bool"""
        return _moose.Id___lt__(self, *args)

    def setElement(self, *args):
        """setElement(Id self, Element * e) -> bool"""
        return _moose.Id_setElement(self, *args)

    def __init__(self, *args): 
        """
        __init__(Id self) -> Id
        __init__(Id self, Nid nid) -> Id
        __init__(Id self, std::string const & path, std::string const & separator="/") -> Id
        __init__(Id self, std::string const & path) -> Id
        __init__(Id self, unsigned int i, unsigned int index=0) -> Id
        __init__(Id self, unsigned int i) -> Id
        """
        this = _moose.new_Id(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """__str__(Id self) -> char *"""
        return _moose.Id___str__(self)

    def __hash__(self):
            return str(self).__hash__()

Id_swigregister = _moose.Id_swigregister
Id_swigregister(Id)

def Id_dumpState(*args):
  """Id_dumpState(ostream & stream)"""
  return _moose.Id_dumpState(*args)

def Id_localId(*args):
  """
    localId(std::string const & path, std::string const & separator="/") -> Id
    Id_localId(std::string const & path) -> Id
    """
  return _moose.Id_localId(*args)

def Id_childNode(*args):
  """Id_childNode(Id parent) -> unsigned int"""
  return _moose.Id_childNode(*args)

def Id_childId(*args):
  """Id_childId(Id parent) -> Id"""
  return _moose.Id_childId(*args)

def Id_scratchId():
  """Id_scratchId() -> Id"""
  return _moose.Id_scratchId()

def Id_newId():
  """Id_newId() -> Id"""
  return _moose.Id_newId()

def Id_initId():
  """Id_initId() -> Id"""
  return _moose.Id_initId()

def Id_makeIdOnNode(*args):
  """Id_makeIdOnNode(unsigned int childNode) -> Id"""
  return _moose.Id_makeIdOnNode(*args)

def Id_shellId():
  """Id_shellId() -> Id"""
  return _moose.Id_shellId()

def Id_postId(*args):
  """Id_postId(unsigned int node) -> Id"""
  return _moose.Id_postId(*args)

def Id_newIdBlock(*args):
  """Id_newIdBlock(unsigned int size, unsigned int node) -> unsigned int"""
  return _moose.Id_newIdBlock(*args)

def Id_generator(*args):
  """Id_generator(unsigned int node) -> IdGenerator"""
  return _moose.Id_generator(*args)

def Id_lastId():
  """Id_lastId() -> Id"""
  return _moose.Id_lastId()

def Id_badId():
  """Id_badId() -> Id"""
  return _moose.Id_badId()

def Id_str2Id(*args):
  """Id_str2Id(std::string const & s) -> Id"""
  return _moose.Id_str2Id(*args)

def Id_id2str(*args):
  """Id_id2str(Id id) -> std::string"""
  return _moose.Id_id2str(*args)
cvar = _moose.cvar
Id.AnyIndex = _moose.cvar.Id_AnyIndex
Id.BadIndex = _moose.cvar.Id_BadIndex
Id.BadNode = _moose.cvar.Id_BadNode
Id.UnknownNode = _moose.cvar.Id_UnknownNode
Id.GlobalNode = _moose.cvar.Id_GlobalNode

class Nid(Id):
    """Proxy of C++ Nid class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Nid self) -> Nid
        __init__(Nid self, Id id) -> Nid
        __init__(Nid self, Id id, unsigned int node) -> Nid
        """
        this = _moose.new_Nid(*args)
        try: self.this.append(this)
        except: self.this = this
    def node(self):
        """node(Nid self) -> unsigned int"""
        return _moose.Nid_node(self)

    def setNode(self, *args):
        """setNode(Nid self, unsigned int node)"""
        return _moose.Nid_setNode(self, *args)

    __swig_destroy__ = _moose.delete_Nid
    __del__ = lambda self : None;
Nid_swigregister = _moose.Nid_swigregister
Nid_swigregister(Nid)

BUF_SIZE = _moose.BUF_SIZE
class Property(object):
    """Proxy of C++ Property class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def initialize(*args):
        """initialize(std::string fileName, int format)"""
        return _moose.Property_initialize(*args)

    initialize = staticmethod(initialize)
    def initDefaults():
        """initDefaults()"""
        return _moose.Property_initDefaults()

    initDefaults = staticmethod(initDefaults)
    def getProperty(*args):
        """getProperty(std::string key) -> std::string"""
        return _moose.Property_getProperty(*args)

    getProperty = staticmethod(getProperty)
    def setProperty(*args):
        """setProperty(std::string key, std::string value)"""
        return _moose.Property_setProperty(*args)

    setProperty = staticmethod(setProperty)
    def readProperties(*args):
        """readProperties(std::string fileName, int format) -> int"""
        return _moose.Property_readProperties(*args)

    readProperties = staticmethod(readProperties)
    def readEnvironment():
        """readEnvironment()"""
        return _moose.Property_readEnvironment()

    readEnvironment = staticmethod(readEnvironment)
    def getKeys():
        """getKeys() -> string_vector"""
        return _moose.Property_getKeys()

    getKeys = staticmethod(getKeys)
    def addSimPath(*args):
        """addSimPath(std::string path)"""
        return _moose.Property_addSimPath(*args)

    addSimPath = staticmethod(addSimPath)
    def setSimPath(*args):
        """setSimPath(std::string paths)"""
        return _moose.Property_setSimPath(*args)

    setSimPath = staticmethod(setSimPath)
    def getSimPath():
        """getSimPath() -> std::string const"""
        return _moose.Property_getSimPath()

    getSimPath = staticmethod(getSimPath)
    __swig_destroy__ = _moose.delete_Property
    __del__ = lambda self : None;
Property_swigregister = _moose.Property_swigregister
Property_swigregister(Property)
Property.SIMPATH = _moose.cvar.Property_SIMPATH
Property.SIMNOTES = _moose.cvar.Property_SIMNOTES
Property.DOCPATH = _moose.cvar.Property_DOCPATH
Property.AUTOSCHEDULE = _moose.cvar.Property_AUTOSCHEDULE
Property.CREATESOLVER = _moose.cvar.Property_CREATESOLVER
Property.HOME = _moose.cvar.Property_HOME
Property.XML_FORMAT = _moose.cvar.Property_XML_FORMAT
Property.PROP_FORMAT = _moose.cvar.Property_PROP_FORMAT

def Property_initialize(*args):
  """Property_initialize(std::string fileName, int format)"""
  return _moose.Property_initialize(*args)

def Property_initDefaults():
  """Property_initDefaults()"""
  return _moose.Property_initDefaults()

def Property_getProperty(*args):
  """Property_getProperty(std::string key) -> std::string"""
  return _moose.Property_getProperty(*args)

def Property_setProperty(*args):
  """Property_setProperty(std::string key, std::string value)"""
  return _moose.Property_setProperty(*args)

def Property_readProperties(*args):
  """Property_readProperties(std::string fileName, int format) -> int"""
  return _moose.Property_readProperties(*args)

def Property_readEnvironment():
  """Property_readEnvironment()"""
  return _moose.Property_readEnvironment()

def Property_getKeys():
  """Property_getKeys() -> string_vector"""
  return _moose.Property_getKeys()

def Property_addSimPath(*args):
  """Property_addSimPath(std::string path)"""
  return _moose.Property_addSimPath(*args)

def Property_setSimPath(*args):
  """Property_setSimPath(std::string paths)"""
  return _moose.Property_setSimPath(*args)

def Property_getSimPath():
  """Property_getSimPath() -> std::string const"""
  return _moose.Property_getSimPath()

class PathUtility(object):
    """Proxy of C++ PathUtility class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(PathUtility self, std::string paths) -> PathUtility"""
        this = _moose.new_PathUtility(*args)
        try: self.this.append(this)
        except: self.this = this
    def isAbsolutePath(*args):
        """isAbsolutePath(std::string path) -> bool"""
        return _moose.PathUtility_isAbsolutePath(*args)

    isAbsolutePath = staticmethod(isAbsolutePath)
    def addPath(self, *args):
        """addPath(PathUtility self, std::string paths)"""
        return _moose.PathUtility_addPath(self, *args)

    def getPath(self, *args):
        """getPath(PathUtility self, int index) -> std::string"""
        return _moose.PathUtility_getPath(self, *args)

    def getAllPaths(self):
        """getAllPaths(PathUtility self) -> std::string"""
        return _moose.PathUtility_getAllPaths(self)

    def makeFilePath(self, *args):
        """makeFilePath(PathUtility self, std::string fileName, int index) -> std::string"""
        return _moose.PathUtility_makeFilePath(self, *args)

    def size(self):
        """size(PathUtility self) -> size_t"""
        return _moose.PathUtility_size(self)

    __swig_destroy__ = _moose.delete_PathUtility
    __del__ = lambda self : None;
PathUtility_swigregister = _moose.PathUtility_swigregister
PathUtility_swigregister(PathUtility)
PathUtility.PATH_SEPARATOR = _moose.cvar.PathUtility_PATH_SEPARATOR
PathUtility.DIR_SEPARATOR = _moose.cvar.PathUtility_DIR_SEPARATOR

def PathUtility_isAbsolutePath(*args):
  """PathUtility_isAbsolutePath(std::string path) -> bool"""
  return _moose.PathUtility_isAbsolutePath(*args)

FTYPE_ALL = _moose.FTYPE_ALL
FTYPE_VALUE = _moose.FTYPE_VALUE
FTYPE_LOOKUP = _moose.FTYPE_LOOKUP
FTYPE_SOURCE = _moose.FTYPE_SOURCE
FTYPE_DEST = _moose.FTYPE_DEST
FTYPE_SHARED = _moose.FTYPE_SHARED
FTYPE_SOLVE = _moose.FTYPE_SOLVE
FTYPE_THIS = _moose.FTYPE_THIS
FTYPE_GLOBAL = _moose.FTYPE_GLOBAL
FTYPE_DEL = _moose.FTYPE_DEL
FREE_RUN = _moose.FREE_RUN
EXT_TRIG = _moose.EXT_TRIG
EXT_GATE = _moose.EXT_GATE
OUTGOING = _moose.OUTGOING
INCOMING = _moose.INCOMING
INOUT = _moose.INOUT
class PyMooseContext(object):
    """Proxy of C++ pymoose::PyMooseContext class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(pymoose::PyMooseContext self) -> PyMooseContext"""
        this = _moose.new_PyMooseContext()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_PyMooseContext
    __del__ = lambda self : None;
    def getCwe(self):
        """getCwe(PyMooseContext self) -> Id"""
        return _moose.PyMooseContext_getCwe(self)

    def setCwe(self, *args):
        """
        setCwe(PyMooseContext self, Id elementId)
        setCwe(PyMooseContext self, std::string path)
        """
        return _moose.PyMooseContext_setCwe(self, *args)

    def getShell(self):
        """getShell(PyMooseContext self) -> Id"""
        return _moose.PyMooseContext_getShell(self)

    def id(self):
        """id(PyMooseContext self) -> Id"""
        return _moose.PyMooseContext_id(self)

    def create(self, *args):
        """
        create(PyMooseContext self, std::string type, std::string name, Id parent=Id::badId()) -> Id
        create(PyMooseContext self, std::string type, std::string name) -> Id
        """
        return _moose.PyMooseContext_create(self, *args)

    def destroy(self, *args):
        """destroy(PyMooseContext self, Id victim) -> bool"""
        return _moose.PyMooseContext_destroy(self, *args)

    def end(self):
        """end(PyMooseContext self)"""
        return _moose.PyMooseContext_end(self)

    def recvCwe(*args):
        """recvCwe(Conn const * c, Id i)"""
        return _moose.PyMooseContext_recvCwe(*args)

    recvCwe = staticmethod(recvCwe)
    def recvElist(*args):
        """recvElist(Conn const * c, Id_vector elist)"""
        return _moose.PyMooseContext_recvElist(*args)

    recvElist = staticmethod(recvElist)
    def recvCreate(*args):
        """recvCreate(Conn const * c, Id i)"""
        return _moose.PyMooseContext_recvCreate(*args)

    recvCreate = staticmethod(recvCreate)
    def recvField(*args):
        """recvField(Conn const * c, std::string value)"""
        return _moose.PyMooseContext_recvField(*args)

    recvField = staticmethod(recvField)
    def recvWildcardList(*args):
        """recvWildcardList(Conn const * c, Id_vector value)"""
        return _moose.PyMooseContext_recvWildcardList(*args)

    recvWildcardList = staticmethod(recvWildcardList)
    def recvClocks(*args):
        """recvClocks(Conn const * c, double_vector dbls)"""
        return _moose.PyMooseContext_recvClocks(*args)

    recvClocks = staticmethod(recvClocks)
    def recvMessageList(*args):
        """recvMessageList(Conn const * c, Id_vector elist, std::string s)"""
        return _moose.PyMooseContext_recvMessageList(*args)

    recvMessageList = staticmethod(recvMessageList)
    def createPyMooseContext(*args):
        """createPyMooseContext(std::string contextName, std::string shellName) -> PyMooseContext"""
        return _moose.PyMooseContext_createPyMooseContext(*args)

    createPyMooseContext = staticmethod(createPyMooseContext)
    def destroyPyMooseContext(*args):
        """destroyPyMooseContext(PyMooseContext context)"""
        return _moose.PyMooseContext_destroyPyMooseContext(*args)

    destroyPyMooseContext = staticmethod(destroyPyMooseContext)
    def loadG(self, *args):
        """loadG(PyMooseContext self, std::string script)"""
        return _moose.PyMooseContext_loadG(self, *args)

    def runG(self, *args):
        """runG(PyMooseContext self, std::string statement)"""
        return _moose.PyMooseContext_runG(self, *args)

    def getField(self, *args):
        """getField(PyMooseContext self, Id arg2, std::string arg3) -> std::string const &"""
        return _moose.PyMooseContext_getField(self, *args)

    def setField(self, *args):
        """setField(PyMooseContext self, Id arg2, std::string arg3, std::string arg4)"""
        return _moose.PyMooseContext_setField(self, *args)

    def getMessageList(self, *args):
        """
        getMessageList(PyMooseContext self, Id obj, std::string field, bool incoming) -> string_vector
        getMessageList(PyMooseContext self, Id obj, bool incoming) -> string_vector
        """
        return _moose.PyMooseContext_getMessageList(self, *args)

    def getParent(self, *args):
        """getParent(PyMooseContext self, Id id) -> Id"""
        return _moose.PyMooseContext_getParent(self, *args)

    def getPath(self, *args):
        """getPath(PyMooseContext self, Id id) -> std::string const &"""
        return _moose.PyMooseContext_getPath(self, *args)

    def getName(self, *args):
        """getName(PyMooseContext self, Id id) -> std::string const &"""
        return _moose.PyMooseContext_getName(self, *args)

    def getChildren(self, *args):
        """
        getChildren(PyMooseContext self, Id id) -> Id_vector
        getChildren(PyMooseContext self, std::string path) -> Id_vector
        """
        return _moose.PyMooseContext_getChildren(self, *args)

    def getWildcardList(self, *args):
        """getWildcardList(PyMooseContext self, std::string path, bool ordered) -> Id_vector"""
        return _moose.PyMooseContext_getWildcardList(self, *args)

    def getStoichPathVector(self, *args):
        """getStoichPathVector(PyMooseContext self, Id id) -> Id_vector"""
        return _moose.PyMooseContext_getStoichPathVector(self, *args)

    def pathToId(self, *args):
        """
        pathToId(PyMooseContext self, std::string path, bool echo=True) -> Id
        pathToId(PyMooseContext self, std::string path) -> Id
        """
        return _moose.PyMooseContext_pathToId(self, *args)

    def srandom(*args):
        """srandom(long seed)"""
        return _moose.PyMooseContext_srandom(*args)

    srandom = staticmethod(srandom)
    def step(self, *args):
        """
        step(PyMooseContext self, double runTime)
        step(PyMooseContext self, long multiple)
        step(PyMooseContext self)
        """
        return _moose.PyMooseContext_step(self, *args)

    def reset(self):
        """reset(PyMooseContext self)"""
        return _moose.PyMooseContext_reset(self)

    def stop(self):
        """stop(PyMooseContext self)"""
        return _moose.PyMooseContext_stop(self)

    def setClock(self, *args):
        """
        setClock(PyMooseContext self, int clockNo, double dt, int stage=0)
        setClock(PyMooseContext self, int clockNo, double dt)
        """
        return _moose.PyMooseContext_setClock(self, *args)

    def getClocks(self):
        """getClocks(PyMooseContext self) -> double_vector"""
        return _moose.PyMooseContext_getClocks(self)

    def useClock(self, *args):
        """
        useClock(PyMooseContext self, std::string const & tickName, std::string const & path, std::string const & func="process")
        useClock(PyMooseContext self, std::string const & tickName, std::string const & path)
        useClock(PyMooseContext self, int tickNo, std::string const & path, std::string const & func="process")
        useClock(PyMooseContext self, int tickNo, std::string const & path)
        """
        return _moose.PyMooseContext_useClock(self, *args)

    def addTask(self, *args):
        """addTask(PyMooseContext self, std::string arg)"""
        return _moose.PyMooseContext_addTask(self, *args)

    def do_deep_copy(self, *args):
        """do_deep_copy(PyMooseContext self, Id object, Id dest, std::string new_name)"""
        return _moose.PyMooseContext_do_deep_copy(self, *args)

    def copy(self, *args):
        """copy(PyMooseContext self, Id src, Id dest_parent, std::string new_name)"""
        return _moose.PyMooseContext_copy(self, *args)

    def deepCopy(self, *args):
        """deepCopy(PyMooseContext self, Id object, Id dest, std::string new_name) -> Id"""
        return _moose.PyMooseContext_deepCopy(self, *args)

    def move(self, *args):
        """
        move(PyMooseContext self, Id object, Id dest, std::string new_name)
        move(PyMooseContext self, std::string src, std::string dest, std::string new_name)
        """
        return _moose.PyMooseContext_move(self, *args)

    def connect(self, *args):
        """connect(PyMooseContext self, Id src, std::string srcField, Id dest, std::string destField) -> bool"""
        return _moose.PyMooseContext_connect(self, *args)

    def tabFill(self, *args):
        """tabFill(PyMooseContext self, Id table, int xdivs, int mode)"""
        return _moose.PyMooseContext_tabFill(self, *args)

    def getTableVector(self, *args):
        """getTableVector(PyMooseContext self, Id table) -> double_vector"""
        return _moose.PyMooseContext_getTableVector(self, *args)

    def setupAlpha(self, *args):
        """
        setupAlpha(PyMooseContext self, std::string channel, std::string gate, double_vector parms)
        setupAlpha(PyMooseContext self, std::string channel, std::string gate, double AA, double AB, double AC, double AD, 
            double AF, double BA, double BB, double BC, double BD, double BF, double size, 
            double min, double max)
        setupAlpha(PyMooseContext self, Id gateId, double_vector parms)
        """
        return _moose.PyMooseContext_setupAlpha(self, *args)

    def setupTau(self, *args):
        """
        setupTau(PyMooseContext self, std::string channel, std::string gate, double_vector parms)
        setupTau(PyMooseContext self, std::string channel, std::string gate, double AA, double AB, double AC, double AD, 
            double AF, double BA, double BB, double BC, double BD, double BF, double size, 
            double min, double max)
        setupTau(PyMooseContext self, Id gateId, double_vector parms)
        """
        return _moose.PyMooseContext_setupTau(self, *args)

    def tweakAlpha(self, *args):
        """
        tweakAlpha(PyMooseContext self, std::string channel, std::string gate)
        tweakAlpha(PyMooseContext self, Id gateId)
        """
        return _moose.PyMooseContext_tweakAlpha(self, *args)

    def tweakTau(self, *args):
        """
        tweakTau(PyMooseContext self, std::string channel, std::string gate)
        tweakTau(PyMooseContext self, Id gateId)
        """
        return _moose.PyMooseContext_tweakTau(self, *args)

    def readCell(self, *args):
        """
        readCell(PyMooseContext self, std::string filename, std::string cellpath, double cm, double rm, double ra, double erestAct, 
            double eleak)
        readCell(PyMooseContext self, std::string filename, std::string cellpath, double_vector params)
        readCell(PyMooseContext self, std::string fileName, std::string cellPath)
        """
        return _moose.PyMooseContext_readCell(self, *args)

    def readSBML(self, *args):
        """readSBML(PyMooseContext self, std::string fileName, std::string modelPath)"""
        return _moose.PyMooseContext_readSBML(self, *args)

    def readNeuroML(self, *args):
        """readNeuroML(PyMooseContext self, std::string fileName, std::string modelPath)"""
        return _moose.PyMooseContext_readNeuroML(self, *args)

    def getCurrentTime(self):
        """getCurrentTime(PyMooseContext self) -> double"""
        return _moose.PyMooseContext_getCurrentTime(self)

    def exists(self, *args):
        """
        exists(PyMooseContext self, Id id) -> bool
        exists(PyMooseContext self, std::string path) -> bool
        """
        return _moose.PyMooseContext_exists(self, *args)

    def addField(self, *args):
        """
        addField(PyMooseContext self, std::string objectPath, std::string fieldName)
        addField(PyMooseContext self, Id objectId, std::string fieldName)
        """
        return _moose.PyMooseContext_addField(self, *args)

    def createMap(self, *args):
        """
        createMap(PyMooseContext self, std::string src, std::string dest, unsigned int nx, unsigned int ny, double dx=1.0, 
            double dy=1.0, double xo=0.0, double yo=0.0, bool isObject=True)
        createMap(PyMooseContext self, std::string src, std::string dest, unsigned int nx, unsigned int ny, double dx=1.0, 
            double dy=1.0, double xo=0.0, double yo=0.0)
        createMap(PyMooseContext self, std::string src, std::string dest, unsigned int nx, unsigned int ny, double dx=1.0, 
            double dy=1.0, double xo=0.0)
        createMap(PyMooseContext self, std::string src, std::string dest, unsigned int nx, unsigned int ny, double dx=1.0, 
            double dy=1.0)
        createMap(PyMooseContext self, std::string src, std::string dest, unsigned int nx, unsigned int ny, double dx=1.0)
        createMap(PyMooseContext self, std::string src, std::string dest, unsigned int nx, unsigned int ny)
        createMap(PyMooseContext self, Id src, Id dest, std::string name, unsigned int nx, unsigned int ny, double dx=1.0, 
            double dy=1.0, double xo=0.0, double yo=0.0)
        createMap(PyMooseContext self, Id src, Id dest, std::string name, unsigned int nx, unsigned int ny, double dx=1.0, 
            double dy=1.0, double xo=0.0)
        createMap(PyMooseContext self, Id src, Id dest, std::string name, unsigned int nx, unsigned int ny, double dx=1.0, 
            double dy=1.0)
        createMap(PyMooseContext self, Id src, Id dest, std::string name, unsigned int nx, unsigned int ny, double dx=1.0)
        createMap(PyMooseContext self, Id src, Id dest, std::string name, unsigned int nx, unsigned int ny)
        createMap(PyMooseContext self, Id src, Id dest, std::string name, double_vector param)
        """
        return _moose.PyMooseContext_createMap(self, *args)

    def planarConnect(self, *args):
        """
        planarConnect(PyMooseContext self, std::string src, std::string dst, double probability=1.0)
        planarConnect(PyMooseContext self, std::string src, std::string dst)
        """
        return _moose.PyMooseContext_planarConnect(self, *args)

    def plannarDelay(self, *args):
        """plannarDelay(PyMooseContext self, std::string src, double delay)"""
        return _moose.PyMooseContext_plannarDelay(self, *args)

    def planarWeight(self, *args):
        """planarWeight(PyMooseContext self, std::string src, double weight)"""
        return _moose.PyMooseContext_planarWeight(self, *args)

    def className(self, *args):
        """className(PyMooseContext self, Id objId) -> std::string const &"""
        return _moose.PyMooseContext_className(self, *args)

    def description(self, *args):
        """description(PyMooseContext self, std::string const className) -> std::string const &"""
        return _moose.PyMooseContext_description(self, *args)

    def author(self, *args):
        """author(PyMooseContext self, std::string const className) -> std::string const &"""
        return _moose.PyMooseContext_author(self, *args)

    def doc(self, *args):
        """doc(PyMooseContext self, std::string const & className) -> std::string const &"""
        return _moose.PyMooseContext_doc(self, *args)

    def getNeighbours(self, *args):
        """
        getNeighbours(PyMooseContext self, Id object, std::string fieldName="*", int direction=INCOMING) -> Id_vector
        getNeighbours(PyMooseContext self, Id object, std::string fieldName="*") -> Id_vector
        getNeighbours(PyMooseContext self, Id object) -> Id_vector
        """
        return _moose.PyMooseContext_getNeighbours(self, *args)

    def getValueFieldList(self, *args):
        """getValueFieldList(PyMooseContext self, Id id) -> string_vector"""
        return _moose.PyMooseContext_getValueFieldList(self, *args)

    def getFieldList(self, *args):
        """
        getFieldList(PyMooseContext self, Id id, pymoose::FieldType ftype=FTYPE_ALL) -> string_vector
        getFieldList(PyMooseContext self, Id id) -> string_vector
        """
        return _moose.PyMooseContext_getFieldList(self, *args)

    parallel = _swig_property(_moose.PyMooseContext_parallel_get, _moose.PyMooseContext_parallel_set)
PyMooseContext_swigregister = _moose.PyMooseContext_swigregister
PyMooseContext_swigregister(PyMooseContext)
version = cvar.version
revision = cvar.revision

def PyMooseContext_recvCwe(*args):
  """PyMooseContext_recvCwe(Conn const * c, Id i)"""
  return _moose.PyMooseContext_recvCwe(*args)

def PyMooseContext_recvElist(*args):
  """PyMooseContext_recvElist(Conn const * c, Id_vector elist)"""
  return _moose.PyMooseContext_recvElist(*args)

def PyMooseContext_recvCreate(*args):
  """PyMooseContext_recvCreate(Conn const * c, Id i)"""
  return _moose.PyMooseContext_recvCreate(*args)

def PyMooseContext_recvField(*args):
  """PyMooseContext_recvField(Conn const * c, std::string value)"""
  return _moose.PyMooseContext_recvField(*args)

def PyMooseContext_recvWildcardList(*args):
  """PyMooseContext_recvWildcardList(Conn const * c, Id_vector value)"""
  return _moose.PyMooseContext_recvWildcardList(*args)

def PyMooseContext_recvClocks(*args):
  """PyMooseContext_recvClocks(Conn const * c, double_vector dbls)"""
  return _moose.PyMooseContext_recvClocks(*args)

def PyMooseContext_recvMessageList(*args):
  """PyMooseContext_recvMessageList(Conn const * c, Id_vector elist, std::string s)"""
  return _moose.PyMooseContext_recvMessageList(*args)

def PyMooseContext_createPyMooseContext(*args):
  """PyMooseContext_createPyMooseContext(std::string contextName, std::string shellName) -> PyMooseContext"""
  return _moose.PyMooseContext_createPyMooseContext(*args)

def PyMooseContext_destroyPyMooseContext(*args):
  """PyMooseContext_destroyPyMooseContext(PyMooseContext context)"""
  return _moose.PyMooseContext_destroyPyMooseContext(*args)

def PyMooseContext_srandom(*args):
  """PyMooseContext_srandom(long seed)"""
  return _moose.PyMooseContext_srandom(*args)
PyMooseContext.separator = _moose.cvar.PyMooseContext_separator

class PyMooseBase(object):
    """Proxy of C++ pymoose::PyMooseBase class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _moose.delete_PyMooseBase
    __del__ = lambda self : None;
    def __get_author(self):
        """__get_author(PyMooseBase self) -> std::string const &"""
        return _moose.PyMooseBase___get_author(self)

    def __get_description(self):
        """__get_description(PyMooseBase self) -> std::string const &"""
        return _moose.PyMooseBase___get_description(self)

    def destroy(*args):
        """destroy(Id id) -> bool"""
        return _moose.PyMooseBase_destroy(*args)

    destroy = staticmethod(destroy)
    def endSimulation():
        """endSimulation()"""
        return _moose.PyMooseBase_endSimulation()

    endSimulation = staticmethod(endSimulation)
    def getType(self):
        """getType(PyMooseBase self) -> std::string const &"""
        return _moose.PyMooseBase_getType(self)

    def getSeparator():
        """getSeparator() -> std::string const &"""
        return _moose.PyMooseBase_getSeparator()

    getSeparator = staticmethod(getSeparator)
    def getContext():
        """getContext() -> PyMooseContext"""
        return _moose.PyMooseBase_getContext()

    getContext = staticmethod(getContext)
    def getField(self, *args):
        """getField(PyMooseBase self, std::string name) -> std::string const &"""
        return _moose.PyMooseBase_getField(self, *args)

    def setField(self, *args):
        """setField(PyMooseBase self, std::string name, std::string value)"""
        return _moose.PyMooseBase_setField(self, *args)

    def getFieldList(self, *args):
        """
        getFieldList(PyMooseBase self, pymoose::FieldType ftype=FTYPE_ALL) -> string_vector
        getFieldList(PyMooseBase self) -> string_vector
        """
        return _moose.PyMooseBase_getFieldList(self, *args)

    def neighbours(self, *args):
        """
        neighbours(PyMooseBase self, std::string msgName="*", int direction=INCOMING) -> Id_vector
        neighbours(PyMooseBase self, std::string msgName="*") -> Id_vector
        neighbours(PyMooseBase self) -> Id_vector
        """
        return _moose.PyMooseBase_neighbours(self, *args)

    def __get_path(self):
        """__get_path(PyMooseBase self) -> std::string const &"""
        return _moose.PyMooseBase___get_path(self)

    def __get_id(self):
        """__get_id(PyMooseBase self) -> Id"""
        return _moose.PyMooseBase___get_id(self)

    def addField(self, *args):
        """addField(PyMooseBase self, std::string const fieldName)"""
        return _moose.PyMooseBase_addField(self, *args)

    def useClock(self, *args):
        """
        useClock(PyMooseBase self, int clockNo, std::string func="process")
        useClock(PyMooseBase self, int clockNo)
        useClock(PyMooseBase self, Id clock, std::string func="process")
        useClock(PyMooseBase self, Id clock)
        """
        return _moose.PyMooseBase_useClock(self, *args)

    def connect(self, *args):
        """
        connect(PyMooseBase self, std::string field, PyMooseBase dest, std::string destField) -> bool
        connect(PyMooseBase self, std::string field, Id dest, std::string destField) -> bool
        """
        return _moose.PyMooseBase_connect(self, *args)

    def getMessageList(self, *args):
        """getMessageList(PyMooseBase self, std::string field, bool isIncoming) -> string_vector"""
        return _moose.PyMooseBase_getMessageList(self, *args)

    def inMessages(self):
        """inMessages(PyMooseBase self) -> string_vector"""
        return _moose.PyMooseBase_inMessages(self)

    def outMessages(self):
        """outMessages(PyMooseBase self) -> string_vector"""
        return _moose.PyMooseBase_outMessages(self)

    def exists(*args):
        """
        exists(Id id) -> bool
        exists(std::string path) -> bool
        """
        return _moose.PyMooseBase_exists(*args)

    exists = staticmethod(exists)
    def le():
        """le() -> Id_vector"""
        return _moose.PyMooseBase_le()

    le = staticmethod(le)
    def pwe():
        """pwe() -> Id"""
        return _moose.PyMooseBase_pwe()

    pwe = staticmethod(pwe)
    def ce(*args):
        """
        ce(Id newElement) -> Id
        ce(std::string path) -> Id
        """
        return _moose.PyMooseBase_ce(*args)

    ce = staticmethod(ce)
    def pathToId(*args):
        """
        pathToId(std::string path, bool echo=True) -> Id
        pathToId(std::string path) -> Id
        """
        return _moose.PyMooseBase_pathToId(*args)

    pathToId = staticmethod(pathToId)
    def idToPath(*args):
        """idToPath(Id id) -> std::string const &"""
        return _moose.PyMooseBase_idToPath(*args)

    idToPath = staticmethod(idToPath)
    def getParent(*args):
        """getParent(Id id) -> Id"""
        return _moose.PyMooseBase_getParent(*args)

    getParent = staticmethod(getParent)
    def getChildren(*args):
        """getChildren(Id id) -> Id_vector"""
        return _moose.PyMooseBase_getChildren(*args)

    getChildren = staticmethod(getChildren)
    def initSimulation():
        """initSimulation()"""
        return _moose.PyMooseBase_initSimulation()

    initSimulation = staticmethod(initSimulation)
    id = _swig_property(_moose.PyMooseBase_id_get)
    author = _swig_property(_moose.PyMooseBase_author_get)
    description = _swig_property(_moose.PyMooseBase_description_get)
    path = _swig_property(_moose.PyMooseBase_path_get)
PyMooseBase_swigregister = _moose.PyMooseBase_swigregister
PyMooseBase_swigregister(PyMooseBase)

def PyMooseBase_destroy(*args):
  """PyMooseBase_destroy(Id id) -> bool"""
  return _moose.PyMooseBase_destroy(*args)

def PyMooseBase_endSimulation():
  """PyMooseBase_endSimulation()"""
  return _moose.PyMooseBase_endSimulation()

def PyMooseBase_getSeparator():
  """PyMooseBase_getSeparator() -> std::string const &"""
  return _moose.PyMooseBase_getSeparator()

def PyMooseBase_getContext():
  """PyMooseBase_getContext() -> PyMooseContext"""
  return _moose.PyMooseBase_getContext()

def PyMooseBase_exists(*args):
  """
    exists(Id id) -> bool
    PyMooseBase_exists(std::string path) -> bool
    """
  return _moose.PyMooseBase_exists(*args)

def PyMooseBase_le():
  """PyMooseBase_le() -> Id_vector"""
  return _moose.PyMooseBase_le()

def PyMooseBase_pwe():
  """PyMooseBase_pwe() -> Id"""
  return _moose.PyMooseBase_pwe()

def PyMooseBase_ce(*args):
  """
    ce(Id newElement) -> Id
    PyMooseBase_ce(std::string path) -> Id
    """
  return _moose.PyMooseBase_ce(*args)

def PyMooseBase_pathToId(*args):
  """
    pathToId(std::string path, bool echo=True) -> Id
    PyMooseBase_pathToId(std::string path) -> Id
    """
  return _moose.PyMooseBase_pathToId(*args)

def PyMooseBase_idToPath(*args):
  """PyMooseBase_idToPath(Id id) -> std::string const &"""
  return _moose.PyMooseBase_idToPath(*args)

def PyMooseBase_getParent(*args):
  """PyMooseBase_getParent(Id id) -> Id"""
  return _moose.PyMooseBase_getParent(*args)

def PyMooseBase_getChildren(*args):
  """PyMooseBase_getChildren(Id id) -> Id_vector"""
  return _moose.PyMooseBase_getChildren(*args)

def PyMooseBase_initSimulation():
  """PyMooseBase_initSimulation()"""
  return _moose.PyMooseBase_initSimulation()


def initPyMoose():
  """initPyMoose()"""
  return _moose.initPyMoose()
context = PyMooseBase.getContext()    
from inspect import isclass

def doc(cls):
    """Return documentation string from MOOSE"""
    if isclass(cls):
        return PyMooseBase.getContext().doc(cls.__name__)
    elif isinstance(cls, PyMooseBase):
        return PyMooseBase.getContext().doc(cls.className)
    elif isinstance(cls, str):
        return PyMooseBase.getContext().doc(cls)
                

class Neutral(PyMooseBase):
    """Proxy of C++ pymoose::Neutral class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Neutral self, std::string className, std::string objectName, Id parentId) -> Neutral
        __init__(pymoose::Neutral self, std::string className, std::string path) -> Neutral
        __init__(pymoose::Neutral self, std::string className, std::string objectName, PyMooseBase parent) -> Neutral
        __init__(pymoose::Neutral self, Id id) -> Neutral
        __init__(pymoose::Neutral self, std::string path) -> Neutral
        __init__(pymoose::Neutral self, std::string name, Id parentId) -> Neutral
        __init__(pymoose::Neutral self, std::string name, PyMooseBase parent) -> Neutral
        __init__(pymoose::Neutral self, Neutral src, std::string name, PyMooseBase parent) -> Neutral
        __init__(pymoose::Neutral self, Neutral src, std::string name, Id parent) -> Neutral
        __init__(pymoose::Neutral self, Id src, std::string name, Id parent) -> Neutral
        __init__(pymoose::Neutral self, Neutral src, std::string path) -> Neutral
        __init__(pymoose::Neutral self, Id src, std::string path) -> Neutral
        """
        this = _moose.new_Neutral(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Neutral
    __del__ = lambda self : None;
    def getType(self):
        """getType(Neutral self) -> std::string const &"""
        return _moose.Neutral_getType(self)

    def __get_name(self):
        """__get_name(Neutral self) -> std::string const &"""
        return _moose.Neutral___get_name(self)

    def __set_name(self, *args):
        """__set_name(Neutral self, std::string name)"""
        return _moose.Neutral___set_name(self, *args)

    def __get_index(self):
        """__get_index(Neutral self) -> int"""
        return _moose.Neutral___get_index(self)

    def __get_parent(self):
        """__get_parent(Neutral self) -> Id"""
        return _moose.Neutral___get_parent(self)

    def __get_class(self):
        """__get_class(Neutral self) -> std::string const &"""
        return _moose.Neutral___get_class(self)

    def __get_childList(self):
        """__get_childList(Neutral self) -> Id_vector"""
        return _moose.Neutral___get_childList(self)

    def children(self, path=".", ordered=True):
        """
        children(Neutral self, std::string path=".", bool ordered=True) -> Id_vector
        children(Neutral self, std::string path=".") -> Id_vector
        children(Neutral self) -> Id_vector
        """
        return _moose.Neutral_children(self, path, ordered)

    def __get_node(self):
        """__get_node(Neutral self) -> unsigned int"""
        return _moose.Neutral___get_node(self)

    def __get_cpu(self):
        """__get_cpu(Neutral self) -> double"""
        return _moose.Neutral___get_cpu(self)

    def __get_dataMem(self):
        """__get_dataMem(Neutral self) -> unsigned int"""
        return _moose.Neutral___get_dataMem(self)

    def __get_msgMem(self):
        """__get_msgMem(Neutral self) -> unsigned int"""
        return _moose.Neutral___get_msgMem(self)

    def __get_fieldList(self):
        """__get_fieldList(Neutral self) -> string_vector"""
        return _moose.Neutral___get_fieldList(self)

    name = _swig_property(_moose.Neutral_name_get, _moose.Neutral_name_set)
    index = _swig_property(_moose.Neutral_index_get)
    parent = _swig_property(_moose.Neutral_parent_get)
    className = _swig_property(_moose.Neutral_className_get)
    childList = _swig_property(_moose.Neutral_childList_get)
    node = _swig_property(_moose.Neutral_node_get)
    cpu = _swig_property(_moose.Neutral_cpu_get)
    dataMem = _swig_property(_moose.Neutral_dataMem_get)
    msgMem = _swig_property(_moose.Neutral_msgMem_get)
    fieldList = _swig_property(_moose.Neutral_fieldList_get)
Neutral_swigregister = _moose.Neutral_swigregister
Neutral_swigregister(Neutral)

class Class(Neutral):
    """Proxy of C++ pymoose::Class class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Class self, Id id) -> Class
        __init__(pymoose::Class self, std::string path, std::string name) -> Class
        __init__(pymoose::Class self, std::string name, Id parentId) -> Class
        __init__(pymoose::Class self, std::string name, PyMooseBase parent) -> Class
        __init__(pymoose::Class self, Class src, std::string name, PyMooseBase parent) -> Class
        __init__(pymoose::Class self, Class src, std::string name, Id parent) -> Class
        __init__(pymoose::Class self, Id src, std::string name, Id parent) -> Class
        __init__(pymoose::Class self, Class src, std::string path) -> Class
        __init__(pymoose::Class self, Id src, std::string path) -> Class
        """
        this = _moose.new_Class(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Class
    __del__ = lambda self : None;
    def getType(self):
        """getType(Class self) -> std::string const &"""
        return _moose.Class_getType(self)

    def __get_tick(self):
        """__get_tick(Class self) -> unsigned int"""
        return _moose.Class___get_tick(self)

    def __set_tick(self, *args):
        """__set_tick(Class self, unsigned int arg2)"""
        return _moose.Class___set_tick(self, *args)

    def __get_stage(self):
        """__get_stage(Class self) -> unsigned int"""
        return _moose.Class___get_stage(self)

    def __set_stage(self, *args):
        """__set_stage(Class self, unsigned int arg2)"""
        return _moose.Class___set_stage(self, *args)

    def __get_clock(self):
        """__get_clock(Class self) -> std::string"""
        return _moose.Class___get_clock(self)

    def setClock(self, *args):
        """setClock(Class self, std::string function, std::string clock)"""
        return _moose.Class_setClock(self, *args)

    author = _swig_property(_moose.Class_author_get)
    description = _swig_property(_moose.Class_description_get)
    tick = _swig_property(_moose.Class_tick_get, _moose.Class_tick_set)
    stage = _swig_property(_moose.Class_stage_get, _moose.Class_stage_set)
Class_swigregister = _moose.Class_swigregister
Class_swigregister(Class)

class Calculator(Neutral):
    """Proxy of C++ pymoose::Calculator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Calculator self, std::string className, std::string objectName, Id parentId) -> Calculator
        __init__(pymoose::Calculator self, std::string className, std::string path) -> Calculator
        __init__(pymoose::Calculator self, std::string className, std::string objectName, PyMooseBase parent) -> Calculator
        __init__(pymoose::Calculator self, Id id) -> Calculator
        __init__(pymoose::Calculator self, std::string path) -> Calculator
        __init__(pymoose::Calculator self, std::string name, Id parentId) -> Calculator
        __init__(pymoose::Calculator self, std::string name, PyMooseBase parent) -> Calculator
        __init__(pymoose::Calculator self, Calculator src, std::string name, PyMooseBase parent) -> Calculator
        __init__(pymoose::Calculator self, Calculator src, std::string name, Id parent) -> Calculator
        __init__(pymoose::Calculator self, Calculator src, std::string path) -> Calculator
        __init__(pymoose::Calculator self, Id src, std::string name, Id parent) -> Calculator
        __init__(pymoose::Calculator self, Id src, std::string path) -> Calculator
        """
        this = _moose.new_Calculator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Calculator
    __del__ = lambda self : None;
    def getType(self):
        """getType(Calculator self) -> std::string const &"""
        return _moose.Calculator_getType(self)

    def __get_initValue(self):
        """__get_initValue(Calculator self) -> double"""
        return _moose.Calculator___get_initValue(self)

    def __set_initValue(self, *args):
        """__set_initValue(Calculator self, double initValue)"""
        return _moose.Calculator___set_initValue(self, *args)

    def __get_value(self):
        """__get_value(Calculator self) -> double"""
        return _moose.Calculator___get_value(self)

    initValue = _swig_property(_moose.Calculator_initValue_get, _moose.Calculator_initValue_set)
    value = _swig_property(_moose.Calculator_value_get)
Calculator_swigregister = _moose.Calculator_swigregister
Calculator_swigregister(Calculator)

class Cell(Neutral):
    """Proxy of C++ pymoose::Cell class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Cell self, Id id) -> Cell
        __init__(pymoose::Cell self, std::string path) -> Cell
        __init__(pymoose::Cell self, std::string name, Id parentId) -> Cell
        __init__(pymoose::Cell self, std::string name, PyMooseBase parent) -> Cell
        __init__(pymoose::Cell self, Cell src, std::string name, PyMooseBase parent) -> Cell
        __init__(pymoose::Cell self, Cell src, std::string name, Id parent) -> Cell
        __init__(pymoose::Cell self, Id src, std::string name, Id parent) -> Cell
        __init__(pymoose::Cell self, Id src, std::string path) -> Cell
        __init__(pymoose::Cell self, Cell src, std::string path) -> Cell
        __init__(pymoose::Cell self, std::string cellpath, std::string filepath) -> Cell
        """
        this = _moose.new_Cell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Cell
    __del__ = lambda self : None;
    def getType(self):
        """getType(Cell self) -> std::string const &"""
        return _moose.Cell_getType(self)

    def __set_method(self, *args):
        """__set_method(Cell self, std::string method)"""
        return _moose.Cell___set_method(self, *args)

    def __get_method(self):
        """__get_method(Cell self) -> std::string"""
        return _moose.Cell___get_method(self)

    def __get_variableDt(self):
        """__get_variableDt(Cell self) -> bool"""
        return _moose.Cell___get_variableDt(self)

    def __get_implicit(self):
        """__get_implicit(Cell self) -> bool"""
        return _moose.Cell___get_implicit(self)

    method = _swig_property(_moose.Cell_method_get, _moose.Cell_method_set)
    variableDt = _swig_property(_moose.Cell_variableDt_get)
    implicit = _swig_property(_moose.Cell_implicit_get)
    description = _swig_property(_moose.Cell_description_get)
Cell_swigregister = _moose.Cell_swigregister
Cell_swigregister(Cell)

class Tick(Neutral):
    """Proxy of C++ pymoose::Tick class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Tick self, Id id) -> Tick
        __init__(pymoose::Tick self, std::string path) -> Tick
        __init__(pymoose::Tick self, std::string name, Id parentId) -> Tick
        __init__(pymoose::Tick self, std::string name, PyMooseBase parent) -> Tick
        __init__(pymoose::Tick self, Tick src, std::string name, PyMooseBase parent) -> Tick
        __init__(pymoose::Tick self, Tick src, std::string name, Id parent) -> Tick
        __init__(pymoose::Tick self, Id src, std::string name, Id parent) -> Tick
        __init__(pymoose::Tick self, Tick src, std::string path) -> Tick
        __init__(pymoose::Tick self, Id src, std::string path) -> Tick
        """
        this = _moose.new_Tick(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Tick
    __del__ = lambda self : None;
    def getType(self):
        """getType(Tick self) -> std::string const &"""
        return _moose.Tick_getType(self)

    def __get_dt(self):
        """__get_dt(Tick self) -> double"""
        return _moose.Tick___get_dt(self)

    def __set_dt(self, *args):
        """__set_dt(Tick self, double dt)"""
        return _moose.Tick___set_dt(self, *args)

    def __get_stage(self):
        """__get_stage(Tick self) -> int"""
        return _moose.Tick___get_stage(self)

    def __set_stage(self, *args):
        """__set_stage(Tick self, int stage)"""
        return _moose.Tick___set_stage(self, *args)

    def __get_ordinal(self):
        """__get_ordinal(Tick self) -> int"""
        return _moose.Tick___get_ordinal(self)

    def __set_ordinal(self, *args):
        """__set_ordinal(Tick self, int ordinal)"""
        return _moose.Tick___set_ordinal(self, *args)

    def __get_nextTime(self):
        """__get_nextTime(Tick self) -> double"""
        return _moose.Tick___get_nextTime(self)

    def __set_nextTime(self, *args):
        """__set_nextTime(Tick self, double nextTime)"""
        return _moose.Tick___set_nextTime(self, *args)

    def __set_path(self, *args):
        """__set_path(Tick self, std::string path)"""
        return _moose.Tick___set_path(self, *args)

    def __get_updateDtSrc(self):
        """__get_updateDtSrc(Tick self) -> double"""
        return _moose.Tick___get_updateDtSrc(self)

    def __set_updateDtSrc(self, *args):
        """__set_updateDtSrc(Tick self, double updateDtSrc)"""
        return _moose.Tick___set_updateDtSrc(self, *args)

    dt = _swig_property(_moose.Tick_dt_get, _moose.Tick_dt_set)
    stage = _swig_property(_moose.Tick_stage_get, _moose.Tick_stage_set)
    ordinal = _swig_property(_moose.Tick_ordinal_get, _moose.Tick_ordinal_set)
    nextTime = _swig_property(_moose.Tick_nextTime_get, _moose.Tick_nextTime_set)
    updateDtSrc = _swig_property(_moose.Tick_updateDtSrc_get, _moose.Tick_updateDtSrc_set)
Tick_swigregister = _moose.Tick_swigregister
Tick_swigregister(Tick)

class ClockJob(Neutral):
    """Proxy of C++ pymoose::ClockJob class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::ClockJob self, Id id) -> ClockJob
        __init__(pymoose::ClockJob self, std::string path) -> ClockJob
        __init__(pymoose::ClockJob self, std::string name, Id parentId) -> ClockJob
        __init__(pymoose::ClockJob self, std::string name, PyMooseBase parent) -> ClockJob
        __init__(pymoose::ClockJob self, ClockJob src, std::string name, PyMooseBase parent) -> ClockJob
        __init__(pymoose::ClockJob self, ClockJob src, std::string name, Id parent) -> ClockJob
        __init__(pymoose::ClockJob self, Id src, std::string name, Id parent) -> ClockJob
        __init__(pymoose::ClockJob self, ClockJob src, std::string path) -> ClockJob
        __init__(pymoose::ClockJob self, Id src, std::string path) -> ClockJob
        """
        this = _moose.new_ClockJob(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_ClockJob
    __del__ = lambda self : None;
    def getType(self):
        """getType(ClockJob self) -> std::string const &"""
        return _moose.ClockJob_getType(self)

    def __get_runTime(self):
        """__get_runTime(ClockJob self) -> double"""
        return _moose.ClockJob___get_runTime(self)

    def __set_runTime(self, *args):
        """__set_runTime(ClockJob self, double runTime)"""
        return _moose.ClockJob___set_runTime(self, *args)

    def __get_currentTime(self):
        """__get_currentTime(ClockJob self) -> double"""
        return _moose.ClockJob___get_currentTime(self)

    def __get_nsteps(self):
        """__get_nsteps(ClockJob self) -> int"""
        return _moose.ClockJob___get_nsteps(self)

    def __set_nsteps(self, *args):
        """__set_nsteps(ClockJob self, int nsteps)"""
        return _moose.ClockJob___set_nsteps(self, *args)

    def __get_currentStep(self):
        """__get_currentStep(ClockJob self) -> int"""
        return _moose.ClockJob___get_currentStep(self)

    def __get_autoschedule(self):
        """__get_autoschedule(ClockJob self) -> int"""
        return _moose.ClockJob___get_autoschedule(self)

    def __set_autoschedule(self, *args):
        """__set_autoschedule(ClockJob self, int value)"""
        return _moose.ClockJob___set_autoschedule(self, *args)

    def getClocks():
        """getClocks() -> double_vector"""
        return _moose.ClockJob_getClocks()

    getClocks = staticmethod(getClocks)
    runTime = _swig_property(_moose.ClockJob_runTime_get, _moose.ClockJob_runTime_set)
    currentTime = _swig_property(_moose.ClockJob_currentTime_get)
    nsteps = _swig_property(_moose.ClockJob_nsteps_get, _moose.ClockJob_nsteps_set)
    currentStep = _swig_property(_moose.ClockJob_currentStep_get)
    autoschedule = _swig_property(_moose.ClockJob_autoschedule_get, _moose.ClockJob_autoschedule_set)
ClockJob_swigregister = _moose.ClockJob_swigregister
ClockJob_swigregister(ClockJob)

def ClockJob_getClocks():
  """ClockJob_getClocks() -> double_vector"""
  return _moose.ClockJob_getClocks()

class Interpol(Neutral):
    """Proxy of C++ pymoose::Interpol class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Interpol self, Id id) -> Interpol
        __init__(pymoose::Interpol self, std::string path) -> Interpol
        __init__(pymoose::Interpol self, std::string name, Id parentId) -> Interpol
        __init__(pymoose::Interpol self, std::string name, PyMooseBase parent) -> Interpol
        __init__(pymoose::Interpol self, Interpol src, std::string name, PyMooseBase parent) -> Interpol
        __init__(pymoose::Interpol self, Interpol src, std::string name, Id parent) -> Interpol
        __init__(pymoose::Interpol self, Id src, std::string name, Id parent) -> Interpol
        __init__(pymoose::Interpol self, Interpol src, std::string path) -> Interpol
        __init__(pymoose::Interpol self, Id src, std::string path) -> Interpol
        """
        this = _moose.new_Interpol(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Interpol
    __del__ = lambda self : None;
    def getType(self):
        """getType(Interpol self) -> std::string const &"""
        return _moose.Interpol_getType(self)

    def __get_xmin(self):
        """__get_xmin(Interpol self) -> double"""
        return _moose.Interpol___get_xmin(self)

    def __set_xmin(self, *args):
        """__set_xmin(Interpol self, double xmin)"""
        return _moose.Interpol___set_xmin(self, *args)

    def __get_xmax(self):
        """__get_xmax(Interpol self) -> double"""
        return _moose.Interpol___get_xmax(self)

    def __set_xmax(self, *args):
        """__set_xmax(Interpol self, double xmax)"""
        return _moose.Interpol___set_xmax(self, *args)

    def __get_xdivs(self):
        """__get_xdivs(Interpol self) -> int"""
        return _moose.Interpol___get_xdivs(self)

    def __set_xdivs(self, *args):
        """__set_xdivs(Interpol self, int xdivs)"""
        return _moose.Interpol___set_xdivs(self, *args)

    def __get_mode(self):
        """__get_mode(Interpol self) -> int"""
        return _moose.Interpol___get_mode(self)

    def __set_mode(self, *args):
        """__set_mode(Interpol self, int mode)"""
        return _moose.Interpol___set_mode(self, *args)

    def __get_dx(self):
        """__get_dx(Interpol self) -> double"""
        return _moose.Interpol___get_dx(self)

    def __set_dx(self, *args):
        """__set_dx(Interpol self, double dx)"""
        return _moose.Interpol___set_dx(self, *args)

    def __get_sy(self):
        """__get_sy(Interpol self) -> double"""
        return _moose.Interpol___get_sy(self)

    def __set_sy(self, *args):
        """__set_sy(Interpol self, double sy)"""
        return _moose.Interpol___set_sy(self, *args)

    def __getitem__(self, *args):
        """__getitem__(Interpol self, unsigned int index) -> double"""
        return _moose.Interpol___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(Interpol self, unsigned int index, double value)"""
        return _moose.Interpol___setitem__(self, *args)

    def __iter__(self):
        """__iter__(Interpol self) -> TableIterator"""
        return _moose.Interpol___iter__(self)

    def __len__(self):
        """__len__(Interpol self) -> int"""
        return _moose.Interpol___len__(self)

    def __get_calcMode(self):
        """__get_calcMode(Interpol self) -> int"""
        return _moose.Interpol___get_calcMode(self)

    def __set_calcMode(self, *args):
        """__set_calcMode(Interpol self, int calc_mode)"""
        return _moose.Interpol___set_calcMode(self, *args)

    def __get_table(self):
        """__get_table(Interpol self) -> double_vector"""
        return _moose.Interpol___get_table(self)

    def dumpFile(self, *args):
        """
        dumpFile(Interpol self) -> std::string
        dumpFile(Interpol self, std::string fileName, bool append=False)
        dumpFile(Interpol self, std::string fileName)
        """
        return _moose.Interpol_dumpFile(self, *args)

    def tabFill(self, *args):
        """tabFill(Interpol self, int xdivs, int mode)"""
        return _moose.Interpol_tabFill(self, *args)

    def load(self, *args):
        """load(Interpol self, std::string fileName, unsigned int skiplines)"""
        return _moose.Interpol_load(self, *args)

    def clear(self):
        """clear(Interpol self)"""
        return _moose.Interpol_clear(self)

    def push(self, *args):
        """push(Interpol self, double arg2)"""
        return _moose.Interpol_push(self, *args)

    def pop(self):
        """pop(Interpol self)"""
        return _moose.Interpol_pop(self)

    xmin = _swig_property(_moose.Interpol_xmin_get, _moose.Interpol_xmin_set)
    xmax = _swig_property(_moose.Interpol_xmax_get, _moose.Interpol_xmax_set)
    xdivs = _swig_property(_moose.Interpol_xdivs_get, _moose.Interpol_xdivs_set)
    mode = _swig_property(_moose.Interpol_mode_get, _moose.Interpol_mode_set)
    dx = _swig_property(_moose.Interpol_dx_get, _moose.Interpol_dx_set)
    sy = _swig_property(_moose.Interpol_sy_get, _moose.Interpol_sy_set)
    calcMode = _swig_property(_moose.Interpol_calcMode_get, _moose.Interpol_calcMode_set)
    calc_mode = _swig_property(_moose.Interpol_calc_mode_get, _moose.Interpol_calc_mode_set)
    table = _swig_property(_moose.Interpol_table_get)
Interpol_swigregister = _moose.Interpol_swigregister
Interpol_swigregister(Interpol)

class Interpol2D(Interpol):
    """Proxy of C++ pymoose::Interpol2D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Interpol2D self, Id id) -> Interpol2D
        __init__(pymoose::Interpol2D self, std::string path) -> Interpol2D
        __init__(pymoose::Interpol2D self, std::string name, Id parentId) -> Interpol2D
        __init__(pymoose::Interpol2D self, std::string name, PyMooseBase parent) -> Interpol2D
        __init__(pymoose::Interpol2D self, Interpol2D src, std::string name, PyMooseBase parent) -> Interpol2D
        __init__(pymoose::Interpol2D self, Interpol2D src, std::string name, Id parent) -> Interpol2D
        __init__(pymoose::Interpol2D self, Interpol2D src, std::string path) -> Interpol2D
        __init__(pymoose::Interpol2D self, Id src, std::string name, Id parent) -> Interpol2D
        __init__(pymoose::Interpol2D self, Id src, std::string path) -> Interpol2D
        """
        this = _moose.new_Interpol2D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Interpol2D
    __del__ = lambda self : None;
    def getType(self):
        """getType(Interpol2D self) -> std::string const &"""
        return _moose.Interpol2D_getType(self)

    def __get_ymin(self):
        """__get_ymin(Interpol2D self) -> double"""
        return _moose.Interpol2D___get_ymin(self)

    def __set_ymin(self, *args):
        """__set_ymin(Interpol2D self, double ymin)"""
        return _moose.Interpol2D___set_ymin(self, *args)

    def __get_ymax(self):
        """__get_ymax(Interpol2D self) -> double"""
        return _moose.Interpol2D___get_ymax(self)

    def __set_ymax(self, *args):
        """__set_ymax(Interpol2D self, double ymax)"""
        return _moose.Interpol2D___set_ymax(self, *args)

    def __get_ydivs(self):
        """__get_ydivs(Interpol2D self) -> int"""
        return _moose.Interpol2D___get_ydivs(self)

    def __set_ydivs(self, *args):
        """__set_ydivs(Interpol2D self, int ydivs)"""
        return _moose.Interpol2D___set_ydivs(self, *args)

    def __get_dy(self):
        """__get_dy(Interpol2D self) -> double"""
        return _moose.Interpol2D___get_dy(self)

    def __set_dy(self, *args):
        """__set_dy(Interpol2D self, double dy)"""
        return _moose.Interpol2D___set_dy(self, *args)

    def getTableValue(self, *args):
        """getTableValue(Interpol2D self, unsigned int row, unsigned int col) -> double"""
        return _moose.Interpol2D_getTableValue(self, *args)

    def setTableValue(self, *args):
        """setTableValue(Interpol2D self, unsigned int row, unsigned int col, double value)"""
        return _moose.Interpol2D_setTableValue(self, *args)

    ymin = _swig_property(_moose.Interpol2D_ymin_get, _moose.Interpol2D_ymin_set)
    ymax = _swig_property(_moose.Interpol2D_ymax_get, _moose.Interpol2D_ymax_set)
    ydivs = _swig_property(_moose.Interpol2D_ydivs_get, _moose.Interpol2D_ydivs_set)
    dy = _swig_property(_moose.Interpol2D_dy_get, _moose.Interpol2D_dy_set)
Interpol2D_swigregister = _moose.Interpol2D_swigregister
Interpol2D_swigregister(Interpol2D)

class TableIterator(object):
    """Proxy of C++ pymoose::TableIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(pymoose::TableIterator self, Interpol table) -> TableIterator"""
        this = _moose.new_TableIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self):
        """__iter__(TableIterator self) -> TableIterator"""
        return _moose.TableIterator___iter__(self)

    def __hasNext__(self):
        """__hasNext__(TableIterator self) -> bool"""
        return _moose.TableIterator___hasNext__(self)

    def __next__(self):
        """__next__(TableIterator self) -> double"""
        return _moose.TableIterator___next__(self)

    def _generator_(self):
    	if self.__hasNext__():
    		yield self.__next__()

    def next(self):
    	return self._generator_().next()
    	

    __swig_destroy__ = _moose.delete_TableIterator
    __del__ = lambda self : None;
TableIterator_swigregister = _moose.TableIterator_swigregister
TableIterator_swigregister(TableIterator)

TAB_IO = _moose.TAB_IO
TAB_LOOP = _moose.TAB_LOOP
TAB_ONCE = _moose.TAB_ONCE
TAB_BUF = _moose.TAB_BUF
TAB_SPIKE = _moose.TAB_SPIKE
TAB_FIELDS = _moose.TAB_FIELDS
TAB_DELAY = _moose.TAB_DELAY
class Table(Interpol):
    """Proxy of C++ pymoose::Table class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Table self, Id id) -> Table
        __init__(pymoose::Table self, std::string path) -> Table
        __init__(pymoose::Table self, std::string name, Id parentId) -> Table
        __init__(pymoose::Table self, std::string name, PyMooseBase parent) -> Table
        __init__(pymoose::Table self, Table src, std::string name, PyMooseBase parent) -> Table
        __init__(pymoose::Table self, Table src, std::string name, Id parent) -> Table
        __init__(pymoose::Table self, Id src, std::string name, Id parent) -> Table
        __init__(pymoose::Table self, Table src, std::string path) -> Table
        __init__(pymoose::Table self, Id src, std::string path) -> Table
        """
        this = _moose.new_Table(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Table
    __del__ = lambda self : None;
    def getType(self):
        """getType(Table self) -> std::string const &"""
        return _moose.Table_getType(self)

    def __get_input(self):
        """__get_input(Table self) -> double"""
        return _moose.Table___get_input(self)

    def __set_input(self, *args):
        """__set_input(Table self, double input)"""
        return _moose.Table___set_input(self, *args)

    def __get_output(self):
        """__get_output(Table self) -> double"""
        return _moose.Table___get_output(self)

    def __set_output(self, *args):
        """__set_output(Table self, double output)"""
        return _moose.Table___set_output(self, *args)

    def __get_stepMode(self):
        """__get_stepMode(Table self) -> int"""
        return _moose.Table___get_stepMode(self)

    def __set_stepMode(self, *args):
        """__set_stepMode(Table self, int stepMode)"""
        return _moose.Table___set_stepMode(self, *args)

    def __get_stepSize(self):
        """__get_stepSize(Table self) -> double"""
        return _moose.Table___get_stepSize(self)

    def __set_stepSize(self, *args):
        """__set_stepSize(Table self, double stepSize)"""
        return _moose.Table___set_stepSize(self, *args)

    def __get_threshold(self):
        """__get_threshold(Table self) -> double"""
        return _moose.Table___get_threshold(self)

    def __set_threshold(self, *args):
        """__set_threshold(Table self, double threshold)"""
        return _moose.Table___set_threshold(self, *args)

    def createTable(self, *args):
        """createTable(Table self, int xdiv, double xmin, double xmax)"""
        return _moose.Table_createTable(self, *args)

    input = _swig_property(_moose.Table_input_get, _moose.Table_input_set)
    output = _swig_property(_moose.Table_output_get, _moose.Table_output_set)
    stepMode = _swig_property(_moose.Table_stepMode_get, _moose.Table_stepMode_set)
    stepSize = _swig_property(_moose.Table_stepSize_get, _moose.Table_stepSize_set)
    stepsize = _swig_property(_moose.Table_stepsize_get, _moose.Table_stepsize_set)
    threshold = _swig_property(_moose.Table_threshold_get, _moose.Table_threshold_set)
    stepmode = _swig_property(_moose.Table_stepmode_get, _moose.Table_stepmode_set)
Table_swigregister = _moose.Table_swigregister
Table_swigregister(Table)

class SynChan(Neutral):
    """Proxy of C++ pymoose::SynChan class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::SynChan self, Id id) -> SynChan
        __init__(pymoose::SynChan self, std::string path) -> SynChan
        __init__(pymoose::SynChan self, std::string name, Id parentId) -> SynChan
        __init__(pymoose::SynChan self, std::string name, PyMooseBase parent) -> SynChan
        __init__(pymoose::SynChan self, SynChan src, std::string name, PyMooseBase parent) -> SynChan
        __init__(pymoose::SynChan self, SynChan src, std::string name, Id parent) -> SynChan
        __init__(pymoose::SynChan self, SynChan src, std::string path) -> SynChan
        __init__(pymoose::SynChan self, Id src, std::string name, Id parent) -> SynChan
        __init__(pymoose::SynChan self, Id src, std::string path) -> SynChan
        """
        this = _moose.new_SynChan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_SynChan
    __del__ = lambda self : None;
    def getType(self):
        """getType(SynChan self) -> std::string const &"""
        return _moose.SynChan_getType(self)

    def __get_Gbar(self):
        """__get_Gbar(SynChan self) -> double"""
        return _moose.SynChan___get_Gbar(self)

    def __set_Gbar(self, *args):
        """__set_Gbar(SynChan self, double Gbar)"""
        return _moose.SynChan___set_Gbar(self, *args)

    def __get_Ek(self):
        """__get_Ek(SynChan self) -> double"""
        return _moose.SynChan___get_Ek(self)

    def __set_Ek(self, *args):
        """__set_Ek(SynChan self, double Ek)"""
        return _moose.SynChan___set_Ek(self, *args)

    def __get_tau1(self):
        """__get_tau1(SynChan self) -> double"""
        return _moose.SynChan___get_tau1(self)

    def __set_tau1(self, *args):
        """__set_tau1(SynChan self, double tau1)"""
        return _moose.SynChan___set_tau1(self, *args)

    def __get_tau2(self):
        """__get_tau2(SynChan self) -> double"""
        return _moose.SynChan___get_tau2(self)

    def __set_tau2(self, *args):
        """__set_tau2(SynChan self, double tau2)"""
        return _moose.SynChan___set_tau2(self, *args)

    def __get_normalizeWeights(self):
        """__get_normalizeWeights(SynChan self) -> bool"""
        return _moose.SynChan___get_normalizeWeights(self)

    def __set_normalizeWeights(self, *args):
        """__set_normalizeWeights(SynChan self, bool normalizeWeights)"""
        return _moose.SynChan___set_normalizeWeights(self, *args)

    def __get_Gk(self):
        """__get_Gk(SynChan self) -> double"""
        return _moose.SynChan___get_Gk(self)

    def __set_Gk(self, *args):
        """__set_Gk(SynChan self, double Gk)"""
        return _moose.SynChan___set_Gk(self, *args)

    def __get_Ik(self):
        """__get_Ik(SynChan self) -> double"""
        return _moose.SynChan___get_Ik(self)

    def __get_numSynapses(self):
        """__get_numSynapses(SynChan self) -> unsigned int"""
        return _moose.SynChan___get_numSynapses(self)

    def getWeight(self, *args):
        """getWeight(SynChan self, unsigned int const & index) -> double"""
        return _moose.SynChan_getWeight(self, *args)

    def setWeight(self, *args):
        """setWeight(SynChan self, unsigned int const & index, double weight)"""
        return _moose.SynChan_setWeight(self, *args)

    def getDelay(self, *args):
        """getDelay(SynChan self, unsigned int const & index) -> double"""
        return _moose.SynChan_getDelay(self, *args)

    def setDelay(self, *args):
        """setDelay(SynChan self, unsigned int const & index, double delay)"""
        return _moose.SynChan_setDelay(self, *args)

    Gbar = _swig_property(_moose.SynChan_Gbar_get, _moose.SynChan_Gbar_set)
    Ek = _swig_property(_moose.SynChan_Ek_get, _moose.SynChan_Ek_set)
    tau1 = _swig_property(_moose.SynChan_tau1_get, _moose.SynChan_tau1_set)
    tau2 = _swig_property(_moose.SynChan_tau2_get, _moose.SynChan_tau2_set)
    normalizeWeights = _swig_property(_moose.SynChan_normalizeWeights_get, _moose.SynChan_normalizeWeights_set)
    Gk = _swig_property(_moose.SynChan_Gk_get, _moose.SynChan_Gk_set)
    Ik = _swig_property(_moose.SynChan_Ik_get)
    numSynapses = _swig_property(_moose.SynChan_numSynapses_get)
SynChan_swigregister = _moose.SynChan_swigregister
SynChan_swigregister(SynChan)

SynChan.weight = listproperty(SynChan.getWeight, SynChan.setWeight)
SynChan.delay = listproperty(SynChan.getDelay, SynChan.setDelay)                    

class BinSynchan(Neutral):
    """Proxy of C++ pymoose::BinSynchan class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::BinSynchan self, Id id) -> BinSynchan
        __init__(pymoose::BinSynchan self, std::string path) -> BinSynchan
        __init__(pymoose::BinSynchan self, std::string name, Id parentId) -> BinSynchan
        __init__(pymoose::BinSynchan self, std::string name, PyMooseBase parent) -> BinSynchan
        __init__(pymoose::BinSynchan self, BinSynchan src, std::string name, PyMooseBase parent) -> BinSynchan
        __init__(pymoose::BinSynchan self, BinSynchan src, std::string name, Id parent) -> BinSynchan
        __init__(pymoose::BinSynchan self, Id src, std::string name, Id parent) -> BinSynchan
        __init__(pymoose::BinSynchan self, BinSynchan src, std::string path) -> BinSynchan
        __init__(pymoose::BinSynchan self, Id src, std::string path) -> BinSynchan
        """
        this = _moose.new_BinSynchan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_BinSynchan
    __del__ = lambda self : None;
    def getType(self):
        """getType(BinSynchan self) -> std::string const &"""
        return _moose.BinSynchan_getType(self)

    def __get_Gbar(self):
        """__get_Gbar(BinSynchan self) -> double"""
        return _moose.BinSynchan___get_Gbar(self)

    def __set_Gbar(self, *args):
        """__set_Gbar(BinSynchan self, double Gbar)"""
        return _moose.BinSynchan___set_Gbar(self, *args)

    def __get_Ek(self):
        """__get_Ek(BinSynchan self) -> double"""
        return _moose.BinSynchan___get_Ek(self)

    def __set_Ek(self, *args):
        """__set_Ek(BinSynchan self, double Ek)"""
        return _moose.BinSynchan___set_Ek(self, *args)

    def __get_tau1(self):
        """__get_tau1(BinSynchan self) -> double"""
        return _moose.BinSynchan___get_tau1(self)

    def __set_tau1(self, *args):
        """__set_tau1(BinSynchan self, double tau1)"""
        return _moose.BinSynchan___set_tau1(self, *args)

    def __get_tau2(self):
        """__get_tau2(BinSynchan self) -> double"""
        return _moose.BinSynchan___get_tau2(self)

    def __set_tau2(self, *args):
        """__set_tau2(BinSynchan self, double tau2)"""
        return _moose.BinSynchan___set_tau2(self, *args)

    def __get_normalizeWeights(self):
        """__get_normalizeWeights(BinSynchan self) -> bool"""
        return _moose.BinSynchan___get_normalizeWeights(self)

    def __set_normalizeWeights(self, *args):
        """__set_normalizeWeights(BinSynchan self, bool normalizeWeights)"""
        return _moose.BinSynchan___set_normalizeWeights(self, *args)

    def __get_Gk(self):
        """__get_Gk(BinSynchan self) -> double"""
        return _moose.BinSynchan___get_Gk(self)

    def __set_Gk(self, *args):
        """__set_Gk(BinSynchan self, double Gk)"""
        return _moose.BinSynchan___set_Gk(self, *args)

    def __get_Ik(self):
        """__get_Ik(BinSynchan self) -> double"""
        return _moose.BinSynchan___get_Ik(self)

    def __set_Ik(self, *args):
        """__set_Ik(BinSynchan self, double Ik)"""
        return _moose.BinSynchan___set_Ik(self, *args)

    def __get_numSynapses(self):
        """__get_numSynapses(BinSynchan self) -> unsigned int"""
        return _moose.BinSynchan___get_numSynapses(self)

    def __set_numSynapses(self, *args):
        """__set_numSynapses(BinSynchan self, unsigned int index, unsigned int num)"""
        return _moose.BinSynchan___set_numSynapses(self, *args)

    def __get_weight(self, *args):
        """__get_weight(BinSynchan self, unsigned int index) -> double"""
        return _moose.BinSynchan___get_weight(self, *args)

    def __set_weight(self, *args):
        """__set_weight(BinSynchan self, unsigned int index, double weight)"""
        return _moose.BinSynchan___set_weight(self, *args)

    def __get_delay(self, *args):
        """__get_delay(BinSynchan self, unsigned int index) -> double"""
        return _moose.BinSynchan___get_delay(self, *args)

    def __set_delay(self, *args):
        """__set_delay(BinSynchan self, unsigned int index, double delay)"""
        return _moose.BinSynchan___set_delay(self, *args)

    def __get_poolSize(self, *args):
        """__get_poolSize(BinSynchan self, unsigned int index) -> int"""
        return _moose.BinSynchan___get_poolSize(self, *args)

    def __set_poolSize(self, *args):
        """__set_poolSize(BinSynchan self, unsigned int index, int size)"""
        return _moose.BinSynchan___set_poolSize(self, *args)

    def __get_releaseP(self, *args):
        """__get_releaseP(BinSynchan self, unsigned int index) -> double"""
        return _moose.BinSynchan___get_releaseP(self, *args)

    def __set_releaseP(self, *args):
        """__set_releaseP(BinSynchan self, unsigned int index, double releaseP)"""
        return _moose.BinSynchan___set_releaseP(self, *args)

    def __get_releaseCount(self, *args):
        """__get_releaseCount(BinSynchan self, unsigned int index) -> double"""
        return _moose.BinSynchan___get_releaseCount(self, *args)

    def __set_releaseCount(self, *args):
        """__set_releaseCount(BinSynchan self, unsigned int index, double releaseCount)"""
        return _moose.BinSynchan___set_releaseCount(self, *args)

    def __get_synapse(self):
        """__get_synapse(BinSynchan self) -> double"""
        return _moose.BinSynchan___get_synapse(self)

    def __set_synapse(self, *args):
        """__set_synapse(BinSynchan self, double synapse)"""
        return _moose.BinSynchan___set_synapse(self, *args)

    def __get_activation(self):
        """__get_activation(BinSynchan self) -> double"""
        return _moose.BinSynchan___get_activation(self)

    def __set_activation(self, *args):
        """__set_activation(BinSynchan self, double activation)"""
        return _moose.BinSynchan___set_activation(self, *args)

    def __get_modulator(self):
        """__get_modulator(BinSynchan self) -> double"""
        return _moose.BinSynchan___get_modulator(self)

    def __set_modulator(self, *args):
        """__set_modulator(BinSynchan self, double modulator)"""
        return _moose.BinSynchan___set_modulator(self, *args)

    weight = _swig_property(_moose.BinSynchan_weight_get, _moose.BinSynchan_weight_set)
    delay = _swig_property(_moose.BinSynchan_delay_get, _moose.BinSynchan_delay_set)
    releaseP = _swig_property(_moose.BinSynchan_releaseP_get, _moose.BinSynchan_releaseP_set)
    poolSize = _swig_property(_moose.BinSynchan_poolSize_get, _moose.BinSynchan_poolSize_set)
    releaseCount = _swig_property(_moose.BinSynchan_releaseCount_get, _moose.BinSynchan_releaseCount_set)
    Gbar = _swig_property(_moose.BinSynchan_Gbar_get, _moose.BinSynchan_Gbar_set)
    Ek = _swig_property(_moose.BinSynchan_Ek_get, _moose.BinSynchan_Ek_set)
    tau1 = _swig_property(_moose.BinSynchan_tau1_get, _moose.BinSynchan_tau1_set)
    tau2 = _swig_property(_moose.BinSynchan_tau2_get, _moose.BinSynchan_tau2_set)
    normalizeWeights = _swig_property(_moose.BinSynchan_normalizeWeights_get, _moose.BinSynchan_normalizeWeights_set)
    Gk = _swig_property(_moose.BinSynchan_Gk_get, _moose.BinSynchan_Gk_set)
    Ik = _swig_property(_moose.BinSynchan_Ik_get)
    numSynapses = _swig_property(_moose.BinSynchan_numSynapses_get)
BinSynchan_swigregister = _moose.BinSynchan_swigregister
BinSynchan_swigregister(BinSynchan)

class StochSynchan(Neutral):
    """Proxy of C++ pymoose::StochSynchan class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::StochSynchan self, Id id) -> StochSynchan
        __init__(pymoose::StochSynchan self, std::string path) -> StochSynchan
        __init__(pymoose::StochSynchan self, std::string name, Id parentId) -> StochSynchan
        __init__(pymoose::StochSynchan self, std::string name, PyMooseBase parent) -> StochSynchan
        __init__(pymoose::StochSynchan self, StochSynchan src, std::string name, PyMooseBase parent) -> StochSynchan
        __init__(pymoose::StochSynchan self, StochSynchan src, std::string name, Id parent) -> StochSynchan
        __init__(pymoose::StochSynchan self, StochSynchan src, std::string path) -> StochSynchan
        __init__(pymoose::StochSynchan self, Id src, std::string name, Id parent) -> StochSynchan
        __init__(pymoose::StochSynchan self, Id src, std::string path) -> StochSynchan
        """
        this = _moose.new_StochSynchan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_StochSynchan
    __del__ = lambda self : None;
    def getType(self):
        """getType(StochSynchan self) -> std::string const &"""
        return _moose.StochSynchan_getType(self)

    def __get_Gbar(self):
        """__get_Gbar(StochSynchan self) -> double"""
        return _moose.StochSynchan___get_Gbar(self)

    def __set_Gbar(self, *args):
        """__set_Gbar(StochSynchan self, double Gbar)"""
        return _moose.StochSynchan___set_Gbar(self, *args)

    def __get_Ek(self):
        """__get_Ek(StochSynchan self) -> double"""
        return _moose.StochSynchan___get_Ek(self)

    def __set_Ek(self, *args):
        """__set_Ek(StochSynchan self, double Ek)"""
        return _moose.StochSynchan___set_Ek(self, *args)

    def __get_tau1(self):
        """__get_tau1(StochSynchan self) -> double"""
        return _moose.StochSynchan___get_tau1(self)

    def __set_tau1(self, *args):
        """__set_tau1(StochSynchan self, double tau1)"""
        return _moose.StochSynchan___set_tau1(self, *args)

    def __get_tau2(self):
        """__get_tau2(StochSynchan self) -> double"""
        return _moose.StochSynchan___get_tau2(self)

    def __set_tau2(self, *args):
        """__set_tau2(StochSynchan self, double tau2)"""
        return _moose.StochSynchan___set_tau2(self, *args)

    def __get_normalizeWeights(self):
        """__get_normalizeWeights(StochSynchan self) -> bool"""
        return _moose.StochSynchan___get_normalizeWeights(self)

    def __set_normalizeWeights(self, *args):
        """__set_normalizeWeights(StochSynchan self, bool normalizeWeights)"""
        return _moose.StochSynchan___set_normalizeWeights(self, *args)

    def __get_Gk(self):
        """__get_Gk(StochSynchan self) -> double"""
        return _moose.StochSynchan___get_Gk(self)

    def __set_Gk(self, *args):
        """__set_Gk(StochSynchan self, double Gk)"""
        return _moose.StochSynchan___set_Gk(self, *args)

    def __get_Ik(self):
        """__get_Ik(StochSynchan self) -> double"""
        return _moose.StochSynchan___get_Ik(self)

    def __set_Ik(self, *args):
        """__set_Ik(StochSynchan self, double Ik)"""
        return _moose.StochSynchan___set_Ik(self, *args)

    def __get_numSynapses(self):
        """__get_numSynapses(StochSynchan self) -> unsigned int"""
        return _moose.StochSynchan___get_numSynapses(self)

    def __set_numSynapses(self, *args):
        """__set_numSynapses(StochSynchan self, unsigned int index, unsigned int num)"""
        return _moose.StochSynchan___set_numSynapses(self, *args)

    def __get_weight(self, *args):
        """__get_weight(StochSynchan self, unsigned int index) -> double"""
        return _moose.StochSynchan___get_weight(self, *args)

    def __set_weight(self, *args):
        """__set_weight(StochSynchan self, unsigned int index, double weight)"""
        return _moose.StochSynchan___set_weight(self, *args)

    def __get_delay(self, *args):
        """__get_delay(StochSynchan self, unsigned int index) -> double"""
        return _moose.StochSynchan___get_delay(self, *args)

    def __set_delay(self, *args):
        """__set_delay(StochSynchan self, unsigned int index, double delay)"""
        return _moose.StochSynchan___set_delay(self, *args)

    def __get_releaseP(self, *args):
        """__get_releaseP(StochSynchan self, unsigned int index) -> double"""
        return _moose.StochSynchan___get_releaseP(self, *args)

    def __set_releaseP(self, *args):
        """__set_releaseP(StochSynchan self, unsigned int index, double releaseP)"""
        return _moose.StochSynchan___set_releaseP(self, *args)

    def __get_releaseCount(self, *args):
        """__get_releaseCount(StochSynchan self, unsigned int index) -> double"""
        return _moose.StochSynchan___get_releaseCount(self, *args)

    def __set_releaseCount(self, *args):
        """__set_releaseCount(StochSynchan self, unsigned int index, double releaseCount)"""
        return _moose.StochSynchan___set_releaseCount(self, *args)

    def __get_synapse(self):
        """__get_synapse(StochSynchan self) -> double"""
        return _moose.StochSynchan___get_synapse(self)

    def __set_synapse(self, *args):
        """__set_synapse(StochSynchan self, double synapse)"""
        return _moose.StochSynchan___set_synapse(self, *args)

    def __get_activation(self):
        """__get_activation(StochSynchan self) -> double"""
        return _moose.StochSynchan___get_activation(self)

    def __set_activation(self, *args):
        """__set_activation(StochSynchan self, double activation)"""
        return _moose.StochSynchan___set_activation(self, *args)

    def __get_modulator(self):
        """__get_modulator(StochSynchan self) -> double"""
        return _moose.StochSynchan___get_modulator(self)

    def __set_modulator(self, *args):
        """__set_modulator(StochSynchan self, double modulator)"""
        return _moose.StochSynchan___set_modulator(self, *args)

    weight = _swig_property(_moose.StochSynchan_weight_get, _moose.StochSynchan_weight_set)
    delay = _swig_property(_moose.StochSynchan_delay_get, _moose.StochSynchan_delay_set)
    releaseP = _swig_property(_moose.StochSynchan_releaseP_get, _moose.StochSynchan_releaseP_set)
    releaseCount = _swig_property(_moose.StochSynchan_releaseCount_get, _moose.StochSynchan_releaseCount_set)
    Gbar = _swig_property(_moose.StochSynchan_Gbar_get, _moose.StochSynchan_Gbar_set)
    Ek = _swig_property(_moose.StochSynchan_Ek_get, _moose.StochSynchan_Ek_set)
    tau1 = _swig_property(_moose.StochSynchan_tau1_get, _moose.StochSynchan_tau1_set)
    tau2 = _swig_property(_moose.StochSynchan_tau2_get, _moose.StochSynchan_tau2_set)
    normalizeWeights = _swig_property(_moose.StochSynchan_normalizeWeights_get, _moose.StochSynchan_normalizeWeights_set)
    Gk = _swig_property(_moose.StochSynchan_Gk_get, _moose.StochSynchan_Gk_set)
    Ik = _swig_property(_moose.StochSynchan_Ik_get, _moose.StochSynchan_Ik_set)
    numSynapses = _swig_property(_moose.StochSynchan_numSynapses_get)
    activation = _swig_property(_moose.StochSynchan_activation_get, _moose.StochSynchan_activation_set)
    modulator = _swig_property(_moose.StochSynchan_modulator_get, _moose.StochSynchan_modulator_set)
StochSynchan_swigregister = _moose.StochSynchan_swigregister
StochSynchan_swigregister(StochSynchan)

class STPSynChan(SynChan):
    """Proxy of C++ pymoose::STPSynChan class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::STPSynChan self, std::string className, std::string objectName, Id parentId) -> STPSynChan
        __init__(pymoose::STPSynChan self, std::string className, std::string path) -> STPSynChan
        __init__(pymoose::STPSynChan self, std::string className, std::string objectName, PyMooseBase parent) -> STPSynChan
        __init__(pymoose::STPSynChan self, Id id) -> STPSynChan
        __init__(pymoose::STPSynChan self, std::string path) -> STPSynChan
        __init__(pymoose::STPSynChan self, std::string name, Id parentId) -> STPSynChan
        __init__(pymoose::STPSynChan self, std::string name, PyMooseBase parent) -> STPSynChan
        __init__(pymoose::STPSynChan self, STPSynChan src, std::string name, PyMooseBase parent) -> STPSynChan
        __init__(pymoose::STPSynChan self, STPSynChan src, std::string name, Id parent) -> STPSynChan
        __init__(pymoose::STPSynChan self, STPSynChan src, std::string path) -> STPSynChan
        __init__(pymoose::STPSynChan self, Id src, std::string name, Id parent) -> STPSynChan
        __init__(pymoose::STPSynChan self, Id src, std::string path) -> STPSynChan
        """
        this = _moose.new_STPSynChan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_STPSynChan
    __del__ = lambda self : None;
    def getType(self):
        """getType(STPSynChan self) -> std::string const &"""
        return _moose.STPSynChan_getType(self)

    def __get_tauD1(self):
        """__get_tauD1(STPSynChan self) -> double"""
        return _moose.STPSynChan___get_tauD1(self)

    def __set_tauD1(self, *args):
        """__set_tauD1(STPSynChan self, double tauD1)"""
        return _moose.STPSynChan___set_tauD1(self, *args)

    def __get_tauD2(self):
        """__get_tauD2(STPSynChan self) -> double"""
        return _moose.STPSynChan___get_tauD2(self)

    def __set_tauD2(self, *args):
        """__set_tauD2(STPSynChan self, double tauD2)"""
        return _moose.STPSynChan___set_tauD2(self, *args)

    def __get_tauF(self):
        """__get_tauF(STPSynChan self) -> double"""
        return _moose.STPSynChan___get_tauF(self)

    def __set_tauF(self, *args):
        """__set_tauF(STPSynChan self, double tauF)"""
        return _moose.STPSynChan___set_tauF(self, *args)

    def __get_deltaF(self):
        """__get_deltaF(STPSynChan self) -> double"""
        return _moose.STPSynChan___get_deltaF(self)

    def __set_deltaF(self, *args):
        """__set_deltaF(STPSynChan self, double deltaF)"""
        return _moose.STPSynChan___set_deltaF(self, *args)

    def __get_d1(self):
        """__get_d1(STPSynChan self) -> double"""
        return _moose.STPSynChan___get_d1(self)

    def __set_d1(self, *args):
        """__set_d1(STPSynChan self, double d1)"""
        return _moose.STPSynChan___set_d1(self, *args)

    def __get_d2(self):
        """__get_d2(STPSynChan self) -> double"""
        return _moose.STPSynChan___get_d2(self)

    def __set_d2(self, *args):
        """__set_d2(STPSynChan self, double d2)"""
        return _moose.STPSynChan___set_d2(self, *args)

    def getF(self, *args):
        """getF(STPSynChan self, unsigned int const & index) -> double"""
        return _moose.STPSynChan_getF(self, *args)

    def getD1(self, *args):
        """getD1(STPSynChan self, unsigned int const & index) -> double"""
        return _moose.STPSynChan_getD1(self, *args)

    def getD2(self, *args):
        """getD2(STPSynChan self, unsigned int const & index) -> double"""
        return _moose.STPSynChan_getD2(self, *args)

    def getInitD1(self, *args):
        """getInitD1(STPSynChan self, unsigned int const & index) -> double"""
        return _moose.STPSynChan_getInitD1(self, *args)

    def getInitD2(self, *args):
        """getInitD2(STPSynChan self, unsigned int const & index) -> double"""
        return _moose.STPSynChan_getInitD2(self, *args)

    def getInitF(self, *args):
        """getInitF(STPSynChan self, unsigned int const & index) -> double"""
        return _moose.STPSynChan_getInitF(self, *args)

    def getInitPr(self, *args):
        """getInitPr(STPSynChan self, unsigned int const & index) -> double"""
        return _moose.STPSynChan_getInitPr(self, *args)

    def getPr(self, *args):
        """getPr(STPSynChan self, unsigned int const & index) -> double"""
        return _moose.STPSynChan_getPr(self, *args)

    def setInitPr(self, *args):
        """setInitPr(STPSynChan self, unsigned int const & index, double value)"""
        return _moose.STPSynChan_setInitPr(self, *args)

    def setInitF(self, *args):
        """setInitF(STPSynChan self, unsigned int const & index, double value)"""
        return _moose.STPSynChan_setInitF(self, *args)

    def setInitD1(self, *args):
        """setInitD1(STPSynChan self, unsigned int const & index, double value)"""
        return _moose.STPSynChan_setInitD1(self, *args)

    def setInitD2(self, *args):
        """setInitD2(STPSynChan self, unsigned int const & index, double value)"""
        return _moose.STPSynChan_setInitD2(self, *args)

    tauD1 = _swig_property(_moose.STPSynChan_tauD1_get, _moose.STPSynChan_tauD1_set)
    tauD2 = _swig_property(_moose.STPSynChan_tauD2_get, _moose.STPSynChan_tauD2_set)
    tauF = _swig_property(_moose.STPSynChan_tauF_get, _moose.STPSynChan_tauF_set)
    deltaF = _swig_property(_moose.STPSynChan_deltaF_get, _moose.STPSynChan_deltaF_set)
    d1 = _swig_property(_moose.STPSynChan_d1_get, _moose.STPSynChan_d1_set)
    d2 = _swig_property(_moose.STPSynChan_d2_get, _moose.STPSynChan_d2_set)
STPSynChan_swigregister = _moose.STPSynChan_swigregister
STPSynChan_swigregister(STPSynChan)

STPSynChan.initPr = listproperty(STPSynChan.getInitPr, STPSynChan.setInitPr)
STPSynChan.initF = listproperty(STPSynChan.getInitF, STPSynChan.setInitF)
STPSynChan.initD1 = listproperty(STPSynChan.getInitD1, STPSynChan.setInitD1)
STPSynChan.initD2 = listproperty(STPSynChan.getInitD2, STPSynChan.setInitD2)
STPSynChan.Pr = listproperty(STPSynChan.getPr)
STPSynChan.F = listproperty(STPSynChan.getF)
STPSynChan.D1 = listproperty(STPSynChan.getD1)
STPSynChan.D2 = listproperty(STPSynChan.getD2)

class STPNMDAChan(STPSynChan):
    """Proxy of C++ pymoose::STPNMDAChan class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::STPNMDAChan self, std::string className, std::string objectName, Id parentId) -> STPNMDAChan
        __init__(pymoose::STPNMDAChan self, std::string className, std::string path) -> STPNMDAChan
        __init__(pymoose::STPNMDAChan self, std::string className, std::string objectName, PyMooseBase parent) -> STPNMDAChan
        __init__(pymoose::STPNMDAChan self, Id id) -> STPNMDAChan
        __init__(pymoose::STPNMDAChan self, std::string path) -> STPNMDAChan
        __init__(pymoose::STPNMDAChan self, std::string name, Id parentId) -> STPNMDAChan
        __init__(pymoose::STPNMDAChan self, std::string name, PyMooseBase parent) -> STPNMDAChan
        __init__(pymoose::STPNMDAChan self, STPNMDAChan src, std::string name, PyMooseBase parent) -> STPNMDAChan
        __init__(pymoose::STPNMDAChan self, STPNMDAChan src, std::string name, Id parent) -> STPNMDAChan
        __init__(pymoose::STPNMDAChan self, STPNMDAChan src, std::string path) -> STPNMDAChan
        __init__(pymoose::STPNMDAChan self, Id src, std::string name, Id parent) -> STPNMDAChan
        __init__(pymoose::STPNMDAChan self, Id src, std::string path) -> STPNMDAChan
        """
        this = _moose.new_STPNMDAChan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_STPNMDAChan
    __del__ = lambda self : None;
    def getType(self):
        """getType(STPNMDAChan self) -> std::string const &"""
        return _moose.STPNMDAChan_getType(self)

    def __get_MgConc(self):
        """__get_MgConc(STPNMDAChan self) -> double"""
        return _moose.STPNMDAChan___get_MgConc(self)

    def __set_MgConc(self, *args):
        """__set_MgConc(STPNMDAChan self, double MgConc)"""
        return _moose.STPNMDAChan___set_MgConc(self, *args)

    def __get_unblocked(self):
        """__get_unblocked(STPNMDAChan self) -> double"""
        return _moose.STPNMDAChan___get_unblocked(self)

    def __get_saturation(self):
        """__get_saturation(STPNMDAChan self) -> double"""
        return _moose.STPNMDAChan___get_saturation(self)

    def __set_saturation(self, *args):
        """__set_saturation(STPNMDAChan self, double saturation)"""
        return _moose.STPNMDAChan___set_saturation(self, *args)

    def getTransitionParam(self, *args):
        """getTransitionParam(STPNMDAChan self, unsigned int const index) -> double"""
        return _moose.STPNMDAChan_getTransitionParam(self, *args)

    def setTransitionParam(self, *args):
        """setTransitionParam(STPNMDAChan self, unsigned int const index, double transitionParam)"""
        return _moose.STPNMDAChan_setTransitionParam(self, *args)

    MgConc = _swig_property(_moose.STPNMDAChan_MgConc_get, _moose.STPNMDAChan_MgConc_set)
    unblocked = _swig_property(_moose.STPNMDAChan_unblocked_get)
    saturation = _swig_property(_moose.STPNMDAChan_saturation_get, _moose.STPNMDAChan_saturation_set)
STPNMDAChan_swigregister = _moose.STPNMDAChan_swigregister
STPNMDAChan_swigregister(STPNMDAChan)

class NMDAChan(SynChan):
    """Proxy of C++ pymoose::NMDAChan class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::NMDAChan self, Id id) -> NMDAChan
        __init__(pymoose::NMDAChan self, std::string path) -> NMDAChan
        __init__(pymoose::NMDAChan self, std::string name, Id parentId) -> NMDAChan
        __init__(pymoose::NMDAChan self, std::string name, PyMooseBase parent) -> NMDAChan
        __init__(pymoose::NMDAChan self, NMDAChan src, std::string name, PyMooseBase parent) -> NMDAChan
        __init__(pymoose::NMDAChan self, NMDAChan src, std::string name, Id parent) -> NMDAChan
        __init__(pymoose::NMDAChan self, NMDAChan src, std::string path) -> NMDAChan
        __init__(pymoose::NMDAChan self, Id src, std::string name, Id parent) -> NMDAChan
        __init__(pymoose::NMDAChan self, Id src, std::string path) -> NMDAChan
        """
        this = _moose.new_NMDAChan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_NMDAChan
    __del__ = lambda self : None;
    def getType(self):
        """getType(NMDAChan self) -> std::string const &"""
        return _moose.NMDAChan_getType(self)

    def getTransitionParam(self, *args):
        """getTransitionParam(NMDAChan self, unsigned int const index) -> double"""
        return _moose.NMDAChan_getTransitionParam(self, *args)

    def setTransitionParam(self, *args):
        """setTransitionParam(NMDAChan self, unsigned int const index, double transitionParam)"""
        return _moose.NMDAChan_setTransitionParam(self, *args)

    def __get_MgConc(self):
        """__get_MgConc(NMDAChan self) -> double"""
        return _moose.NMDAChan___get_MgConc(self)

    def __set_MgConc(self, *args):
        """__set_MgConc(NMDAChan self, double MgConc)"""
        return _moose.NMDAChan___set_MgConc(self, *args)

    def __get_unblocked(self):
        """__get_unblocked(NMDAChan self) -> double"""
        return _moose.NMDAChan___get_unblocked(self)

    def __get_saturation(self):
        """__get_saturation(NMDAChan self) -> double"""
        return _moose.NMDAChan___get_saturation(self)

    def __set_saturation(self, *args):
        """__set_saturation(NMDAChan self, double saturation)"""
        return _moose.NMDAChan___set_saturation(self, *args)

    MgConc = _swig_property(_moose.NMDAChan_MgConc_get, _moose.NMDAChan_MgConc_set)
    unblocked = _swig_property(_moose.NMDAChan_unblocked_get)
NMDAChan_swigregister = _moose.NMDAChan_swigregister
NMDAChan_swigregister(NMDAChan)

NMDAChan.transitionParam = listproperty(NMDAChan.getTransitionParam, NMDAChan.setTransitionParam)

class KinSynChan(SynChan):
    """Proxy of C++ pymoose::KinSynChan class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::KinSynChan self, Id id) -> KinSynChan
        __init__(pymoose::KinSynChan self, std::string path) -> KinSynChan
        __init__(pymoose::KinSynChan self, std::string name, Id parentId) -> KinSynChan
        __init__(pymoose::KinSynChan self, std::string name, PyMooseBase parent) -> KinSynChan
        __init__(pymoose::KinSynChan self, KinSynChan src, std::string name, PyMooseBase parent) -> KinSynChan
        __init__(pymoose::KinSynChan self, KinSynChan src, std::string name, Id parent) -> KinSynChan
        __init__(pymoose::KinSynChan self, KinSynChan src, std::string path) -> KinSynChan
        __init__(pymoose::KinSynChan self, Id src, std::string name, Id parent) -> KinSynChan
        __init__(pymoose::KinSynChan self, Id src, std::string path) -> KinSynChan
        """
        this = _moose.new_KinSynChan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_KinSynChan
    __del__ = lambda self : None;
    def getType(self):
        """getType(KinSynChan self) -> std::string const &"""
        return _moose.KinSynChan_getType(self)

    def __get_rInf(self):
        """__get_rInf(KinSynChan self) -> double"""
        return _moose.KinSynChan___get_rInf(self)

    def __set_rInf(self, *args):
        """__set_rInf(KinSynChan self, double rInf)"""
        return _moose.KinSynChan___set_rInf(self, *args)

    def __get_pulseWidth(self):
        """__get_pulseWidth(KinSynChan self) -> double"""
        return _moose.KinSynChan___get_pulseWidth(self)

    def __set_pulseWidth(self, *args):
        """__set_pulseWidth(KinSynChan self, double pulseWidth)"""
        return _moose.KinSynChan___set_pulseWidth(self, *args)

    rInf = _swig_property(_moose.KinSynChan_rInf_get, _moose.KinSynChan_rInf_set)
    tau1 = _swig_property(_moose.KinSynChan_tau1_get, _moose.KinSynChan_tau1_set)
    pulseWidth = _swig_property(_moose.KinSynChan_pulseWidth_get, _moose.KinSynChan_pulseWidth_set)
KinSynChan_swigregister = _moose.KinSynChan_swigregister
KinSynChan_swigregister(KinSynChan)

class SpikeGen(Neutral):
    """Proxy of C++ pymoose::SpikeGen class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::SpikeGen self, std::string className, std::string objectName, Id parentId) -> SpikeGen
        __init__(pymoose::SpikeGen self, std::string className, std::string path) -> SpikeGen
        __init__(pymoose::SpikeGen self, std::string className, std::string objectName, PyMooseBase parent) -> SpikeGen
        __init__(pymoose::SpikeGen self, Id id) -> SpikeGen
        __init__(pymoose::SpikeGen self, std::string path) -> SpikeGen
        __init__(pymoose::SpikeGen self, std::string name, Id parentId) -> SpikeGen
        __init__(pymoose::SpikeGen self, std::string name, PyMooseBase parent) -> SpikeGen
        __init__(pymoose::SpikeGen self, SpikeGen src, std::string name, PyMooseBase parent) -> SpikeGen
        __init__(pymoose::SpikeGen self, SpikeGen src, std::string name, Id parent) -> SpikeGen
        __init__(pymoose::SpikeGen self, SpikeGen src, std::string path) -> SpikeGen
        __init__(pymoose::SpikeGen self, Id src, std::string name, Id parent) -> SpikeGen
        __init__(pymoose::SpikeGen self, Id src, std::string path) -> SpikeGen
        """
        this = _moose.new_SpikeGen(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_SpikeGen
    __del__ = lambda self : None;
    def getType(self):
        """getType(SpikeGen self) -> std::string const &"""
        return _moose.SpikeGen_getType(self)

    def __get_threshold(self):
        """__get_threshold(SpikeGen self) -> double"""
        return _moose.SpikeGen___get_threshold(self)

    def __set_threshold(self, *args):
        """__set_threshold(SpikeGen self, double threshold)"""
        return _moose.SpikeGen___set_threshold(self, *args)

    def __get_refractT(self):
        """__get_refractT(SpikeGen self) -> double"""
        return _moose.SpikeGen___get_refractT(self)

    def __set_refractT(self, *args):
        """__set_refractT(SpikeGen self, double refractT)"""
        return _moose.SpikeGen___set_refractT(self, *args)

    def __get_absRefractT(self):
        """__get_absRefractT(SpikeGen self) -> double"""
        return _moose.SpikeGen___get_absRefractT(self)

    def __set_absRefractT(self, *args):
        """__set_absRefractT(SpikeGen self, double abs_refract)"""
        return _moose.SpikeGen___set_absRefractT(self, *args)

    def __get_amplitude(self):
        """__get_amplitude(SpikeGen self) -> double"""
        return _moose.SpikeGen___get_amplitude(self)

    def __set_amplitude(self, *args):
        """__set_amplitude(SpikeGen self, double amplitude)"""
        return _moose.SpikeGen___set_amplitude(self, *args)

    def __get_state(self):
        """__get_state(SpikeGen self) -> double"""
        return _moose.SpikeGen___get_state(self)

    def __set_state(self, *args):
        """__set_state(SpikeGen self, double state)"""
        return _moose.SpikeGen___set_state(self, *args)

    def __get_edgeTriggered(self):
        """__get_edgeTriggered(SpikeGen self) -> int"""
        return _moose.SpikeGen___get_edgeTriggered(self)

    def __set_edgeTriggered(self, *args):
        """__set_edgeTriggered(SpikeGen self, int edgeTriggered)"""
        return _moose.SpikeGen___set_edgeTriggered(self, *args)

    threshold = _swig_property(_moose.SpikeGen_threshold_get, _moose.SpikeGen_threshold_set)
    refractT = _swig_property(_moose.SpikeGen_refractT_get, _moose.SpikeGen_refractT_set)
    absRefractT = _swig_property(_moose.SpikeGen_absRefractT_get, _moose.SpikeGen_absRefractT_set)
    amplitude = _swig_property(_moose.SpikeGen_amplitude_get, _moose.SpikeGen_amplitude_set)
    state = _swig_property(_moose.SpikeGen_state_get, _moose.SpikeGen_state_set)
    edgeTriggered = _swig_property(_moose.SpikeGen_edgeTriggered_get, _moose.SpikeGen_edgeTriggered_set)
SpikeGen_swigregister = _moose.SpikeGen_swigregister
SpikeGen_swigregister(SpikeGen)

class StochSpikeGen(SpikeGen):
    """Proxy of C++ pymoose::StochSpikeGen class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::StochSpikeGen self, std::string className, std::string objectName, Id parentId) -> StochSpikeGen
        __init__(pymoose::StochSpikeGen self, std::string className, std::string path) -> StochSpikeGen
        __init__(pymoose::StochSpikeGen self, std::string className, std::string objectName, PyMooseBase parent) -> StochSpikeGen
        __init__(pymoose::StochSpikeGen self, Id id) -> StochSpikeGen
        __init__(pymoose::StochSpikeGen self, std::string path) -> StochSpikeGen
        __init__(pymoose::StochSpikeGen self, std::string name, Id parentId) -> StochSpikeGen
        __init__(pymoose::StochSpikeGen self, std::string name, PyMooseBase parent) -> StochSpikeGen
        __init__(pymoose::StochSpikeGen self, StochSpikeGen src, std::string name, PyMooseBase parent) -> StochSpikeGen
        __init__(pymoose::StochSpikeGen self, StochSpikeGen src, std::string name, Id parent) -> StochSpikeGen
        __init__(pymoose::StochSpikeGen self, StochSpikeGen src, std::string path) -> StochSpikeGen
        __init__(pymoose::StochSpikeGen self, Id src, std::string name, Id parent) -> StochSpikeGen
        __init__(pymoose::StochSpikeGen self, Id src, std::string path) -> StochSpikeGen
        """
        this = _moose.new_StochSpikeGen(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_StochSpikeGen
    __del__ = lambda self : None;
    def getType(self):
        """getType(StochSpikeGen self) -> std::string const &"""
        return _moose.StochSpikeGen_getType(self)

    def __get_pr(self):
        """__get_pr(StochSpikeGen self) -> double"""
        return _moose.StochSpikeGen___get_pr(self)

    def __set_pr(self, *args):
        """__set_pr(StochSpikeGen self, double pr)"""
        return _moose.StochSpikeGen___set_pr(self, *args)

    pr = _swig_property(_moose.StochSpikeGen_pr_get, _moose.StochSpikeGen_pr_set)
StochSpikeGen_swigregister = _moose.StochSpikeGen_swigregister
StochSpikeGen_swigregister(StochSpikeGen)

class RandomSpike(Neutral):
    """Proxy of C++ pymoose::RandomSpike class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::RandomSpike self, Id id) -> RandomSpike
        __init__(pymoose::RandomSpike self, std::string path) -> RandomSpike
        __init__(pymoose::RandomSpike self, std::string name, Id parentId) -> RandomSpike
        __init__(pymoose::RandomSpike self, std::string name, PyMooseBase parent) -> RandomSpike
        __init__(pymoose::RandomSpike self, RandomSpike src, std::string name, PyMooseBase parent) -> RandomSpike
        __init__(pymoose::RandomSpike self, RandomSpike src, std::string name, Id parent) -> RandomSpike
        __init__(pymoose::RandomSpike self, RandomSpike src, std::string path) -> RandomSpike
        __init__(pymoose::RandomSpike self, Id src, std::string name, Id parent) -> RandomSpike
        __init__(pymoose::RandomSpike self, Id src, std::string path) -> RandomSpike
        """
        this = _moose.new_RandomSpike(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_RandomSpike
    __del__ = lambda self : None;
    def getType(self):
        """getType(RandomSpike self) -> std::string const &"""
        return _moose.RandomSpike_getType(self)

    def __get_minAmp(self):
        """__get_minAmp(RandomSpike self) -> double"""
        return _moose.RandomSpike___get_minAmp(self)

    def __set_minAmp(self, *args):
        """__set_minAmp(RandomSpike self, double minAmp)"""
        return _moose.RandomSpike___set_minAmp(self, *args)

    def __get_maxAmp(self):
        """__get_maxAmp(RandomSpike self) -> double"""
        return _moose.RandomSpike___get_maxAmp(self)

    def __set_maxAmp(self, *args):
        """__set_maxAmp(RandomSpike self, double maxAmp)"""
        return _moose.RandomSpike___set_maxAmp(self, *args)

    def __get_rate(self):
        """__get_rate(RandomSpike self) -> double"""
        return _moose.RandomSpike___get_rate(self)

    def __set_rate(self, *args):
        """__set_rate(RandomSpike self, double rate)"""
        return _moose.RandomSpike___set_rate(self, *args)

    def __get_resetValue(self):
        """__get_resetValue(RandomSpike self) -> double"""
        return _moose.RandomSpike___get_resetValue(self)

    def __set_resetValue(self, *args):
        """__set_resetValue(RandomSpike self, double resetValue)"""
        return _moose.RandomSpike___set_resetValue(self, *args)

    def __get_state(self):
        """__get_state(RandomSpike self) -> double"""
        return _moose.RandomSpike___get_state(self)

    def __set_state(self, *args):
        """__set_state(RandomSpike self, double state)"""
        return _moose.RandomSpike___set_state(self, *args)

    def __get_absRefract(self):
        """__get_absRefract(RandomSpike self) -> double"""
        return _moose.RandomSpike___get_absRefract(self)

    def __set_absRefract(self, *args):
        """__set_absRefract(RandomSpike self, double absRefract)"""
        return _moose.RandomSpike___set_absRefract(self, *args)

    def __get_lastEvent(self):
        """__get_lastEvent(RandomSpike self) -> double"""
        return _moose.RandomSpike___get_lastEvent(self)

    def __get_reset(self):
        """__get_reset(RandomSpike self) -> int"""
        return _moose.RandomSpike___get_reset(self)

    def __set_reset(self, *args):
        """__set_reset(RandomSpike self, int reset)"""
        return _moose.RandomSpike___set_reset(self, *args)

    minAmp = _swig_property(_moose.RandomSpike_minAmp_get, _moose.RandomSpike_minAmp_set)
    maxAmp = _swig_property(_moose.RandomSpike_maxAmp_get, _moose.RandomSpike_maxAmp_set)
    rate = _swig_property(_moose.RandomSpike_rate_get, _moose.RandomSpike_rate_set)
    resetValue = _swig_property(_moose.RandomSpike_resetValue_get, _moose.RandomSpike_resetValue_set)
    state = _swig_property(_moose.RandomSpike_state_get, _moose.RandomSpike_state_set)
    absRefract = _swig_property(_moose.RandomSpike_absRefract_get, _moose.RandomSpike_absRefract_set)
    lastEvent = _swig_property(_moose.RandomSpike_lastEvent_get)
    reset = _swig_property(_moose.RandomSpike_reset_get, _moose.RandomSpike_reset_set)
RandomSpike_swigregister = _moose.RandomSpike_swigregister
RandomSpike_swigregister(RandomSpike)

class Efield(Neutral):
    """Proxy of C++ pymoose::Efield class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Efield self, std::string className, std::string objectName, Id parentId) -> Efield
        __init__(pymoose::Efield self, std::string className, std::string path) -> Efield
        __init__(pymoose::Efield self, std::string className, std::string objectName, PyMooseBase parent) -> Efield
        __init__(pymoose::Efield self, Id id) -> Efield
        __init__(pymoose::Efield self, std::string path) -> Efield
        __init__(pymoose::Efield self, std::string name, Id parentId) -> Efield
        __init__(pymoose::Efield self, std::string name, PyMooseBase parent) -> Efield
        __init__(pymoose::Efield self, Efield src, std::string name, PyMooseBase parent) -> Efield
        __init__(pymoose::Efield self, Efield src, std::string name, Id parent) -> Efield
        __init__(pymoose::Efield self, Efield src, std::string path) -> Efield
        __init__(pymoose::Efield self, Id src, std::string name, Id parent) -> Efield
        __init__(pymoose::Efield self, Id src, std::string path) -> Efield
        """
        this = _moose.new_Efield(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Efield
    __del__ = lambda self : None;
    def getType(self):
        """getType(Efield self) -> std::string const &"""
        return _moose.Efield_getType(self)

    def __get_x(self):
        """__get_x(Efield self) -> double"""
        return _moose.Efield___get_x(self)

    def __set_x(self, *args):
        """__set_x(Efield self, double x)"""
        return _moose.Efield___set_x(self, *args)

    def __get_y(self):
        """__get_y(Efield self) -> double"""
        return _moose.Efield___get_y(self)

    def __set_y(self, *args):
        """__set_y(Efield self, double y)"""
        return _moose.Efield___set_y(self, *args)

    def __get_z(self):
        """__get_z(Efield self) -> double"""
        return _moose.Efield___get_z(self)

    def __set_z(self, *args):
        """__set_z(Efield self, double z)"""
        return _moose.Efield___set_z(self, *args)

    def __get_scale(self):
        """__get_scale(Efield self) -> double"""
        return _moose.Efield___get_scale(self)

    def __set_scale(self, *args):
        """__set_scale(Efield self, double scale)"""
        return _moose.Efield___set_scale(self, *args)

    def __get_potential(self):
        """__get_potential(Efield self) -> double"""
        return _moose.Efield___get_potential(self)

    x = _swig_property(_moose.Efield_x_get, _moose.Efield_x_set)
    y = _swig_property(_moose.Efield_y_get, _moose.Efield_y_set)
    z = _swig_property(_moose.Efield_z_get, _moose.Efield_z_set)
    scale = _swig_property(_moose.Efield_scale_get, _moose.Efield_scale_set)
    potential = _swig_property(_moose.Efield_potential_get)
Efield_swigregister = _moose.Efield_swigregister
Efield_swigregister(Efield)

class PulseGen(Neutral):
    """Proxy of C++ pymoose::PulseGen class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::PulseGen self, Id id) -> PulseGen
        __init__(pymoose::PulseGen self, std::string path) -> PulseGen
        __init__(pymoose::PulseGen self, std::string name, Id parentId) -> PulseGen
        __init__(pymoose::PulseGen self, std::string name, PyMooseBase parent) -> PulseGen
        __init__(pymoose::PulseGen self, PulseGen src, std::string name, PyMooseBase parent) -> PulseGen
        __init__(pymoose::PulseGen self, PulseGen src, std::string name, Id parent) -> PulseGen
        __init__(pymoose::PulseGen self, PulseGen src, std::string path) -> PulseGen
        __init__(pymoose::PulseGen self, Id src, std::string name, Id parent) -> PulseGen
        __init__(pymoose::PulseGen self, Id src, std::string path) -> PulseGen
        """
        this = _moose.new_PulseGen(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_PulseGen
    __del__ = lambda self : None;
    def getType(self):
        """getType(PulseGen self) -> std::string const &"""
        return _moose.PulseGen_getType(self)

    def __get_firstLevel(self):
        """__get_firstLevel(PulseGen self) -> double"""
        return _moose.PulseGen___get_firstLevel(self)

    def __set_firstLevel(self, *args):
        """__set_firstLevel(PulseGen self, double firstLevel)"""
        return _moose.PulseGen___set_firstLevel(self, *args)

    def __get_firstWidth(self):
        """__get_firstWidth(PulseGen self) -> double"""
        return _moose.PulseGen___get_firstWidth(self)

    def __set_firstWidth(self, *args):
        """__set_firstWidth(PulseGen self, double firstWidth)"""
        return _moose.PulseGen___set_firstWidth(self, *args)

    def __get_firstDelay(self):
        """__get_firstDelay(PulseGen self) -> double"""
        return _moose.PulseGen___get_firstDelay(self)

    def __set_firstDelay(self, *args):
        """__set_firstDelay(PulseGen self, double firstDelay)"""
        return _moose.PulseGen___set_firstDelay(self, *args)

    def __get_secondLevel(self):
        """__get_secondLevel(PulseGen self) -> double"""
        return _moose.PulseGen___get_secondLevel(self)

    def __set_secondLevel(self, *args):
        """__set_secondLevel(PulseGen self, double secondLevel)"""
        return _moose.PulseGen___set_secondLevel(self, *args)

    def __get_secondWidth(self):
        """__get_secondWidth(PulseGen self) -> double"""
        return _moose.PulseGen___get_secondWidth(self)

    def __set_secondWidth(self, *args):
        """__set_secondWidth(PulseGen self, double secondWidth)"""
        return _moose.PulseGen___set_secondWidth(self, *args)

    def __get_secondDelay(self):
        """__get_secondDelay(PulseGen self) -> double"""
        return _moose.PulseGen___get_secondDelay(self)

    def __set_secondDelay(self, *args):
        """__set_secondDelay(PulseGen self, double secondDelay)"""
        return _moose.PulseGen___set_secondDelay(self, *args)

    def __get_baseLevel(self):
        """__get_baseLevel(PulseGen self) -> double"""
        return _moose.PulseGen___get_baseLevel(self)

    def __set_baseLevel(self, *args):
        """__set_baseLevel(PulseGen self, double baseLevel)"""
        return _moose.PulseGen___set_baseLevel(self, *args)

    def __get_output(self):
        """__get_output(PulseGen self) -> double"""
        return _moose.PulseGen___get_output(self)

    def __get_trigTime(self):
        """__get_trigTime(PulseGen self) -> double"""
        return _moose.PulseGen___get_trigTime(self)

    def __set_trigTime(self, *args):
        """__set_trigTime(PulseGen self, double trigTime)"""
        return _moose.PulseGen___set_trigTime(self, *args)

    def __get_trigMode(self):
        """__get_trigMode(PulseGen self) -> int"""
        return _moose.PulseGen___get_trigMode(self)

    def __set_trigMode(self, *args):
        """__set_trigMode(PulseGen self, int trigMode)"""
        return _moose.PulseGen___set_trigMode(self, *args)

    def __get_prevInput(self):
        """__get_prevInput(PulseGen self) -> int"""
        return _moose.PulseGen___get_prevInput(self)

    def setCount(self, *args):
        """setCount(PulseGen self, int count)"""
        return _moose.PulseGen_setCount(self, *args)

    def getCount(self):
        """getCount(PulseGen self) -> int"""
        return _moose.PulseGen_getCount(self)

    def setDelay(self, *args):
        """setDelay(PulseGen self, int index, double value)"""
        return _moose.PulseGen_setDelay(self, *args)

    def getDelay(self, *args):
        """getDelay(PulseGen self, int index) -> double"""
        return _moose.PulseGen_getDelay(self, *args)

    def setLevel(self, *args):
        """setLevel(PulseGen self, int index, double value)"""
        return _moose.PulseGen_setLevel(self, *args)

    def getLevel(self, *args):
        """getLevel(PulseGen self, int index) -> double"""
        return _moose.PulseGen_getLevel(self, *args)

    def setWidth(self, *args):
        """setWidth(PulseGen self, int index, double value)"""
        return _moose.PulseGen_setWidth(self, *args)

    def getWidth(self, *args):
        """getWidth(PulseGen self, int index) -> double"""
        return _moose.PulseGen_getWidth(self, *args)

    firstLevel = _swig_property(_moose.PulseGen_firstLevel_get, _moose.PulseGen_firstLevel_set)
    firstWidth = _swig_property(_moose.PulseGen_firstWidth_get, _moose.PulseGen_firstWidth_set)
    firstDelay = _swig_property(_moose.PulseGen_firstDelay_get, _moose.PulseGen_firstDelay_set)
    secondLevel = _swig_property(_moose.PulseGen_secondLevel_get, _moose.PulseGen_secondLevel_set)
    secondWidth = _swig_property(_moose.PulseGen_secondWidth_get, _moose.PulseGen_secondWidth_set)
    secondDelay = _swig_property(_moose.PulseGen_secondDelay_get, _moose.PulseGen_secondDelay_set)
    baseLevel = _swig_property(_moose.PulseGen_baseLevel_get, _moose.PulseGen_baseLevel_set)
    output = _swig_property(_moose.PulseGen_output_get)
    trigTime = _swig_property(_moose.PulseGen_trigTime_get, _moose.PulseGen_trigTime_set)
    trigMode = _swig_property(_moose.PulseGen_trigMode_get, _moose.PulseGen_trigMode_set)
    prevInput = _swig_property(_moose.PulseGen_prevInput_get)
    count = _swig_property(_moose.PulseGen_count_get, _moose.PulseGen_count_set)
PulseGen_swigregister = _moose.PulseGen_swigregister
PulseGen_swigregister(PulseGen)

PulseGen.width = listproperty(PulseGen.getWidth, PulseGen.setWidth, len=PulseGen.getCount)
PulseGen.delay = listproperty(PulseGen.getDelay, PulseGen.setDelay, len=PulseGen.getCount)
PulseGen.level = listproperty(PulseGen.getLevel, PulseGen.setLevel, len=PulseGen.getCount)

class Nernst(Neutral):
    """Proxy of C++ pymoose::Nernst class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Nernst self, Id id) -> Nernst
        __init__(pymoose::Nernst self, std::string path) -> Nernst
        __init__(pymoose::Nernst self, std::string name, Id parentId) -> Nernst
        __init__(pymoose::Nernst self, std::string name, PyMooseBase parent) -> Nernst
        __init__(pymoose::Nernst self, Nernst src, std::string name, PyMooseBase parent) -> Nernst
        __init__(pymoose::Nernst self, Nernst src, std::string name, Id parent) -> Nernst
        __init__(pymoose::Nernst self, Nernst src, std::string path) -> Nernst
        __init__(pymoose::Nernst self, Id src, std::string name, Id parent) -> Nernst
        __init__(pymoose::Nernst self, Id src, std::string path) -> Nernst
        """
        this = _moose.new_Nernst(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Nernst
    __del__ = lambda self : None;
    def getType(self):
        """getType(Nernst self) -> std::string const &"""
        return _moose.Nernst_getType(self)

    def __get_E(self):
        """__get_E(Nernst self) -> double"""
        return _moose.Nernst___get_E(self)

    def __set_E(self, *args):
        """__set_E(Nernst self, double E)"""
        return _moose.Nernst___set_E(self, *args)

    def __get_Temperature(self):
        """__get_Temperature(Nernst self) -> double"""
        return _moose.Nernst___get_Temperature(self)

    def __set_Temperature(self, *args):
        """__set_Temperature(Nernst self, double Temperature)"""
        return _moose.Nernst___set_Temperature(self, *args)

    def __get_valence(self):
        """__get_valence(Nernst self) -> int"""
        return _moose.Nernst___get_valence(self)

    def __set_valence(self, *args):
        """__set_valence(Nernst self, int valence)"""
        return _moose.Nernst___set_valence(self, *args)

    def __get_Cin(self):
        """__get_Cin(Nernst self) -> double"""
        return _moose.Nernst___get_Cin(self)

    def __set_Cin(self, *args):
        """__set_Cin(Nernst self, double Cin)"""
        return _moose.Nernst___set_Cin(self, *args)

    def __get_Cout(self):
        """__get_Cout(Nernst self) -> double"""
        return _moose.Nernst___get_Cout(self)

    def __set_Cout(self, *args):
        """__set_Cout(Nernst self, double Cout)"""
        return _moose.Nernst___set_Cout(self, *args)

    def __get_scale(self):
        """__get_scale(Nernst self) -> double"""
        return _moose.Nernst___get_scale(self)

    def __set_scale(self, *args):
        """__set_scale(Nernst self, double scale)"""
        return _moose.Nernst___set_scale(self, *args)

    def __get_ESrc(self):
        """__get_ESrc(Nernst self) -> double"""
        return _moose.Nernst___get_ESrc(self)

    def __set_ESrc(self, *args):
        """__set_ESrc(Nernst self, double ESrc)"""
        return _moose.Nernst___set_ESrc(self, *args)

    def __get_CinMsg(self):
        """__get_CinMsg(Nernst self) -> double"""
        return _moose.Nernst___get_CinMsg(self)

    def __set_CinMsg(self, *args):
        """__set_CinMsg(Nernst self, double CinMsg)"""
        return _moose.Nernst___set_CinMsg(self, *args)

    def __get_CoutMsg(self):
        """__get_CoutMsg(Nernst self) -> double"""
        return _moose.Nernst___get_CoutMsg(self)

    def __set_CoutMsg(self, *args):
        """__set_CoutMsg(Nernst self, double CoutMsg)"""
        return _moose.Nernst___set_CoutMsg(self, *args)

    E = _swig_property(_moose.Nernst_E_get)
    Temperature = _swig_property(_moose.Nernst_Temperature_get, _moose.Nernst_Temperature_set)
    valence = _swig_property(_moose.Nernst_valence_get, _moose.Nernst_valence_set)
    Cin = _swig_property(_moose.Nernst_Cin_get, _moose.Nernst_Cin_set)
    Cout = _swig_property(_moose.Nernst_Cout_get, _moose.Nernst_Cout_set)
    scale = _swig_property(_moose.Nernst_scale_get, _moose.Nernst_scale_set)
Nernst_swigregister = _moose.Nernst_swigregister
Nernst_swigregister(Nernst)

class CaConc(Neutral):
    """Proxy of C++ pymoose::CaConc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::CaConc self, Id id) -> CaConc
        __init__(pymoose::CaConc self, std::string path) -> CaConc
        __init__(pymoose::CaConc self, std::string name, Id parentId) -> CaConc
        __init__(pymoose::CaConc self, std::string name, PyMooseBase parent) -> CaConc
        __init__(pymoose::CaConc self, CaConc src, std::string name, PyMooseBase parent) -> CaConc
        __init__(pymoose::CaConc self, CaConc src, std::string name, Id parent) -> CaConc
        __init__(pymoose::CaConc self, Id src, std::string name, Id parent) -> CaConc
        __init__(pymoose::CaConc self, CaConc src, std::string path) -> CaConc
        __init__(pymoose::CaConc self, Id src, std::string path) -> CaConc
        """
        this = _moose.new_CaConc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_CaConc
    __del__ = lambda self : None;
    def getType(self):
        """getType(CaConc self) -> std::string const &"""
        return _moose.CaConc_getType(self)

    def __get_Ca(self):
        """__get_Ca(CaConc self) -> double"""
        return _moose.CaConc___get_Ca(self)

    def __set_Ca(self, *args):
        """__set_Ca(CaConc self, double Ca)"""
        return _moose.CaConc___set_Ca(self, *args)

    def __get_CaBasal(self):
        """__get_CaBasal(CaConc self) -> double"""
        return _moose.CaConc___get_CaBasal(self)

    def __set_CaBasal(self, *args):
        """__set_CaBasal(CaConc self, double CaBasal)"""
        return _moose.CaConc___set_CaBasal(self, *args)

    def __get_Ca_base(self):
        """__get_Ca_base(CaConc self) -> double"""
        return _moose.CaConc___get_Ca_base(self)

    def __set_Ca_base(self, *args):
        """__set_Ca_base(CaConc self, double Ca_base)"""
        return _moose.CaConc___set_Ca_base(self, *args)

    def __get_tau(self):
        """__get_tau(CaConc self) -> double"""
        return _moose.CaConc___get_tau(self)

    def __set_tau(self, *args):
        """__set_tau(CaConc self, double tau)"""
        return _moose.CaConc___set_tau(self, *args)

    def __get_B(self):
        """__get_B(CaConc self) -> double"""
        return _moose.CaConc___get_B(self)

    def __set_B(self, *args):
        """__set_B(CaConc self, double B)"""
        return _moose.CaConc___set_B(self, *args)

    def __get_thick(self):
        """__get_thick(CaConc self) -> double"""
        return _moose.CaConc___get_thick(self)

    def __set_thick(self, *args):
        """__set_thick(CaConc self, double thick)"""
        return _moose.CaConc___set_thick(self, *args)

    def __get_ceiling(self):
        """__get_ceiling(CaConc self) -> double"""
        return _moose.CaConc___get_ceiling(self)

    def __set_ceiling(self, *args):
        """__set_ceiling(CaConc self, double ceiling)"""
        return _moose.CaConc___set_ceiling(self, *args)

    def __get_floor(self):
        """__get_floor(CaConc self) -> double"""
        return _moose.CaConc___get_floor(self)

    def __set_floor(self, *args):
        """__set_floor(CaConc self, double floor)"""
        return _moose.CaConc___set_floor(self, *args)

    Ca = _swig_property(_moose.CaConc_Ca_get, _moose.CaConc_Ca_set)
    CaBasal = _swig_property(_moose.CaConc_CaBasal_get, _moose.CaConc_CaBasal_set)
    Ca_base = _swig_property(_moose.CaConc_Ca_base_get, _moose.CaConc_Ca_base_set)
    tau = _swig_property(_moose.CaConc_tau_get, _moose.CaConc_tau_set)
    B = _swig_property(_moose.CaConc_B_get, _moose.CaConc_B_set)
    thick = _swig_property(_moose.CaConc_thick_get, _moose.CaConc_thick_set)
    ceiling = _swig_property(_moose.CaConc_ceiling_get, _moose.CaConc_ceiling_set)
    floor = _swig_property(_moose.CaConc_floor_get, _moose.CaConc_floor_set)
CaConc_swigregister = _moose.CaConc_swigregister
CaConc_swigregister(CaConc)

class HHGate(Neutral):
    """Proxy of C++ pymoose::HHGate class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::HHGate self, std::string className, std::string name, Id parentId) -> HHGate
        __init__(pymoose::HHGate self, std::string className, std::string path) -> HHGate
        __init__(pymoose::HHGate self, std::string className, std::string objectName, PyMooseBase parent) -> HHGate
        __init__(pymoose::HHGate self, Id id) -> HHGate
        __init__(pymoose::HHGate self, std::string path) -> HHGate
        __init__(pymoose::HHGate self, std::string name, Id parentId) -> HHGate
        __init__(pymoose::HHGate self, std::string name, PyMooseBase parent) -> HHGate
        __init__(pymoose::HHGate self, HHGate src, std::string name, PyMooseBase parent) -> HHGate
        __init__(pymoose::HHGate self, HHGate src, std::string name, Id parent) -> HHGate
        __init__(pymoose::HHGate self, HHGate src, std::string path) -> HHGate
        __init__(pymoose::HHGate self, Id src, std::string name, Id parent) -> HHGate
        __init__(pymoose::HHGate self, Id src, std::string path) -> HHGate
        """
        this = _moose.new_HHGate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_HHGate
    __del__ = lambda self : None;
    def getType(self):
        """getType(HHGate self) -> std::string const &"""
        return _moose.HHGate_getType(self)

    def __get_A(self):
        """__get_A(HHGate self) -> Interpol"""
        return _moose.HHGate___get_A(self)

    def __get_B(self):
        """__get_B(HHGate self) -> Interpol"""
        return _moose.HHGate___get_B(self)

    def tabFill(self, *args):
        """tabFill(HHGate self, int xdivs, int mode)"""
        return _moose.HHGate_tabFill(self, *args)

    def setupAlpha(self, *args):
        """
        setupAlpha(HHGate self, double AA, double AB, double AC, double AD, double AF, double BA, double BB, double BC, 
            double BD, double BF, double size=3000, double min=-0.1, double max=0.05)
        setupAlpha(HHGate self, double AA, double AB, double AC, double AD, double AF, double BA, double BB, double BC, 
            double BD, double BF, double size=3000, double min=-0.1)
        setupAlpha(HHGate self, double AA, double AB, double AC, double AD, double AF, double BA, double BB, double BC, 
            double BD, double BF, double size=3000)
        setupAlpha(HHGate self, double AA, double AB, double AC, double AD, double AF, double BA, double BB, double BC, 
            double BD, double BF)
        """
        return _moose.HHGate_setupAlpha(self, *args)

    def setupTau(self, *args):
        """
        setupTau(HHGate self, double AA, double AB, double AC, double AD, double AF, double BA, double BB, double BC, 
            double BD, double BF, double size=3000, double min=-0.1, double max=0.05)
        setupTau(HHGate self, double AA, double AB, double AC, double AD, double AF, double BA, double BB, double BC, 
            double BD, double BF, double size=3000, double min=-0.1)
        setupTau(HHGate self, double AA, double AB, double AC, double AD, double AF, double BA, double BB, double BC, 
            double BD, double BF, double size=3000)
        setupTau(HHGate self, double AA, double AB, double AC, double AD, double AF, double BA, double BB, double BC, 
            double BD, double BF)
        """
        return _moose.HHGate_setupTau(self, *args)

    def tweakAlpha(self):
        """tweakAlpha(HHGate self)"""
        return _moose.HHGate_tweakAlpha(self)

    def tweakTau(self):
        """tweakTau(HHGate self)"""
        return _moose.HHGate_tweakTau(self)

    A = _swig_property(_moose.HHGate_A_get)
    B = _swig_property(_moose.HHGate_B_get)
HHGate_swigregister = _moose.HHGate_swigregister
HHGate_swigregister(HHGate)

class Leakage(Neutral):
    """Proxy of C++ pymoose::Leakage class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Leakage self, Id id) -> Leakage
        __init__(pymoose::Leakage self, std::string path) -> Leakage
        __init__(pymoose::Leakage self, std::string name, Id parentId) -> Leakage
        __init__(pymoose::Leakage self, std::string name, PyMooseBase parent) -> Leakage
        __init__(pymoose::Leakage self, Leakage src, std::string name, PyMooseBase parent) -> Leakage
        __init__(pymoose::Leakage self, Leakage src, std::string name, Id parent) -> Leakage
        __init__(pymoose::Leakage self, Leakage src, std::string path) -> Leakage
        __init__(pymoose::Leakage self, Id src, std::string name, Id parent) -> Leakage
        __init__(pymoose::Leakage self, Id src, std::string path) -> Leakage
        """
        this = _moose.new_Leakage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Leakage
    __del__ = lambda self : None;
    def getType(self):
        """getType(Leakage self) -> std::string const &"""
        return _moose.Leakage_getType(self)

    def __get_Ek(self):
        """__get_Ek(Leakage self) -> double"""
        return _moose.Leakage___get_Ek(self)

    def __set_Ek(self, *args):
        """__set_Ek(Leakage self, double Ek)"""
        return _moose.Leakage___set_Ek(self, *args)

    def __get_Gk(self):
        """__get_Gk(Leakage self) -> double"""
        return _moose.Leakage___get_Gk(self)

    def __set_Gk(self, *args):
        """__set_Gk(Leakage self, double Gk)"""
        return _moose.Leakage___set_Gk(self, *args)

    def __get_Ik(self):
        """__get_Ik(Leakage self) -> double"""
        return _moose.Leakage___get_Ik(self)

    def __get_activation(self):
        """__get_activation(Leakage self) -> double"""
        return _moose.Leakage___get_activation(self)

    def __set_activation(self, *args):
        """__set_activation(Leakage self, double activation)"""
        return _moose.Leakage___set_activation(self, *args)

    Ek = _swig_property(_moose.Leakage_Ek_get, _moose.Leakage_Ek_set)
    Gk = _swig_property(_moose.Leakage_Gk_get, _moose.Leakage_Gk_set)
    Ik = _swig_property(_moose.Leakage_Ik_get)
    activation = _swig_property(_moose.Leakage_activation_get, _moose.Leakage_activation_set)
Leakage_swigregister = _moose.Leakage_swigregister
Leakage_swigregister(Leakage)

class HHChannel(Neutral):
    """Proxy of C++ pymoose::HHChannel class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::HHChannel self, std::string className, std::string name, Id parentId) -> HHChannel
        __init__(pymoose::HHChannel self, std::string className, std::string path) -> HHChannel
        __init__(pymoose::HHChannel self, std::string className, std::string objectName, PyMooseBase parent) -> HHChannel
        __init__(pymoose::HHChannel self, Id id) -> HHChannel
        __init__(pymoose::HHChannel self, std::string path) -> HHChannel
        __init__(pymoose::HHChannel self, std::string name, Id parentId) -> HHChannel
        __init__(pymoose::HHChannel self, std::string name, PyMooseBase parent) -> HHChannel
        __init__(pymoose::HHChannel self, HHChannel src, std::string name, PyMooseBase parent) -> HHChannel
        __init__(pymoose::HHChannel self, HHChannel src, std::string name, Id parent) -> HHChannel
        __init__(pymoose::HHChannel self, HHChannel src, std::string path) -> HHChannel
        __init__(pymoose::HHChannel self, Id src, std::string name, Id parent) -> HHChannel
        __init__(pymoose::HHChannel self, Id src, std::string path) -> HHChannel
        """
        this = _moose.new_HHChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_HHChannel
    __del__ = lambda self : None;
    def getType(self):
        """getType(HHChannel self) -> std::string const &"""
        return _moose.HHChannel_getType(self)

    def __get_Gbar(self):
        """__get_Gbar(HHChannel self) -> double"""
        return _moose.HHChannel___get_Gbar(self)

    def __set_Gbar(self, *args):
        """__set_Gbar(HHChannel self, double Gbar)"""
        return _moose.HHChannel___set_Gbar(self, *args)

    def __get_Ek(self):
        """__get_Ek(HHChannel self) -> double"""
        return _moose.HHChannel___get_Ek(self)

    def __set_Ek(self, *args):
        """__set_Ek(HHChannel self, double Ek)"""
        return _moose.HHChannel___set_Ek(self, *args)

    def __get_Xpower(self):
        """__get_Xpower(HHChannel self) -> double"""
        return _moose.HHChannel___get_Xpower(self)

    def __set_Xpower(self, *args):
        """__set_Xpower(HHChannel self, double Xpower)"""
        return _moose.HHChannel___set_Xpower(self, *args)

    def __get_Ypower(self):
        """__get_Ypower(HHChannel self) -> double"""
        return _moose.HHChannel___get_Ypower(self)

    def __set_Ypower(self, *args):
        """__set_Ypower(HHChannel self, double Ypower)"""
        return _moose.HHChannel___set_Ypower(self, *args)

    def __get_Zpower(self):
        """__get_Zpower(HHChannel self) -> double"""
        return _moose.HHChannel___get_Zpower(self)

    def __set_Zpower(self, *args):
        """__set_Zpower(HHChannel self, double Zpower)"""
        return _moose.HHChannel___set_Zpower(self, *args)

    def __get_instant(self):
        """__get_instant(HHChannel self) -> int"""
        return _moose.HHChannel___get_instant(self)

    def __set_instant(self, *args):
        """__set_instant(HHChannel self, int instant)"""
        return _moose.HHChannel___set_instant(self, *args)

    def __get_Gk(self):
        """__get_Gk(HHChannel self) -> double"""
        return _moose.HHChannel___get_Gk(self)

    def __set_Gk(self, *args):
        """__set_Gk(HHChannel self, double Gk)"""
        return _moose.HHChannel___set_Gk(self, *args)

    def __get_Ik(self):
        """__get_Ik(HHChannel self) -> double"""
        return _moose.HHChannel___get_Ik(self)

    def __get_X(self):
        """__get_X(HHChannel self) -> double"""
        return _moose.HHChannel___get_X(self)

    def __set_X(self, *args):
        """__set_X(HHChannel self, double X)"""
        return _moose.HHChannel___set_X(self, *args)

    def __get_Y(self):
        """__get_Y(HHChannel self) -> double"""
        return _moose.HHChannel___get_Y(self)

    def __set_Y(self, *args):
        """__set_Y(HHChannel self, double Y)"""
        return _moose.HHChannel___set_Y(self, *args)

    def __get_Z(self):
        """__get_Z(HHChannel self) -> double"""
        return _moose.HHChannel___get_Z(self)

    def __set_Z(self, *args):
        """__set_Z(HHChannel self, double Z)"""
        return _moose.HHChannel___set_Z(self, *args)

    def __get_useConcentration(self):
        """__get_useConcentration(HHChannel self) -> int"""
        return _moose.HHChannel___get_useConcentration(self)

    def __set_useConcentration(self, *args):
        """__set_useConcentration(HHChannel self, int useConcentration)"""
        return _moose.HHChannel___set_useConcentration(self, *args)

    def createTable(self, *args):
        """createTable(HHChannel self, std::string gate, unsigned int divs, double min, double max)"""
        return _moose.HHChannel_createTable(self, *args)

    def tweakAlpha(self, *args):
        """tweakAlpha(HHChannel self, std::string gate)"""
        return _moose.HHChannel_tweakAlpha(self, *args)

    def tweakTau(self, *args):
        """tweakTau(HHChannel self, std::string gate)"""
        return _moose.HHChannel_tweakTau(self, *args)

    def setupAlpha(self, *args):
        """
        setupAlpha(HHChannel self, std::string gate, double_vector params)
        setupAlpha(HHChannel self, std::string gate, double AA, double AB, double AC, double AD, double AF, double BA, 
            double BB, double BC, double BD, double BF, double size=3000, double min=-0.1, 
            double max=0.05)
        setupAlpha(HHChannel self, std::string gate, double AA, double AB, double AC, double AD, double AF, double BA, 
            double BB, double BC, double BD, double BF, double size=3000, double min=-0.1)
        setupAlpha(HHChannel self, std::string gate, double AA, double AB, double AC, double AD, double AF, double BA, 
            double BB, double BC, double BD, double BF, double size=3000)
        setupAlpha(HHChannel self, std::string gate, double AA, double AB, double AC, double AD, double AF, double BA, 
            double BB, double BC, double BD, double BF)
        """
        return _moose.HHChannel_setupAlpha(self, *args)

    def setupTau(self, *args):
        """
        setupTau(HHChannel self, std::string gate, double_vector params)
        setupTau(HHChannel self, std::string gate, double AA, double AB, double AC, double AD, double AF, double BA, 
            double BB, double BC, double BD, double BF, double size=3000, double min=-0.1, 
            double max=0.05)
        setupTau(HHChannel self, std::string gate, double AA, double AB, double AC, double AD, double AF, double BA, 
            double BB, double BC, double BD, double BF, double size=3000, double min=-0.1)
        setupTau(HHChannel self, std::string gate, double AA, double AB, double AC, double AD, double AF, double BA, 
            double BB, double BC, double BD, double BF, double size=3000)
        setupTau(HHChannel self, std::string gate, double AA, double AB, double AC, double AD, double AF, double BA, 
            double BB, double BC, double BD, double BF)
        """
        return _moose.HHChannel_setupTau(self, *args)

    Gbar = _swig_property(_moose.HHChannel_Gbar_get, _moose.HHChannel_Gbar_set)
    Ek = _swig_property(_moose.HHChannel_Ek_get, _moose.HHChannel_Ek_set)
    Ik = _swig_property(_moose.HHChannel_Ik_get)
    Gk = _swig_property(_moose.HHChannel_Gk_get, _moose.HHChannel_Gk_set)
    Xpower = _swig_property(_moose.HHChannel_Xpower_get, _moose.HHChannel_Xpower_set)
    Ypower = _swig_property(_moose.HHChannel_Ypower_get, _moose.HHChannel_Ypower_set)
    Zpower = _swig_property(_moose.HHChannel_Zpower_get, _moose.HHChannel_Zpower_set)
    X = _swig_property(_moose.HHChannel_X_get, _moose.HHChannel_X_set)
    Y = _swig_property(_moose.HHChannel_Y_get, _moose.HHChannel_Y_set)
    Z = _swig_property(_moose.HHChannel_Z_get, _moose.HHChannel_Z_set)
    instant = _swig_property(_moose.HHChannel_instant_get, _moose.HHChannel_instant_set)
    useConcentration = _swig_property(_moose.HHChannel_useConcentration_get, _moose.HHChannel_useConcentration_set)
    def __get_xGate(self):
        if self.Xpower != 0:
            return HHGate('xGate', self)
        else:
            return None

    def __get_yGate(self):
        if self.Ypower != 0:
            return HHGate('yGate', self)
        else:
            return None
    def __get_zGate(self):
        if self.Zpower != 0:
            return HHGate('zGate', self)
        else:
            return None

    xGate = property(__get_xGate)
    yGate = property(__get_yGate)
    zGate = property(__get_zGate)

HHChannel_swigregister = _moose.HHChannel_swigregister
HHChannel_swigregister(HHChannel)

class Mg_block(Neutral):
    """Proxy of C++ pymoose::Mg_block class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Mg_block self, Id id) -> Mg_block
        __init__(pymoose::Mg_block self, std::string path) -> Mg_block
        __init__(pymoose::Mg_block self, std::string name, Id parentId) -> Mg_block
        __init__(pymoose::Mg_block self, std::string name, PyMooseBase parent) -> Mg_block
        __init__(pymoose::Mg_block self, Mg_block src, std::string name, PyMooseBase parent) -> Mg_block
        __init__(pymoose::Mg_block self, Mg_block src, std::string name, Id parent) -> Mg_block
        __init__(pymoose::Mg_block self, Mg_block src, std::string path) -> Mg_block
        __init__(pymoose::Mg_block self, Id src, std::string name, Id parent) -> Mg_block
        __init__(pymoose::Mg_block self, Id src, std::string path) -> Mg_block
        """
        this = _moose.new_Mg_block(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Mg_block
    __del__ = lambda self : None;
    def getType(self):
        """getType(Mg_block self) -> std::string const &"""
        return _moose.Mg_block_getType(self)

    def __get_KMg_A(self):
        """__get_KMg_A(Mg_block self) -> double"""
        return _moose.Mg_block___get_KMg_A(self)

    def __set_KMg_A(self, *args):
        """__set_KMg_A(Mg_block self, double KMg_A)"""
        return _moose.Mg_block___set_KMg_A(self, *args)

    def __get_KMg_B(self):
        """__get_KMg_B(Mg_block self) -> double"""
        return _moose.Mg_block___get_KMg_B(self)

    def __set_KMg_B(self, *args):
        """__set_KMg_B(Mg_block self, double KMg_B)"""
        return _moose.Mg_block___set_KMg_B(self, *args)

    def __get_CMg(self):
        """__get_CMg(Mg_block self) -> double"""
        return _moose.Mg_block___get_CMg(self)

    def __set_CMg(self, *args):
        """__set_CMg(Mg_block self, double CMg)"""
        return _moose.Mg_block___set_CMg(self, *args)

    def __get_Ik(self):
        """__get_Ik(Mg_block self) -> double"""
        return _moose.Mg_block___get_Ik(self)

    def __set_Ik(self, *args):
        """__set_Ik(Mg_block self, double Ik)"""
        return _moose.Mg_block___set_Ik(self, *args)

    def __get_Gk(self):
        """__get_Gk(Mg_block self) -> double"""
        return _moose.Mg_block___get_Gk(self)

    def __set_Gk(self, *args):
        """__set_Gk(Mg_block self, double Gk)"""
        return _moose.Mg_block___set_Gk(self, *args)

    def __get_Ek(self):
        """__get_Ek(Mg_block self) -> double"""
        return _moose.Mg_block___get_Ek(self)

    def __set_Ek(self, *args):
        """__set_Ek(Mg_block self, double Ek)"""
        return _moose.Mg_block___set_Ek(self, *args)

    def __get_Zk(self):
        """__get_Zk(Mg_block self) -> double"""
        return _moose.Mg_block___get_Zk(self)

    def __set_Zk(self, *args):
        """__set_Zk(Mg_block self, double Zk)"""
        return _moose.Mg_block___set_Zk(self, *args)

    KMg_A = _swig_property(_moose.Mg_block_KMg_A_get, _moose.Mg_block_KMg_A_set)
    KMg_B = _swig_property(_moose.Mg_block_KMg_B_get, _moose.Mg_block_KMg_B_set)
    CMg = _swig_property(_moose.Mg_block_CMg_get, _moose.Mg_block_CMg_set)
    Ik = _swig_property(_moose.Mg_block_Ik_get, _moose.Mg_block_Ik_set)
    Gk = _swig_property(_moose.Mg_block_Gk_get, _moose.Mg_block_Gk_set)
    Ek = _swig_property(_moose.Mg_block_Ek_get, _moose.Mg_block_Ek_set)
    Zk = _swig_property(_moose.Mg_block_Zk_get, _moose.Mg_block_Zk_set)
Mg_block_swigregister = _moose.Mg_block_swigregister
Mg_block_swigregister(Mg_block)

class Compartment(Neutral):
    """Proxy of C++ pymoose::Compartment class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Compartment self, Id id) -> Compartment
        __init__(pymoose::Compartment self, std::string path) -> Compartment
        __init__(pymoose::Compartment self, std::string name, Id parentId) -> Compartment
        __init__(pymoose::Compartment self, std::string name, PyMooseBase parent) -> Compartment
        __init__(pymoose::Compartment self, Compartment src, std::string name, PyMooseBase parent) -> Compartment
        __init__(pymoose::Compartment self, Compartment src, std::string name, Id parent) -> Compartment
        __init__(pymoose::Compartment self, Id src, std::string name, Id parent) -> Compartment
        __init__(pymoose::Compartment self, Compartment src, std::string path) -> Compartment
        __init__(pymoose::Compartment self, Id src, std::string path) -> Compartment
        """
        this = _moose.new_Compartment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Compartment
    __del__ = lambda self : None;
    def getType(self):
        """getType(Compartment self) -> std::string const &"""
        return _moose.Compartment_getType(self)

    def __get_Vm(self):
        """__get_Vm(Compartment self) -> double"""
        return _moose.Compartment___get_Vm(self)

    def __set_Vm(self, *args):
        """__set_Vm(Compartment self, double Vm)"""
        return _moose.Compartment___set_Vm(self, *args)

    def __get_Cm(self):
        """__get_Cm(Compartment self) -> double"""
        return _moose.Compartment___get_Cm(self)

    def __set_Cm(self, *args):
        """__set_Cm(Compartment self, double Cm)"""
        return _moose.Compartment___set_Cm(self, *args)

    def __get_Em(self):
        """__get_Em(Compartment self) -> double"""
        return _moose.Compartment___get_Em(self)

    def __set_Em(self, *args):
        """__set_Em(Compartment self, double Em)"""
        return _moose.Compartment___set_Em(self, *args)

    def __get_Im(self):
        """__get_Im(Compartment self) -> double"""
        return _moose.Compartment___get_Im(self)

    def __set_Im(self, *args):
        """__set_Im(Compartment self, double Im)"""
        return _moose.Compartment___set_Im(self, *args)

    def __get_inject(self):
        """__get_inject(Compartment self) -> double"""
        return _moose.Compartment___get_inject(self)

    def __set_inject(self, *args):
        """__set_inject(Compartment self, double inject)"""
        return _moose.Compartment___set_inject(self, *args)

    def __get_initVm(self):
        """__get_initVm(Compartment self) -> double"""
        return _moose.Compartment___get_initVm(self)

    def __set_initVm(self, *args):
        """__set_initVm(Compartment self, double initVm)"""
        return _moose.Compartment___set_initVm(self, *args)

    def __get_Rm(self):
        """__get_Rm(Compartment self) -> double"""
        return _moose.Compartment___get_Rm(self)

    def __set_Rm(self, *args):
        """__set_Rm(Compartment self, double Rm)"""
        return _moose.Compartment___set_Rm(self, *args)

    def __get_Ra(self):
        """__get_Ra(Compartment self) -> double"""
        return _moose.Compartment___get_Ra(self)

    def __set_Ra(self, *args):
        """__set_Ra(Compartment self, double Ra)"""
        return _moose.Compartment___set_Ra(self, *args)

    def __get_diameter(self):
        """__get_diameter(Compartment self) -> double"""
        return _moose.Compartment___get_diameter(self)

    def __set_diameter(self, *args):
        """__set_diameter(Compartment self, double diameter)"""
        return _moose.Compartment___set_diameter(self, *args)

    def __get_length(self):
        """__get_length(Compartment self) -> double"""
        return _moose.Compartment___get_length(self)

    def __set_length(self, *args):
        """__set_length(Compartment self, double length)"""
        return _moose.Compartment___set_length(self, *args)

    def __get_x(self):
        """__get_x(Compartment self) -> double"""
        return _moose.Compartment___get_x(self)

    def __set_x(self, *args):
        """__set_x(Compartment self, double x)"""
        return _moose.Compartment___set_x(self, *args)

    def __get_y(self):
        """__get_y(Compartment self) -> double"""
        return _moose.Compartment___get_y(self)

    def __set_y(self, *args):
        """__set_y(Compartment self, double y)"""
        return _moose.Compartment___set_y(self, *args)

    def __get_z(self):
        """__get_z(Compartment self) -> double"""
        return _moose.Compartment___get_z(self)

    def __set_z(self, *args):
        """__set_z(Compartment self, double z)"""
        return _moose.Compartment___set_z(self, *args)

    def __get_x0(self):
        """__get_x0(Compartment self) -> double"""
        return _moose.Compartment___get_x0(self)

    def __set_x0(self, *args):
        """__set_x0(Compartment self, double x)"""
        return _moose.Compartment___set_x0(self, *args)

    def __get_y0(self):
        """__get_y0(Compartment self) -> double"""
        return _moose.Compartment___get_y0(self)

    def __set_y0(self, *args):
        """__set_y0(Compartment self, double y)"""
        return _moose.Compartment___set_y0(self, *args)

    def __get_z0(self):
        """__get_z0(Compartment self) -> double"""
        return _moose.Compartment___get_z0(self)

    def __set_z0(self, *args):
        """__set_z0(Compartment self, double z)"""
        return _moose.Compartment___set_z0(self, *args)

    Vm = _swig_property(_moose.Compartment_Vm_get, _moose.Compartment_Vm_set)
    Cm = _swig_property(_moose.Compartment_Cm_get, _moose.Compartment_Cm_set)
    Em = _swig_property(_moose.Compartment_Em_get, _moose.Compartment_Em_set)
    Im = _swig_property(_moose.Compartment_Im_get, _moose.Compartment_Im_set)
    inject = _swig_property(_moose.Compartment_inject_get, _moose.Compartment_inject_set)
    initVm = _swig_property(_moose.Compartment_initVm_get, _moose.Compartment_initVm_set)
    Rm = _swig_property(_moose.Compartment_Rm_get, _moose.Compartment_Rm_set)
    Ra = _swig_property(_moose.Compartment_Ra_get, _moose.Compartment_Ra_set)
    diameter = _swig_property(_moose.Compartment_diameter_get, _moose.Compartment_diameter_set)
    length = _swig_property(_moose.Compartment_length_get, _moose.Compartment_length_set)
    x = _swig_property(_moose.Compartment_x_get, _moose.Compartment_x_set)
    y = _swig_property(_moose.Compartment_y_get, _moose.Compartment_y_set)
    z = _swig_property(_moose.Compartment_z_get, _moose.Compartment_z_set)
    x0 = _swig_property(_moose.Compartment_x0_get, _moose.Compartment_x0_set)
    y0 = _swig_property(_moose.Compartment_y0_get, _moose.Compartment_y0_set)
    z0 = _swig_property(_moose.Compartment_z0_get, _moose.Compartment_z0_set)
Compartment_swigregister = _moose.Compartment_swigregister
Compartment_swigregister(Compartment)

class NeuroScan(PyMooseBase):
    """Proxy of C++ pymoose::NeuroScan class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::NeuroScan self, Id id) -> NeuroScan
        __init__(pymoose::NeuroScan self, std::string path) -> NeuroScan
        __init__(pymoose::NeuroScan self, std::string name, Id parentId) -> NeuroScan
        __init__(pymoose::NeuroScan self, std::string name, PyMooseBase parent) -> NeuroScan
        __init__(pymoose::NeuroScan self, NeuroScan src, std::string name, PyMooseBase parent) -> NeuroScan
        __init__(pymoose::NeuroScan self, NeuroScan src, std::string name, Id parent) -> NeuroScan
        __init__(pymoose::NeuroScan self, NeuroScan src, std::string path) -> NeuroScan
        __init__(pymoose::NeuroScan self, Id src, std::string name, Id parent) -> NeuroScan
        __init__(pymoose::NeuroScan self, Id src, std::string path) -> NeuroScan
        """
        this = _moose.new_NeuroScan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_NeuroScan
    __del__ = lambda self : None;
    def getType(self):
        """getType(NeuroScan self) -> std::string const &"""
        return _moose.NeuroScan_getType(self)

    def __get_VDiv(self):
        """__get_VDiv(NeuroScan self) -> int"""
        return _moose.NeuroScan___get_VDiv(self)

    def __set_VDiv(self, *args):
        """__set_VDiv(NeuroScan self, int VDiv)"""
        return _moose.NeuroScan___set_VDiv(self, *args)

    def __get_VMin(self):
        """__get_VMin(NeuroScan self) -> double"""
        return _moose.NeuroScan___get_VMin(self)

    def __set_VMin(self, *args):
        """__set_VMin(NeuroScan self, double VMin)"""
        return _moose.NeuroScan___set_VMin(self, *args)

    def __get_VMax(self):
        """__get_VMax(NeuroScan self) -> double"""
        return _moose.NeuroScan___get_VMax(self)

    def __set_VMax(self, *args):
        """__set_VMax(NeuroScan self, double VMax)"""
        return _moose.NeuroScan___set_VMax(self, *args)

    def __get_CaDiv(self):
        """__get_CaDiv(NeuroScan self) -> int"""
        return _moose.NeuroScan___get_CaDiv(self)

    def __set_CaDiv(self, *args):
        """__set_CaDiv(NeuroScan self, int CaDiv)"""
        return _moose.NeuroScan___set_CaDiv(self, *args)

    def __get_CaMin(self):
        """__get_CaMin(NeuroScan self) -> double"""
        return _moose.NeuroScan___get_CaMin(self)

    def __set_CaMin(self, *args):
        """__set_CaMin(NeuroScan self, double CaMin)"""
        return _moose.NeuroScan___set_CaMin(self, *args)

    def __get_CaMax(self):
        """__get_CaMax(NeuroScan self) -> double"""
        return _moose.NeuroScan___get_CaMax(self)

    def __set_CaMax(self, *args):
        """__set_CaMax(NeuroScan self, double CaMax)"""
        return _moose.NeuroScan___set_CaMax(self, *args)

    VDiv = _swig_property(_moose.NeuroScan_VDiv_get, _moose.NeuroScan_VDiv_set)
    VMin = _swig_property(_moose.NeuroScan_VMin_get, _moose.NeuroScan_VMin_set)
    VMax = _swig_property(_moose.NeuroScan_VMax_get, _moose.NeuroScan_VMax_set)
    CaDiv = _swig_property(_moose.NeuroScan_CaDiv_get, _moose.NeuroScan_CaDiv_set)
    CaMin = _swig_property(_moose.NeuroScan_CaMin_get, _moose.NeuroScan_CaMin_set)
    CaMax = _swig_property(_moose.NeuroScan_CaMax_get, _moose.NeuroScan_CaMax_set)
NeuroScan_swigregister = _moose.NeuroScan_swigregister
NeuroScan_swigregister(NeuroScan)

class HSolve(Neutral):
    """Proxy of C++ pymoose::HSolve class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::HSolve self, Id id) -> HSolve
        __init__(pymoose::HSolve self, std::string path) -> HSolve
        __init__(pymoose::HSolve self, std::string name, Id parentId) -> HSolve
        __init__(pymoose::HSolve self, std::string name, PyMooseBase parent) -> HSolve
        __init__(pymoose::HSolve self, HSolve src, std::string name, PyMooseBase parent) -> HSolve
        __init__(pymoose::HSolve self, HSolve src, std::string name, Id parent) -> HSolve
        __init__(pymoose::HSolve self, HSolve src, std::string path) -> HSolve
        __init__(pymoose::HSolve self, Id src, std::string name, Id parent) -> HSolve
        __init__(pymoose::HSolve self, Id src, std::string path) -> HSolve
        """
        this = _moose.new_HSolve(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_HSolve
    __del__ = lambda self : None;
    def getType(self):
        """getType(HSolve self) -> std::string const &"""
        return _moose.HSolve_getType(self)

    def __get_seed_path(self):
        """__get_seed_path(HSolve self) -> std::string const"""
        return _moose.HSolve___get_seed_path(self)

    def __set_seed_path(self, *args):
        """__set_seed_path(HSolve self, std::string path)"""
        return _moose.HSolve___set_seed_path(self, *args)

    def __get_NDiv(self):
        """__get_NDiv(HSolve self) -> int"""
        return _moose.HSolve___get_NDiv(self)

    def __set_NDiv(self, *args):
        """__set_NDiv(HSolve self, int NDiv)"""
        return _moose.HSolve___set_NDiv(self, *args)

    def __get_VLo(self):
        """__get_VLo(HSolve self) -> double"""
        return _moose.HSolve___get_VLo(self)

    def __set_VLo(self, *args):
        """__set_VLo(HSolve self, double VLo)"""
        return _moose.HSolve___set_VLo(self, *args)

    def __get_VHi(self):
        """__get_VHi(HSolve self) -> double"""
        return _moose.HSolve___get_VHi(self)

    def __set_VHi(self, *args):
        """__set_VHi(HSolve self, double VHi)"""
        return _moose.HSolve___set_VHi(self, *args)

    seedPath = _swig_property(_moose.HSolve_seedPath_get, _moose.HSolve_seedPath_set)
    NDiv = _swig_property(_moose.HSolve_NDiv_get, _moose.HSolve_NDiv_set)
    VLo = _swig_property(_moose.HSolve_VLo_get, _moose.HSolve_VLo_set)
    VHi = _swig_property(_moose.HSolve_VHi_get, _moose.HSolve_VHi_set)
HSolve_swigregister = _moose.HSolve_swigregister
HSolve_swigregister(HSolve)

class Kintegrator(Neutral):
    """Proxy of C++ pymoose::Kintegrator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Kintegrator self, Id id) -> Kintegrator
        __init__(pymoose::Kintegrator self, std::string path) -> Kintegrator
        __init__(pymoose::Kintegrator self, std::string name, Id parentId) -> Kintegrator
        __init__(pymoose::Kintegrator self, std::string name, PyMooseBase parent) -> Kintegrator
        __init__(pymoose::Kintegrator self, Kintegrator src, std::string name, PyMooseBase parent) -> Kintegrator
        __init__(pymoose::Kintegrator self, Kintegrator src, std::string name, Id parent) -> Kintegrator
        __init__(pymoose::Kintegrator self, Kintegrator src, std::string path) -> Kintegrator
        __init__(pymoose::Kintegrator self, Id src, std::string name, Id parent) -> Kintegrator
        __init__(pymoose::Kintegrator self, Id src, std::string path) -> Kintegrator
        """
        this = _moose.new_Kintegrator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Kintegrator
    __del__ = lambda self : None;
    def getType(self):
        """getType(Kintegrator self) -> std::string const &"""
        return _moose.Kintegrator_getType(self)

    def __get_isInitiatilized(self):
        """__get_isInitiatilized(Kintegrator self) -> bool"""
        return _moose.Kintegrator___get_isInitiatilized(self)

    def __get_method(self):
        """__get_method(Kintegrator self) -> std::string"""
        return _moose.Kintegrator___get_method(self)

    def __set_method(self, *args):
        """__set_method(Kintegrator self, std::string method)"""
        return _moose.Kintegrator___set_method(self, *args)

    isInitiatilized = _swig_property(_moose.Kintegrator_isInitiatilized_get)
    integrate_method = _swig_property(_moose.Kintegrator_integrate_method_get, _moose.Kintegrator_integrate_method_set)
Kintegrator_swigregister = _moose.Kintegrator_swigregister
Kintegrator_swigregister(Kintegrator)

class SteadyState(Neutral):
    """Proxy of C++ pymoose::SteadyState class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::SteadyState self, Id id) -> SteadyState
        __init__(pymoose::SteadyState self, std::string path) -> SteadyState
        __init__(pymoose::SteadyState self, std::string name, Id parentId) -> SteadyState
        __init__(pymoose::SteadyState self, std::string name, PyMooseBase parent) -> SteadyState
        __init__(pymoose::SteadyState self, SteadyState src, std::string name, PyMooseBase parent) -> SteadyState
        __init__(pymoose::SteadyState self, SteadyState src, std::string name, Id parent) -> SteadyState
        __init__(pymoose::SteadyState self, SteadyState src, std::string path) -> SteadyState
        __init__(pymoose::SteadyState self, Id src, std::string name, Id parent) -> SteadyState
        __init__(pymoose::SteadyState self, Id src, std::string path) -> SteadyState
        """
        this = _moose.new_SteadyState(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_SteadyState
    __del__ = lambda self : None;
    def getType(self):
        """getType(SteadyState self) -> std::string const &"""
        return _moose.SteadyState_getType(self)

    def __get_badStoichiometry(self):
        """__get_badStoichiometry(SteadyState self) -> bool"""
        return _moose.SteadyState___get_badStoichiometry(self)

    def __get_isInitialized(self):
        """__get_isInitialized(SteadyState self) -> bool"""
        return _moose.SteadyState___get_isInitialized(self)

    def __get_nIter(self):
        """__get_nIter(SteadyState self) -> unsigned int"""
        return _moose.SteadyState___get_nIter(self)

    def __get_status(self):
        """__get_status(SteadyState self) -> std::string const &"""
        return _moose.SteadyState___get_status(self)

    def __get_maxIter(self):
        """__get_maxIter(SteadyState self) -> unsigned int"""
        return _moose.SteadyState___get_maxIter(self)

    def __set_maxIter(self, *args):
        """__set_maxIter(SteadyState self, unsigned int maxIter)"""
        return _moose.SteadyState___set_maxIter(self, *args)

    def __get_convergenceCriterion(self):
        """__get_convergenceCriterion(SteadyState self) -> double"""
        return _moose.SteadyState___get_convergenceCriterion(self)

    def __set_convergenceCriterion(self, *args):
        """__set_convergenceCriterion(SteadyState self, double convergenceCriterion)"""
        return _moose.SteadyState___set_convergenceCriterion(self, *args)

    def __get_nVarMols(self):
        """__get_nVarMols(SteadyState self) -> unsigned int"""
        return _moose.SteadyState___get_nVarMols(self)

    def __get_rank(self):
        """__get_rank(SteadyState self) -> unsigned int"""
        return _moose.SteadyState___get_rank(self)

    def __get_stateType(self):
        """__get_stateType(SteadyState self) -> unsigned int"""
        return _moose.SteadyState___get_stateType(self)

    def __get_nNegEigenvalues(self):
        """__get_nNegEigenvalues(SteadyState self) -> unsigned int"""
        return _moose.SteadyState___get_nNegEigenvalues(self)

    def __get_nPosEigenvalues(self):
        """__get_nPosEigenvalues(SteadyState self) -> unsigned int"""
        return _moose.SteadyState___get_nPosEigenvalues(self)

    def __get_solutionStatus(self):
        """__get_solutionStatus(SteadyState self) -> unsigned int"""
        return _moose.SteadyState___get_solutionStatus(self)

    badStoichiometry = _swig_property(_moose.SteadyState_badStoichiometry_get)
    isInitialized = _swig_property(_moose.SteadyState_isInitialized_get)
    nIter = _swig_property(_moose.SteadyState_nIter_get)
    status = _swig_property(_moose.SteadyState_status_get)
    maxIter = _swig_property(_moose.SteadyState_maxIter_get, _moose.SteadyState_maxIter_set)
    convergenceCriterion = _swig_property(_moose.SteadyState_convergenceCriterion_get, _moose.SteadyState_convergenceCriterion_set)
    nVarMols = _swig_property(_moose.SteadyState_nVarMols_get)
    rank = _swig_property(_moose.SteadyState_rank_get)
    stateType = _swig_property(_moose.SteadyState_stateType_get)
    nNegEigenvalues = _swig_property(_moose.SteadyState_nNegEigenvalues_get)
    nPosEigenvalues = _swig_property(_moose.SteadyState_nPosEigenvalues_get)
    solutionStatus = _swig_property(_moose.SteadyState_solutionStatus_get)
SteadyState_swigregister = _moose.SteadyState_swigregister
SteadyState_swigregister(SteadyState)

class MathFunc(Neutral):
    """Proxy of C++ pymoose::MathFunc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::MathFunc self, Id id) -> MathFunc
        __init__(pymoose::MathFunc self, std::string path) -> MathFunc
        __init__(pymoose::MathFunc self, std::string name, Id parentId) -> MathFunc
        __init__(pymoose::MathFunc self, std::string name, PyMooseBase parent) -> MathFunc
        __init__(pymoose::MathFunc self, MathFunc src, std::string name, PyMooseBase parent) -> MathFunc
        __init__(pymoose::MathFunc self, MathFunc src, std::string name, Id parent) -> MathFunc
        __init__(pymoose::MathFunc self, MathFunc src, std::string path) -> MathFunc
        __init__(pymoose::MathFunc self, Id src, std::string name, Id parent) -> MathFunc
        __init__(pymoose::MathFunc self, Id src, std::string path) -> MathFunc
        """
        this = _moose.new_MathFunc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_MathFunc
    __del__ = lambda self : None;
    def getType(self):
        """getType(MathFunc self) -> std::string const &"""
        return _moose.MathFunc_getType(self)

    def __get_mathML(self):
        """__get_mathML(MathFunc self) -> std::string"""
        return _moose.MathFunc___get_mathML(self)

    def __set_mathML(self, *args):
        """__set_mathML(MathFunc self, std::string mathML)"""
        return _moose.MathFunc___set_mathML(self, *args)

    def __get_function(self):
        """__get_function(MathFunc self) -> std::string"""
        return _moose.MathFunc___get_function(self)

    def __set_function(self, *args):
        """__set_function(MathFunc self, std::string function)"""
        return _moose.MathFunc___set_function(self, *args)

    def __get_result(self):
        """__get_result(MathFunc self) -> double"""
        return _moose.MathFunc___get_result(self)

    def __set_result(self, *args):
        """__set_result(MathFunc self, double result)"""
        return _moose.MathFunc___set_result(self, *args)

    mathML = _swig_property(_moose.MathFunc_mathML_get, _moose.MathFunc_mathML_set)
    function = _swig_property(_moose.MathFunc_function_get, _moose.MathFunc_function_set)
    result = _swig_property(_moose.MathFunc_result_get, _moose.MathFunc_result_set)
MathFunc_swigregister = _moose.MathFunc_swigregister
MathFunc_swigregister(MathFunc)

class Stoich(Neutral):
    """Proxy of C++ pymoose::Stoich class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Stoich self, std::string className, std::string name, Id parentId) -> Stoich
        __init__(pymoose::Stoich self, std::string className, std::string path) -> Stoich
        __init__(pymoose::Stoich self, std::string className, std::string objectName, PyMooseBase parent) -> Stoich
        __init__(pymoose::Stoich self, Id id) -> Stoich
        __init__(pymoose::Stoich self, std::string path) -> Stoich
        __init__(pymoose::Stoich self, std::string name, Id parentId) -> Stoich
        __init__(pymoose::Stoich self, std::string name, PyMooseBase parent) -> Stoich
        __init__(pymoose::Stoich self, Stoich src, std::string name, PyMooseBase parent) -> Stoich
        __init__(pymoose::Stoich self, Stoich src, std::string name, Id parent) -> Stoich
        __init__(pymoose::Stoich self, Stoich src, std::string path) -> Stoich
        __init__(pymoose::Stoich self, Id src, std::string name, Id parent) -> Stoich
        __init__(pymoose::Stoich self, Id src, std::string path) -> Stoich
        """
        this = _moose.new_Stoich(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Stoich
    __del__ = lambda self : None;
    def getType(self):
        """getType(Stoich self) -> std::string const &"""
        return _moose.Stoich_getType(self)

    def __get_nMols(self):
        """__get_nMols(Stoich self) -> unsigned int"""
        return _moose.Stoich___get_nMols(self)

    def __get_nVarMols(self):
        """__get_nVarMols(Stoich self) -> unsigned int"""
        return _moose.Stoich___get_nVarMols(self)

    def __get_nSumTot(self):
        """__get_nSumTot(Stoich self) -> unsigned int"""
        return _moose.Stoich___get_nSumTot(self)

    def __get_nBuffered(self):
        """__get_nBuffered(Stoich self) -> unsigned int"""
        return _moose.Stoich___get_nBuffered(self)

    def __get_nReacs(self):
        """__get_nReacs(Stoich self) -> unsigned int"""
        return _moose.Stoich___get_nReacs(self)

    def __get_nEnz(self):
        """__get_nEnz(Stoich self) -> unsigned int"""
        return _moose.Stoich___get_nEnz(self)

    def __get_nMMenz(self):
        """__get_nMMenz(Stoich self) -> unsigned int"""
        return _moose.Stoich___get_nMMenz(self)

    def __get_nExternalRates(self):
        """__get_nExternalRates(Stoich self) -> unsigned int"""
        return _moose.Stoich___get_nExternalRates(self)

    def __get_useOneWayReacs(self):
        """__get_useOneWayReacs(Stoich self) -> bool"""
        return _moose.Stoich___get_useOneWayReacs(self)

    def __set_useOneWayReacs(self, *args):
        """__set_useOneWayReacs(Stoich self, bool useOneWayReacs)"""
        return _moose.Stoich___set_useOneWayReacs(self, *args)

    def __get_targetPath(self):
        """__get_targetPath(Stoich self) -> std::string"""
        return _moose.Stoich___get_targetPath(self)

    def __set_targetPath(self, *args):
        """__set_targetPath(Stoich self, std::string path)"""
        return _moose.Stoich___set_targetPath(self, *args)

    def __get_pathVec(self):
        """__get_pathVec(Stoich self) -> Id_vector"""
        return _moose.Stoich___get_pathVec(self)

    def __get_rateVectorSize(self):
        """__get_rateVectorSize(Stoich self) -> unsigned int"""
        return _moose.Stoich___get_rateVectorSize(self)

    nMols = _swig_property(_moose.Stoich_nMols_get)
    nVarMols = _swig_property(_moose.Stoich_nVarMols_get)
    nSumTot = _swig_property(_moose.Stoich_nSumTot_get)
    nBuffered = _swig_property(_moose.Stoich_nBuffered_get)
    nReacs = _swig_property(_moose.Stoich_nReacs_get)
    nEnz = _swig_property(_moose.Stoich_nEnz_get)
    nMMenz = _swig_property(_moose.Stoich_nMMenz_get)
    nExternalRates = _swig_property(_moose.Stoich_nExternalRates_get)
    useOneWayReacs = _swig_property(_moose.Stoich_useOneWayReacs_get, _moose.Stoich_useOneWayReacs_set)
    targetPath = _swig_property(_moose.Stoich_targetPath_get, _moose.Stoich_targetPath_set)
    rateVectorSize = _swig_property(_moose.Stoich_rateVectorSize_get)
    pathVec = _swig_property(_moose.Stoich_pathVec_get)
Stoich_swigregister = _moose.Stoich_swigregister
Stoich_swigregister(Stoich)

class KineticHub(Neutral):
    """Proxy of C++ pymoose::KineticHub class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::KineticHub self, Id id) -> KineticHub
        __init__(pymoose::KineticHub self, std::string path) -> KineticHub
        __init__(pymoose::KineticHub self, std::string name, Id parentId) -> KineticHub
        __init__(pymoose::KineticHub self, std::string name, PyMooseBase parent) -> KineticHub
        __init__(pymoose::KineticHub self, KineticHub src, std::string name, PyMooseBase parent) -> KineticHub
        __init__(pymoose::KineticHub self, KineticHub src, std::string name, Id parent) -> KineticHub
        __init__(pymoose::KineticHub self, KineticHub src, std::string path) -> KineticHub
        __init__(pymoose::KineticHub self, Id src, std::string name, Id parent) -> KineticHub
        __init__(pymoose::KineticHub self, Id src, std::string path) -> KineticHub
        """
        this = _moose.new_KineticHub(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_KineticHub
    __del__ = lambda self : None;
    def getType(self):
        """getType(KineticHub self) -> std::string const &"""
        return _moose.KineticHub_getType(self)

    def __get_nVarMol(self):
        """__get_nVarMol(KineticHub self) -> unsigned int"""
        return _moose.KineticHub___get_nVarMol(self)

    def __get_nReac(self):
        """__get_nReac(KineticHub self) -> unsigned int"""
        return _moose.KineticHub___get_nReac(self)

    def __get_nEnz(self):
        """__get_nEnz(KineticHub self) -> unsigned int"""
        return _moose.KineticHub___get_nEnz(self)

    def __get_zombifySeparate(self):
        """__get_zombifySeparate(KineticHub self) -> bool"""
        return _moose.KineticHub___get_zombifySeparate(self)

    def __set_zombifySeparate(self, *args):
        """__set_zombifySeparate(KineticHub self, bool zombifySeparate)"""
        return _moose.KineticHub___set_zombifySeparate(self, *args)

    nVarMol = _swig_property(_moose.KineticHub_nVarMol_get)
    nReac = _swig_property(_moose.KineticHub_nReac_get)
    nEnz = _swig_property(_moose.KineticHub_nEnz_get)
    zombifySeparate = _swig_property(_moose.KineticHub_zombifySeparate_get, _moose.KineticHub_zombifySeparate_set)
KineticHub_swigregister = _moose.KineticHub_swigregister
KineticHub_swigregister(KineticHub)

class GslIntegrator(Neutral):
    """Proxy of C++ pymoose::GslIntegrator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::GslIntegrator self, std::string className, std::string objectName, Id parentId) -> GslIntegrator
        __init__(pymoose::GslIntegrator self, std::string className, std::string path) -> GslIntegrator
        __init__(pymoose::GslIntegrator self, std::string className, std::string objectName, PyMooseBase parent) -> GslIntegrator
        __init__(pymoose::GslIntegrator self, Id id) -> GslIntegrator
        __init__(pymoose::GslIntegrator self, std::string path) -> GslIntegrator
        __init__(pymoose::GslIntegrator self, std::string name, Id parentId) -> GslIntegrator
        __init__(pymoose::GslIntegrator self, std::string name, PyMooseBase parent) -> GslIntegrator
        __init__(pymoose::GslIntegrator self, GslIntegrator src, std::string name, PyMooseBase parent) -> GslIntegrator
        __init__(pymoose::GslIntegrator self, GslIntegrator src, std::string name, Id parent) -> GslIntegrator
        __init__(pymoose::GslIntegrator self, GslIntegrator src, std::string path) -> GslIntegrator
        __init__(pymoose::GslIntegrator self, Id src, std::string name, Id parent) -> GslIntegrator
        __init__(pymoose::GslIntegrator self, Id src, std::string path) -> GslIntegrator
        """
        this = _moose.new_GslIntegrator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_GslIntegrator
    __del__ = lambda self : None;
    def getType(self):
        """getType(GslIntegrator self) -> std::string const &"""
        return _moose.GslIntegrator_getType(self)

    def __get_isInitiatilized(self):
        """__get_isInitiatilized(GslIntegrator self) -> bool"""
        return _moose.GslIntegrator___get_isInitiatilized(self)

    def __get_method(self):
        """__get_method(GslIntegrator self) -> std::string const &"""
        return _moose.GslIntegrator___get_method(self)

    def __set_method(self, *args):
        """__set_method(GslIntegrator self, std::string method)"""
        return _moose.GslIntegrator___set_method(self, *args)

    def __get_relativeAccuracy(self):
        """__get_relativeAccuracy(GslIntegrator self) -> double"""
        return _moose.GslIntegrator___get_relativeAccuracy(self)

    def __set_relativeAccuracy(self, *args):
        """__set_relativeAccuracy(GslIntegrator self, double relativeAccuracy)"""
        return _moose.GslIntegrator___set_relativeAccuracy(self, *args)

    def __get_absoluteAccuracy(self):
        """__get_absoluteAccuracy(GslIntegrator self) -> double"""
        return _moose.GslIntegrator___get_absoluteAccuracy(self)

    def __set_absoluteAccuracy(self, *args):
        """__set_absoluteAccuracy(GslIntegrator self, double absoluteAccuracy)"""
        return _moose.GslIntegrator___set_absoluteAccuracy(self, *args)

    def __get_internalDt(self):
        """__get_internalDt(GslIntegrator self) -> double"""
        return _moose.GslIntegrator___get_internalDt(self)

    def __set_internalDt(self, *args):
        """__set_internalDt(GslIntegrator self, double internalDt)"""
        return _moose.GslIntegrator___set_internalDt(self, *args)

    isInitiatilized = _swig_property(_moose.GslIntegrator_isInitiatilized_get)
    method = _swig_property(_moose.GslIntegrator_method_get, _moose.GslIntegrator_method_set)
    relativeAccuracy = _swig_property(_moose.GslIntegrator_relativeAccuracy_get, _moose.GslIntegrator_relativeAccuracy_set)
    absoluteAccuracy = _swig_property(_moose.GslIntegrator_absoluteAccuracy_get, _moose.GslIntegrator_absoluteAccuracy_set)
    internalDt = _swig_property(_moose.GslIntegrator_internalDt_get, _moose.GslIntegrator_internalDt_set)
GslIntegrator_swigregister = _moose.GslIntegrator_swigregister
GslIntegrator_swigregister(GslIntegrator)

class Enzyme(Neutral):
    """Proxy of C++ pymoose::Enzyme class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Enzyme self, Id id) -> Enzyme
        __init__(pymoose::Enzyme self, std::string path) -> Enzyme
        __init__(pymoose::Enzyme self, std::string name, Id parentId) -> Enzyme
        __init__(pymoose::Enzyme self, std::string name, PyMooseBase parent) -> Enzyme
        __init__(pymoose::Enzyme self, Enzyme src, std::string name, PyMooseBase parent) -> Enzyme
        __init__(pymoose::Enzyme self, Enzyme src, std::string name, Id parent) -> Enzyme
        __init__(pymoose::Enzyme self, Id src, std::string name, Id parent) -> Enzyme
        __init__(pymoose::Enzyme self, Enzyme src, std::string path) -> Enzyme
        __init__(pymoose::Enzyme self, Id src, std::string path) -> Enzyme
        """
        this = _moose.new_Enzyme(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Enzyme
    __del__ = lambda self : None;
    def getType(self):
        """getType(Enzyme self) -> std::string const &"""
        return _moose.Enzyme_getType(self)

    def __get_k1(self):
        """__get_k1(Enzyme self) -> double"""
        return _moose.Enzyme___get_k1(self)

    def __set_k1(self, *args):
        """__set_k1(Enzyme self, double k1)"""
        return _moose.Enzyme___set_k1(self, *args)

    def __get_k2(self):
        """__get_k2(Enzyme self) -> double"""
        return _moose.Enzyme___get_k2(self)

    def __set_k2(self, *args):
        """__set_k2(Enzyme self, double k2)"""
        return _moose.Enzyme___set_k2(self, *args)

    def __get_k3(self):
        """__get_k3(Enzyme self) -> double"""
        return _moose.Enzyme___get_k3(self)

    def __set_k3(self, *args):
        """__set_k3(Enzyme self, double k3)"""
        return _moose.Enzyme___set_k3(self, *args)

    def __get_Km(self):
        """__get_Km(Enzyme self) -> double"""
        return _moose.Enzyme___get_Km(self)

    def __set_Km(self, *args):
        """__set_Km(Enzyme self, double Km)"""
        return _moose.Enzyme___set_Km(self, *args)

    def __get_kcat(self):
        """__get_kcat(Enzyme self) -> double"""
        return _moose.Enzyme___get_kcat(self)

    def __set_kcat(self, *args):
        """__set_kcat(Enzyme self, double kcat)"""
        return _moose.Enzyme___set_kcat(self, *args)

    def __get_mode(self):
        """__get_mode(Enzyme self) -> bool"""
        return _moose.Enzyme___get_mode(self)

    def __set_mode(self, *args):
        """__set_mode(Enzyme self, bool mode)"""
        return _moose.Enzyme___set_mode(self, *args)

    def __get_scaleKm(self):
        """__get_scaleKm(Enzyme self) -> double"""
        return _moose.Enzyme___get_scaleKm(self)

    def __set_scaleKm(self, *args):
        """__set_scaleKm(Enzyme self, double scaleKm)"""
        return _moose.Enzyme___set_scaleKm(self, *args)

    def __get_scaleKcat(self):
        """__get_scaleKcat(Enzyme self) -> double"""
        return _moose.Enzyme___get_scaleKcat(self)

    def __set_scaleKcat(self, *args):
        """__set_scaleKcat(Enzyme self, double scaleKcat)"""
        return _moose.Enzyme___set_scaleKcat(self, *args)

    def __get_intramol(self):
        """__get_intramol(Enzyme self) -> double"""
        return _moose.Enzyme___get_intramol(self)

    def __set_intramol(self, *args):
        """__set_intramol(Enzyme self, double intramol)"""
        return _moose.Enzyme___set_intramol(self, *args)

    def __get_x(self):
        """__get_x(Enzyme self) -> double"""
        return _moose.Enzyme___get_x(self)

    def __set_x(self, *args):
        """__set_x(Enzyme self, double x)"""
        return _moose.Enzyme___set_x(self, *args)

    def __get_y(self):
        """__get_y(Enzyme self) -> double"""
        return _moose.Enzyme___get_y(self)

    def __set_y(self, *args):
        """__set_y(Enzyme self, double y)"""
        return _moose.Enzyme___set_y(self, *args)

    def __get_xtreeTextFg(self):
        """__get_xtreeTextFg(Enzyme self) -> std::string"""
        return _moose.Enzyme___get_xtreeTextFg(self)

    def __set_xtreeTextFg(self, *args):
        """__set_xtreeTextFg(Enzyme self, std::string xtreeTextFg)"""
        return _moose.Enzyme___set_xtreeTextFg(self, *args)

    k1 = _swig_property(_moose.Enzyme_k1_get, _moose.Enzyme_k1_set)
    k2 = _swig_property(_moose.Enzyme_k2_get, _moose.Enzyme_k2_set)
    k3 = _swig_property(_moose.Enzyme_k3_get, _moose.Enzyme_k3_set)
    Km = _swig_property(_moose.Enzyme_Km_get, _moose.Enzyme_Km_set)
    kcat = _swig_property(_moose.Enzyme_kcat_get, _moose.Enzyme_kcat_set)
    mode = _swig_property(_moose.Enzyme_mode_get, _moose.Enzyme_mode_set)
    x = _swig_property(_moose.Enzyme_x_get, _moose.Enzyme_x_set)
    y = _swig_property(_moose.Enzyme_y_get, _moose.Enzyme_y_set)
    xtreeTextFg = _swig_property(_moose.Enzyme_xtreeTextFg_get, _moose.Enzyme_xtreeTextFg_set)
Enzyme_swigregister = _moose.Enzyme_swigregister
Enzyme_swigregister(Enzyme)

class Reaction(Neutral):
    """Proxy of C++ pymoose::Reaction class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Reaction self, Id id) -> Reaction
        __init__(pymoose::Reaction self, std::string path) -> Reaction
        __init__(pymoose::Reaction self, std::string name, Id parentId) -> Reaction
        __init__(pymoose::Reaction self, std::string name, PyMooseBase parent) -> Reaction
        __init__(pymoose::Reaction self, Reaction src, std::string name, PyMooseBase parent) -> Reaction
        __init__(pymoose::Reaction self, Reaction src, std::string name, Id parent) -> Reaction
        __init__(pymoose::Reaction self, Reaction src, std::string path) -> Reaction
        __init__(pymoose::Reaction self, Id src, std::string name, Id parent) -> Reaction
        __init__(pymoose::Reaction self, Id src, std::string path) -> Reaction
        """
        this = _moose.new_Reaction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Reaction
    __del__ = lambda self : None;
    def getType(self):
        """getType(Reaction self) -> std::string const &"""
        return _moose.Reaction_getType(self)

    def __get_kf(self):
        """__get_kf(Reaction self) -> double"""
        return _moose.Reaction___get_kf(self)

    def __set_kf(self, *args):
        """__set_kf(Reaction self, double scaleKf)"""
        return _moose.Reaction___set_kf(self, *args)

    def __get_kb(self):
        """__get_kb(Reaction self) -> double"""
        return _moose.Reaction___get_kb(self)

    def __set_kb(self, *args):
        """__set_kb(Reaction self, double scaleKb)"""
        return _moose.Reaction___set_kb(self, *args)

    def __get_Kf(self):
        """__get_Kf(Reaction self) -> double"""
        return _moose.Reaction___get_Kf(self)

    def __set_Kf(self, *args):
        """__set_Kf(Reaction self, double scaleKf)"""
        return _moose.Reaction___set_Kf(self, *args)

    def __get_Kb(self):
        """__get_Kb(Reaction self) -> double"""
        return _moose.Reaction___get_Kb(self)

    def __set_Kb(self, *args):
        """__set_Kb(Reaction self, double scaleKb)"""
        return _moose.Reaction___set_Kb(self, *args)

    def __get_x(self):
        """__get_x(Reaction self) -> double"""
        return _moose.Reaction___get_x(self)

    def __set_x(self, *args):
        """__set_x(Reaction self, double x)"""
        return _moose.Reaction___set_x(self, *args)

    def __get_y(self):
        """__get_y(Reaction self) -> double"""
        return _moose.Reaction___get_y(self)

    def __set_y(self, *args):
        """__set_y(Reaction self, double y)"""
        return _moose.Reaction___set_y(self, *args)

    def __get_xtreeTextFg(self):
        """__get_xtreeTextFg(Reaction self) -> std::string"""
        return _moose.Reaction___get_xtreeTextFg(self)

    def __set_xtreeTextFg(self, *args):
        """__set_xtreeTextFg(Reaction self, std::string xtreeTextFg)"""
        return _moose.Reaction___set_xtreeTextFg(self, *args)

    kf = _swig_property(_moose.Reaction_kf_get, _moose.Reaction_kf_set)
    kb = _swig_property(_moose.Reaction_kb_get, _moose.Reaction_kb_set)
    Kf = _swig_property(_moose.Reaction_Kf_get, _moose.Reaction_Kf_set)
    Kb = _swig_property(_moose.Reaction_Kb_get, _moose.Reaction_Kb_set)
    x = _swig_property(_moose.Reaction_x_get, _moose.Reaction_x_set)
    y = _swig_property(_moose.Reaction_y_get, _moose.Reaction_y_set)
    xtreeTextFg = _swig_property(_moose.Reaction_xtreeTextFg_get, _moose.Reaction_xtreeTextFg_set)
Reaction_swigregister = _moose.Reaction_swigregister
Reaction_swigregister(Reaction)

class Molecule(Neutral):
    """Proxy of C++ pymoose::Molecule class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Molecule self, Id id) -> Molecule
        __init__(pymoose::Molecule self, std::string path) -> Molecule
        __init__(pymoose::Molecule self, std::string name, Id parentId) -> Molecule
        __init__(pymoose::Molecule self, std::string name, PyMooseBase parent) -> Molecule
        __init__(pymoose::Molecule self, Molecule src, std::string name, PyMooseBase parent) -> Molecule
        __init__(pymoose::Molecule self, Molecule src, std::string name, Id parent) -> Molecule
        __init__(pymoose::Molecule self, Molecule src, std::string path) -> Molecule
        __init__(pymoose::Molecule self, Id src, std::string name, Id parent) -> Molecule
        __init__(pymoose::Molecule self, Id src, std::string path) -> Molecule
        """
        this = _moose.new_Molecule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Molecule
    __del__ = lambda self : None;
    def getType(self):
        """getType(Molecule self) -> std::string const &"""
        return _moose.Molecule_getType(self)

    def __get_nInit(self):
        """__get_nInit(Molecule self) -> double"""
        return _moose.Molecule___get_nInit(self)

    def __set_nInit(self, *args):
        """__set_nInit(Molecule self, double nInit)"""
        return _moose.Molecule___set_nInit(self, *args)

    def __get_volumeScale(self):
        """__get_volumeScale(Molecule self) -> double"""
        return _moose.Molecule___get_volumeScale(self)

    def __set_volumeScale(self, *args):
        """__set_volumeScale(Molecule self, double volumeScale)"""
        return _moose.Molecule___set_volumeScale(self, *args)

    def __get_n(self):
        """__get_n(Molecule self) -> double"""
        return _moose.Molecule___get_n(self)

    def __set_n(self, *args):
        """__set_n(Molecule self, double n)"""
        return _moose.Molecule___set_n(self, *args)

    def __get_mode(self):
        """__get_mode(Molecule self) -> int"""
        return _moose.Molecule___get_mode(self)

    def __set_mode(self, *args):
        """__set_mode(Molecule self, int mode)"""
        return _moose.Molecule___set_mode(self, *args)

    def __get_slave_enable(self):
        """__get_slave_enable(Molecule self) -> int"""
        return _moose.Molecule___get_slave_enable(self)

    def __set_slave_enable(self, *args):
        """__set_slave_enable(Molecule self, int slave_enable)"""
        return _moose.Molecule___set_slave_enable(self, *args)

    def __get_conc(self):
        """__get_conc(Molecule self) -> double"""
        return _moose.Molecule___get_conc(self)

    def __set_conc(self, *args):
        """__set_conc(Molecule self, double conc)"""
        return _moose.Molecule___set_conc(self, *args)

    def __get_concInit(self):
        """__get_concInit(Molecule self) -> double"""
        return _moose.Molecule___get_concInit(self)

    def __set_concInit(self, *args):
        """__set_concInit(Molecule self, double concInit)"""
        return _moose.Molecule___set_concInit(self, *args)

    def __get_nSrc(self):
        """__get_nSrc(Molecule self) -> double"""
        return _moose.Molecule___get_nSrc(self)

    def __set_nSrc(self, *args):
        """__set_nSrc(Molecule self, double nSrc)"""
        return _moose.Molecule___set_nSrc(self, *args)

    def __get_sumTotal(self):
        """__get_sumTotal(Molecule self) -> double"""
        return _moose.Molecule___get_sumTotal(self)

    def __set_sumTotal(self, *args):
        """__set_sumTotal(Molecule self, double sumTotal)"""
        return _moose.Molecule___set_sumTotal(self, *args)

    def __get_x(self):
        """__get_x(Molecule self) -> double"""
        return _moose.Molecule___get_x(self)

    def __set_x(self, *args):
        """__set_x(Molecule self, double x)"""
        return _moose.Molecule___set_x(self, *args)

    def __get_y(self):
        """__get_y(Molecule self) -> double"""
        return _moose.Molecule___get_y(self)

    def __set_y(self, *args):
        """__set_y(Molecule self, double y)"""
        return _moose.Molecule___set_y(self, *args)

    def __get_D(self):
        """__get_D(Molecule self) -> double"""
        return _moose.Molecule___get_D(self)

    def __set_D(self, *args):
        """__set_D(Molecule self, double d)"""
        return _moose.Molecule___set_D(self, *args)

    def __get_xtreeTextFg(self):
        """__get_xtreeTextFg(Molecule self) -> std::string"""
        return _moose.Molecule___get_xtreeTextFg(self)

    def __set_xtreeTextFg(self, *args):
        """__set_xtreeTextFg(Molecule self, std::string xtreeTextFg)"""
        return _moose.Molecule___set_xtreeTextFg(self, *args)

    D = _swig_property(_moose.Molecule_D_get, _moose.Molecule_D_set)
    nInit = _swig_property(_moose.Molecule_nInit_get, _moose.Molecule_nInit_set)
    volumeScale = _swig_property(_moose.Molecule_volumeScale_get, _moose.Molecule_volumeScale_set)
    n = _swig_property(_moose.Molecule_n_get, _moose.Molecule_n_set)
    mode = _swig_property(_moose.Molecule_mode_get, _moose.Molecule_mode_set)
    slave_enable = _swig_property(_moose.Molecule_slave_enable_get, _moose.Molecule_slave_enable_set)
    conc = _swig_property(_moose.Molecule_conc_get, _moose.Molecule_conc_set)
    concInit = _swig_property(_moose.Molecule_concInit_get, _moose.Molecule_concInit_set)
    nSrc = _swig_property(_moose.Molecule_nSrc_get, _moose.Molecule_nSrc_set)
    sumTotal = _swig_property(_moose.Molecule_sumTotal_get, _moose.Molecule_sumTotal_set)
    x = _swig_property(_moose.Molecule_x_get, _moose.Molecule_x_set)
    y = _swig_property(_moose.Molecule_y_get, _moose.Molecule_y_set)
    xtreeTextFg = _swig_property(_moose.Molecule_xtreeTextFg_get, _moose.Molecule_xtreeTextFg_set)
Molecule_swigregister = _moose.Molecule_swigregister
Molecule_swigregister(Molecule)


def mtrand():
  """mtrand() -> double"""
  return _moose.mtrand()

def mtseed(*args):
  """mtseed(long seed)"""
  return _moose.mtseed(*args)

def genrand_int32():
  """genrand_int32() -> unsigned long"""
  return _moose.genrand_int32()
class Probability(object):
    """Proxy of C++ Probability class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _moose.delete_Probability
    __del__ = lambda self : None;
    def getMean(self):
        """getMean(Probability self) -> double"""
        return _moose.Probability_getMean(self)

    def getVariance(self):
        """getVariance(Probability self) -> double"""
        return _moose.Probability_getVariance(self)

    def getNextSample(self):
        """getNextSample(Probability self) -> double"""
        return _moose.Probability_getNextSample(self)

Probability_swigregister = _moose.Probability_swigregister
Probability_swigregister(Probability)

class Binomial(Probability):
    """Proxy of C++ Binomial class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Binomial self) -> Binomial
        __init__(Binomial self, long n, double p) -> Binomial
        """
        this = _moose.new_Binomial(*args)
        try: self.this.append(this)
        except: self.this = this
    def getN(self):
        """getN(Binomial self) -> long"""
        return _moose.Binomial_getN(self)

    def getP(self):
        """getP(Binomial self) -> double"""
        return _moose.Binomial_getP(self)

    def getMean(self):
        """getMean(Binomial self) -> double"""
        return _moose.Binomial_getMean(self)

    def getVariance(self):
        """getVariance(Binomial self) -> double"""
        return _moose.Binomial_getVariance(self)

    def getNextSample(self):
        """getNextSample(Binomial self) -> double"""
        return _moose.Binomial_getNextSample(self)

    __swig_destroy__ = _moose.delete_Binomial
    __del__ = lambda self : None;
Binomial_swigregister = _moose.Binomial_swigregister
Binomial_swigregister(Binomial)

class Gamma(Probability):
    """Proxy of C++ Gamma class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Gamma self, double alpha, double theta) -> Gamma"""
        this = _moose.new_Gamma(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAlpha(self):
        """getAlpha(Gamma self) -> double"""
        return _moose.Gamma_getAlpha(self)

    def getTheta(self):
        """getTheta(Gamma self) -> double"""
        return _moose.Gamma_getTheta(self)

    def getMean(self):
        """getMean(Gamma self) -> double"""
        return _moose.Gamma_getMean(self)

    def getVariance(self):
        """getVariance(Gamma self) -> double"""
        return _moose.Gamma_getVariance(self)

    def getNextSample(self):
        """getNextSample(Gamma self) -> double"""
        return _moose.Gamma_getNextSample(self)

    __swig_destroy__ = _moose.delete_Gamma
    __del__ = lambda self : None;
Gamma_swigregister = _moose.Gamma_swigregister
Gamma_swigregister(Gamma)

ALIAS = _moose.ALIAS
BOX_MUELLER = _moose.BOX_MUELLER
ZIGGURAT = _moose.ZIGGURAT
class Normal(Probability):
    """Proxy of C++ Normal class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Normal self, double mean=0.0, double variance=1.0, NormalGenerator algorithm=ALIAS) -> Normal
        __init__(Normal self, double mean=0.0, double variance=1.0) -> Normal
        __init__(Normal self, double mean=0.0) -> Normal
        __init__(Normal self) -> Normal
        """
        this = _moose.new_Normal(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMean(self):
        """getMean(Normal self) -> double"""
        return _moose.Normal_getMean(self)

    def setMean(self, *args):
        """setMean(Normal self, double value)"""
        return _moose.Normal_setMean(self, *args)

    def getVariance(self):
        """getVariance(Normal self) -> double"""
        return _moose.Normal_getVariance(self)

    def setVariance(self, *args):
        """setVariance(Normal self, double value)"""
        return _moose.Normal_setVariance(self, *args)

    def getMethod(self):
        """getMethod(Normal self) -> NormalGenerator"""
        return _moose.Normal_getMethod(self)

    def setMethod(self, *args):
        """setMethod(Normal self, NormalGenerator method)"""
        return _moose.Normal_setMethod(self, *args)

    def getNextSample(self):
        """getNextSample(Normal self) -> double"""
        return _moose.Normal_getNextSample(self)

    __swig_destroy__ = _moose.delete_Normal
    __del__ = lambda self : None;
Normal_swigregister = _moose.Normal_swigregister
Normal_swigregister(Normal)

class Poisson(Probability):
    """Proxy of C++ Poisson class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, mean=1.0): 
        """
        __init__(Poisson self, double mean=1.0) -> Poisson
        __init__(Poisson self) -> Poisson
        """
        this = _moose.new_Poisson(mean)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Poisson
    __del__ = lambda self : None;
    def setMean(self, *args):
        """setMean(Poisson self, double mean)"""
        return _moose.Poisson_setMean(self, *args)

    def getMean(self):
        """getMean(Poisson self) -> double"""
        return _moose.Poisson_getMean(self)

    def getVariance(self):
        """getVariance(Poisson self) -> double"""
        return _moose.Poisson_getVariance(self)

    def getNextSample(self):
        """getNextSample(Poisson self) -> double"""
        return _moose.Poisson_getNextSample(self)

Poisson_swigregister = _moose.Poisson_swigregister
Poisson_swigregister(Poisson)

LOGARITHMIC = _moose.LOGARITHMIC
RANDOM_MINIMIZATION = _moose.RANDOM_MINIMIZATION
class Exponential(Probability):
    """Proxy of C++ Exponential class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Exponential self, double mean) -> Exponential
        __init__(Exponential self, ExponentialGenerator generator, double mean) -> Exponential
        """
        this = _moose.new_Exponential(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMean(self):
        """getMean(Exponential self) -> double"""
        return _moose.Exponential_getMean(self)

    def getVariance(self):
        """getVariance(Exponential self) -> double"""
        return _moose.Exponential_getVariance(self)

    def getNextSample(self):
        """getNextSample(Exponential self) -> double"""
        return _moose.Exponential_getNextSample(self)

    __swig_destroy__ = _moose.delete_Exponential
    __del__ = lambda self : None;
Exponential_swigregister = _moose.Exponential_swigregister
Exponential_swigregister(Exponential)

class RandGenerator(Neutral):
    """Proxy of C++ pymoose::RandGenerator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::RandGenerator self, Id id) -> RandGenerator
        __init__(pymoose::RandGenerator self, std::string className, std::string path) -> RandGenerator
        __init__(pymoose::RandGenerator self, std::string className, std::string name, Id parentId) -> RandGenerator
        __init__(pymoose::RandGenerator self, RandGenerator src, std::string name, PyMooseBase parent) -> RandGenerator
        __init__(pymoose::RandGenerator self, RandGenerator src, std::string name, Id parent) -> RandGenerator
        __init__(pymoose::RandGenerator self, Id src, std::string name, Id parent) -> RandGenerator
        __init__(pymoose::RandGenerator self, Id src, std::string path) -> RandGenerator
        __init__(pymoose::RandGenerator self, RandGenerator src, std::string path) -> RandGenerator
        __init__(pymoose::RandGenerator self, std::string className, std::string name, PyMooseBase parent) -> RandGenerator
        """
        this = _moose.new_RandGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(self):
        """getType(RandGenerator self) -> std::string const &"""
        return _moose.RandGenerator_getType(self)

    def __get_sample(self):
        """__get_sample(RandGenerator self) -> double"""
        return _moose.RandGenerator___get_sample(self)

    def __set_sample(self, *args):
        """__set_sample(RandGenerator self, double sample)"""
        return _moose.RandGenerator___set_sample(self, *args)

    def __get_mean(self):
        """__get_mean(RandGenerator self) -> double"""
        return _moose.RandGenerator___get_mean(self)

    def __set_mean(self, *args):
        """__set_mean(RandGenerator self, double mean)"""
        return _moose.RandGenerator___set_mean(self, *args)

    def __get_variance(self):
        """__get_variance(RandGenerator self) -> double"""
        return _moose.RandGenerator___get_variance(self)

    def __set_variance(self, *args):
        """__set_variance(RandGenerator self, double variance)"""
        return _moose.RandGenerator___set_variance(self, *args)

    def __get_output(self):
        """__get_output(RandGenerator self) -> double"""
        return _moose.RandGenerator___get_output(self)

    def __set_output(self, *args):
        """__set_output(RandGenerator self, double output)"""
        return _moose.RandGenerator___set_output(self, *args)

    sample = _swig_property(_moose.RandGenerator_sample_get)
    mean = _swig_property(_moose.RandGenerator_mean_get, _moose.RandGenerator_mean_set)
    variance = _swig_property(_moose.RandGenerator_variance_get)
    __swig_destroy__ = _moose.delete_RandGenerator
    __del__ = lambda self : None;
RandGenerator_swigregister = _moose.RandGenerator_swigregister
RandGenerator_swigregister(RandGenerator)

class UniformRng(RandGenerator):
    """Proxy of C++ pymoose::UniformRng class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::UniformRng self, Id id) -> UniformRng
        __init__(pymoose::UniformRng self, std::string path) -> UniformRng
        __init__(pymoose::UniformRng self, std::string name, Id parentId) -> UniformRng
        __init__(pymoose::UniformRng self, std::string name, PyMooseBase parent) -> UniformRng
        __init__(pymoose::UniformRng self, UniformRng src, std::string name, PyMooseBase parent) -> UniformRng
        __init__(pymoose::UniformRng self, UniformRng src, std::string name, Id parent) -> UniformRng
        __init__(pymoose::UniformRng self, Id src, std::string name, Id parent) -> UniformRng
        __init__(pymoose::UniformRng self, UniformRng src, std::string path) -> UniformRng
        __init__(pymoose::UniformRng self, Id src, std::string path) -> UniformRng
        """
        this = _moose.new_UniformRng(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_UniformRng
    __del__ = lambda self : None;
    def getType(self):
        """getType(UniformRng self) -> std::string const &"""
        return _moose.UniformRng_getType(self)

    def __get_min(self):
        """__get_min(UniformRng self) -> double"""
        return _moose.UniformRng___get_min(self)

    def __set_min(self, *args):
        """__set_min(UniformRng self, double min)"""
        return _moose.UniformRng___set_min(self, *args)

    def __get_max(self):
        """__get_max(UniformRng self) -> double"""
        return _moose.UniformRng___get_max(self)

    def __set_max(self, *args):
        """__set_max(UniformRng self, double max)"""
        return _moose.UniformRng___set_max(self, *args)

    min = _swig_property(_moose.UniformRng_min_get, _moose.UniformRng_min_set)
    max = _swig_property(_moose.UniformRng_max_get, _moose.UniformRng_max_set)
UniformRng_swigregister = _moose.UniformRng_swigregister
UniformRng_swigregister(UniformRng)

class GammaRng(RandGenerator):
    """Proxy of C++ pymoose::GammaRng class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::GammaRng self, Id id) -> GammaRng
        __init__(pymoose::GammaRng self, std::string path) -> GammaRng
        __init__(pymoose::GammaRng self, std::string name, Id parentId) -> GammaRng
        __init__(pymoose::GammaRng self, std::string name, PyMooseBase parent) -> GammaRng
        __init__(pymoose::GammaRng self, GammaRng src, std::string name, PyMooseBase parent) -> GammaRng
        __init__(pymoose::GammaRng self, GammaRng src, std::string name, Id parent) -> GammaRng
        __init__(pymoose::GammaRng self, Id src, std::string name, Id parent) -> GammaRng
        __init__(pymoose::GammaRng self, GammaRng src, std::string path) -> GammaRng
        __init__(pymoose::GammaRng self, Id src, std::string path) -> GammaRng
        """
        this = _moose.new_GammaRng(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_GammaRng
    __del__ = lambda self : None;
    def getType(self):
        """getType(GammaRng self) -> std::string const &"""
        return _moose.GammaRng_getType(self)

    def __get_alpha(self):
        """__get_alpha(GammaRng self) -> double"""
        return _moose.GammaRng___get_alpha(self)

    def __set_alpha(self, *args):
        """__set_alpha(GammaRng self, double alpha)"""
        return _moose.GammaRng___set_alpha(self, *args)

    def __get_theta(self):
        """__get_theta(GammaRng self) -> double"""
        return _moose.GammaRng___get_theta(self)

    def __set_theta(self, *args):
        """__set_theta(GammaRng self, double theta)"""
        return _moose.GammaRng___set_theta(self, *args)

    alpha = _swig_property(_moose.GammaRng_alpha_get, _moose.GammaRng_alpha_set)
    theta = _swig_property(_moose.GammaRng_theta_get, _moose.GammaRng_theta_set)
GammaRng_swigregister = _moose.GammaRng_swigregister
GammaRng_swigregister(GammaRng)

class ExponentialRng(RandGenerator):
    """Proxy of C++ pymoose::ExponentialRng class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::ExponentialRng self, Id id) -> ExponentialRng
        __init__(pymoose::ExponentialRng self, std::string path) -> ExponentialRng
        __init__(pymoose::ExponentialRng self, std::string name, Id parentId) -> ExponentialRng
        __init__(pymoose::ExponentialRng self, std::string name, PyMooseBase parent) -> ExponentialRng
        __init__(pymoose::ExponentialRng self, ExponentialRng src, std::string name, PyMooseBase parent) -> ExponentialRng
        __init__(pymoose::ExponentialRng self, ExponentialRng src, std::string name, Id parent) -> ExponentialRng
        __init__(pymoose::ExponentialRng self, Id src, std::string name, Id parent) -> ExponentialRng
        __init__(pymoose::ExponentialRng self, ExponentialRng src, std::string path) -> ExponentialRng
        __init__(pymoose::ExponentialRng self, Id src, std::string path) -> ExponentialRng
        """
        this = _moose.new_ExponentialRng(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_ExponentialRng
    __del__ = lambda self : None;
    def getType(self):
        """getType(ExponentialRng self) -> std::string const &"""
        return _moose.ExponentialRng_getType(self)

    def __get_method(self):
        """__get_method(ExponentialRng self) -> int"""
        return _moose.ExponentialRng___get_method(self)

    def __set_method(self, *args):
        """__set_method(ExponentialRng self, int method)"""
        return _moose.ExponentialRng___set_method(self, *args)

    method = _swig_property(_moose.ExponentialRng_method_get, _moose.ExponentialRng_method_set)
ExponentialRng_swigregister = _moose.ExponentialRng_swigregister
ExponentialRng_swigregister(ExponentialRng)

class BinomialRng(RandGenerator):
    """Proxy of C++ pymoose::BinomialRng class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::BinomialRng self, Id id) -> BinomialRng
        __init__(pymoose::BinomialRng self, std::string path) -> BinomialRng
        __init__(pymoose::BinomialRng self, std::string name, Id parentId) -> BinomialRng
        __init__(pymoose::BinomialRng self, std::string name, PyMooseBase parent) -> BinomialRng
        __init__(pymoose::BinomialRng self, BinomialRng src, std::string name, PyMooseBase parent) -> BinomialRng
        __init__(pymoose::BinomialRng self, BinomialRng src, std::string name, Id parent) -> BinomialRng
        __init__(pymoose::BinomialRng self, Id src, std::string name, Id parent) -> BinomialRng
        __init__(pymoose::BinomialRng self, BinomialRng src, std::string path) -> BinomialRng
        __init__(pymoose::BinomialRng self, Id src, std::string path) -> BinomialRng
        """
        this = _moose.new_BinomialRng(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_BinomialRng
    __del__ = lambda self : None;
    def getType(self):
        """getType(BinomialRng self) -> std::string const &"""
        return _moose.BinomialRng_getType(self)

    def __get_n(self):
        """__get_n(BinomialRng self) -> int"""
        return _moose.BinomialRng___get_n(self)

    def __set_n(self, *args):
        """__set_n(BinomialRng self, int n)"""
        return _moose.BinomialRng___set_n(self, *args)

    def __get_p(self):
        """__get_p(BinomialRng self) -> double"""
        return _moose.BinomialRng___get_p(self)

    def __set_p(self, *args):
        """__set_p(BinomialRng self, double p)"""
        return _moose.BinomialRng___set_p(self, *args)

    n = _swig_property(_moose.BinomialRng_n_get, _moose.BinomialRng_n_set)
    p = _swig_property(_moose.BinomialRng_p_get, _moose.BinomialRng_p_set)
BinomialRng_swigregister = _moose.BinomialRng_swigregister
BinomialRng_swigregister(BinomialRng)

class PoissonRng(RandGenerator):
    """Proxy of C++ pymoose::PoissonRng class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::PoissonRng self, Id id) -> PoissonRng
        __init__(pymoose::PoissonRng self, std::string path) -> PoissonRng
        __init__(pymoose::PoissonRng self, std::string name, Id parentId) -> PoissonRng
        __init__(pymoose::PoissonRng self, std::string name, PyMooseBase parent) -> PoissonRng
        __init__(pymoose::PoissonRng self, PoissonRng src, std::string name, PyMooseBase parent) -> PoissonRng
        __init__(pymoose::PoissonRng self, PoissonRng src, std::string name, Id parent) -> PoissonRng
        __init__(pymoose::PoissonRng self, Id src, std::string name, Id parent) -> PoissonRng
        __init__(pymoose::PoissonRng self, PoissonRng src, std::string path) -> PoissonRng
        __init__(pymoose::PoissonRng self, Id src, std::string path) -> PoissonRng
        """
        this = _moose.new_PoissonRng(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_PoissonRng
    __del__ = lambda self : None;
    def getType(self):
        """getType(PoissonRng self) -> std::string const &"""
        return _moose.PoissonRng_getType(self)

PoissonRng_swigregister = _moose.PoissonRng_swigregister
PoissonRng_swigregister(PoissonRng)

class NormalRng(RandGenerator):
    """Proxy of C++ pymoose::NormalRng class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::NormalRng self, Id id) -> NormalRng
        __init__(pymoose::NormalRng self, std::string path) -> NormalRng
        __init__(pymoose::NormalRng self, std::string name, Id parentId) -> NormalRng
        __init__(pymoose::NormalRng self, std::string name, PyMooseBase parent) -> NormalRng
        __init__(pymoose::NormalRng self, NormalRng src, std::string name, PyMooseBase parent) -> NormalRng
        __init__(pymoose::NormalRng self, NormalRng src, std::string name, Id parent) -> NormalRng
        __init__(pymoose::NormalRng self, Id src, std::string name, Id parent) -> NormalRng
        __init__(pymoose::NormalRng self, NormalRng src, std::string path) -> NormalRng
        __init__(pymoose::NormalRng self, Id src, std::string path) -> NormalRng
        """
        this = _moose.new_NormalRng(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_NormalRng
    __del__ = lambda self : None;
    def getType(self):
        """getType(NormalRng self) -> std::string const &"""
        return _moose.NormalRng_getType(self)

    def __get_method(self):
        """__get_method(NormalRng self) -> int"""
        return _moose.NormalRng___get_method(self)

    def __set_method(self, *args):
        """__set_method(NormalRng self, int method)"""
        return _moose.NormalRng___set_method(self, *args)

    method = _swig_property(_moose.NormalRng_method_get, _moose.NormalRng_method_set)
NormalRng_swigregister = _moose.NormalRng_swigregister
NormalRng_swigregister(NormalRng)

class KinCompt(Neutral):
    """Proxy of C++ pymoose::KinCompt class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::KinCompt self, std::string className, std::string objectName, Id parentId) -> KinCompt
        __init__(pymoose::KinCompt self, std::string className, std::string path) -> KinCompt
        __init__(pymoose::KinCompt self, std::string className, std::string objectName, PyMooseBase parent) -> KinCompt
        __init__(pymoose::KinCompt self, Id id) -> KinCompt
        __init__(pymoose::KinCompt self, std::string path) -> KinCompt
        __init__(pymoose::KinCompt self, std::string name, Id parentId) -> KinCompt
        __init__(pymoose::KinCompt self, std::string name, PyMooseBase parent) -> KinCompt
        __init__(pymoose::KinCompt self, KinCompt src, std::string name, PyMooseBase parent) -> KinCompt
        __init__(pymoose::KinCompt self, KinCompt src, std::string name, Id parent) -> KinCompt
        __init__(pymoose::KinCompt self, KinCompt src, std::string path) -> KinCompt
        __init__(pymoose::KinCompt self, Id src, std::string name, Id parent) -> KinCompt
        __init__(pymoose::KinCompt self, Id src, std::string path) -> KinCompt
        """
        this = _moose.new_KinCompt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_KinCompt
    __del__ = lambda self : None;
    def getType(self):
        """getType(KinCompt self) -> std::string const &"""
        return _moose.KinCompt_getType(self)

    def __get_volume(self):
        """__get_volume(KinCompt self) -> double"""
        return _moose.KinCompt___get_volume(self)

    def __set_volume(self, *args):
        """__set_volume(KinCompt self, double volume)"""
        return _moose.KinCompt___set_volume(self, *args)

    def __get_area(self):
        """__get_area(KinCompt self) -> double"""
        return _moose.KinCompt___get_area(self)

    def __set_area(self, *args):
        """__set_area(KinCompt self, double area)"""
        return _moose.KinCompt___set_area(self, *args)

    def __get_perimeter(self):
        """__get_perimeter(KinCompt self) -> double"""
        return _moose.KinCompt___get_perimeter(self)

    def __set_perimeter(self, *args):
        """__set_perimeter(KinCompt self, double perimeter)"""
        return _moose.KinCompt___set_perimeter(self, *args)

    def __get_size(self):
        """__get_size(KinCompt self) -> double"""
        return _moose.KinCompt___get_size(self)

    def __set_size(self, *args):
        """__set_size(KinCompt self, double size)"""
        return _moose.KinCompt___set_size(self, *args)

    def __get_numDimensions(self):
        """__get_numDimensions(KinCompt self) -> unsigned int"""
        return _moose.KinCompt___get_numDimensions(self)

    def __set_numDimensions(self, *args):
        """__set_numDimensions(KinCompt self, unsigned int numDimensions)"""
        return _moose.KinCompt___set_numDimensions(self, *args)

    def __get_x(self):
        """__get_x(KinCompt self) -> double"""
        return _moose.KinCompt___get_x(self)

    def __set_x(self, *args):
        """__set_x(KinCompt self, double x)"""
        return _moose.KinCompt___set_x(self, *args)

    def __get_y(self):
        """__get_y(KinCompt self) -> double"""
        return _moose.KinCompt___get_y(self)

    def __set_y(self, *args):
        """__set_y(KinCompt self, double y)"""
        return _moose.KinCompt___set_y(self, *args)

    volume = _swig_property(_moose.KinCompt_volume_get, _moose.KinCompt_volume_set)
    area = _swig_property(_moose.KinCompt_area_get, _moose.KinCompt_area_set)
    perimeter = _swig_property(_moose.KinCompt_perimeter_get, _moose.KinCompt_perimeter_set)
    size = _swig_property(_moose.KinCompt_size_get, _moose.KinCompt_size_set)
    numDimensions = _swig_property(_moose.KinCompt_numDimensions_get, _moose.KinCompt_numDimensions_set)
    x = _swig_property(_moose.KinCompt_x_get, _moose.KinCompt_x_set)
    y = _swig_property(_moose.KinCompt_y_get, _moose.KinCompt_y_set)
KinCompt_swigregister = _moose.KinCompt_swigregister
KinCompt_swigregister(KinCompt)

class KineticManager(KinCompt):
    """Proxy of C++ pymoose::KineticManager class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::KineticManager self, Id id) -> KineticManager
        __init__(pymoose::KineticManager self, std::string path) -> KineticManager
        __init__(pymoose::KineticManager self, std::string name, Id parentId) -> KineticManager
        __init__(pymoose::KineticManager self, std::string name, PyMooseBase parent) -> KineticManager
        __init__(pymoose::KineticManager self, KineticManager src, std::string name, PyMooseBase parent) -> KineticManager
        __init__(pymoose::KineticManager self, KineticManager src, std::string name, Id parent) -> KineticManager
        __init__(pymoose::KineticManager self, KineticManager src, std::string path) -> KineticManager
        __init__(pymoose::KineticManager self, Id src, std::string name, Id parent) -> KineticManager
        __init__(pymoose::KineticManager self, Id src, std::string path) -> KineticManager
        """
        this = _moose.new_KineticManager(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_KineticManager
    __del__ = lambda self : None;
    def getType(self):
        """getType(KineticManager self) -> std::string const &"""
        return _moose.KineticManager_getType(self)

    def __get_autoMode(self):
        """__get_autoMode(KineticManager self) -> bool"""
        return _moose.KineticManager___get_autoMode(self)

    def __set_autoMode(self, *args):
        """__set_autoMode(KineticManager self, bool autoMode)"""
        return _moose.KineticManager___set_autoMode(self, *args)

    def __get_stochastic(self):
        """__get_stochastic(KineticManager self) -> bool"""
        return _moose.KineticManager___get_stochastic(self)

    def __set_stochastic(self, *args):
        """__set_stochastic(KineticManager self, bool stochastic)"""
        return _moose.KineticManager___set_stochastic(self, *args)

    def __get_spatial(self):
        """__get_spatial(KineticManager self) -> bool"""
        return _moose.KineticManager___get_spatial(self)

    def __set_spatial(self, *args):
        """__set_spatial(KineticManager self, bool spatial)"""
        return _moose.KineticManager___set_spatial(self, *args)

    def __get_method(self):
        """__get_method(KineticManager self) -> std::string"""
        return _moose.KineticManager___get_method(self)

    def __set_method(self, *args):
        """__set_method(KineticManager self, std::string method)"""
        return _moose.KineticManager___set_method(self, *args)

    def __get_variableDt(self):
        """__get_variableDt(KineticManager self) -> bool"""
        return _moose.KineticManager___get_variableDt(self)

    def __get_singleParticle(self):
        """__get_singleParticle(KineticManager self) -> bool"""
        return _moose.KineticManager___get_singleParticle(self)

    def __get_multiscale(self):
        """__get_multiscale(KineticManager self) -> bool"""
        return _moose.KineticManager___get_multiscale(self)

    def __get_implicit(self):
        """__get_implicit(KineticManager self) -> bool"""
        return _moose.KineticManager___get_implicit(self)

    def __get_recommendedDt(self):
        """__get_recommendedDt(KineticManager self) -> double"""
        return _moose.KineticManager___get_recommendedDt(self)

    def __get_loadEstimate(self):
        """__get_loadEstimate(KineticManager self) -> double"""
        return _moose.KineticManager___get_loadEstimate(self)

    def __get_memEstimate(self):
        """__get_memEstimate(KineticManager self) -> unsigned int"""
        return _moose.KineticManager___get_memEstimate(self)

    def __get_eulerError(self):
        """__get_eulerError(KineticManager self) -> double"""
        return _moose.KineticManager___get_eulerError(self)

    def __set_eulerError(self, *args):
        """__set_eulerError(KineticManager self, double eulerError)"""
        return _moose.KineticManager___set_eulerError(self, *args)

    autoMode = _swig_property(_moose.KineticManager_autoMode_get, _moose.KineticManager_autoMode_set)
    stochastic = _swig_property(_moose.KineticManager_stochastic_get, _moose.KineticManager_stochastic_set)
    spatial = _swig_property(_moose.KineticManager_spatial_get, _moose.KineticManager_spatial_set)
    method = _swig_property(_moose.KineticManager_method_get, _moose.KineticManager_method_set)
    variableDt = _swig_property(_moose.KineticManager_variableDt_get)
    singleParticle = _swig_property(_moose.KineticManager_singleParticle_get)
    multiscale = _swig_property(_moose.KineticManager_multiscale_get)
    implicit = _swig_property(_moose.KineticManager_implicit_get)
    description = _swig_property(_moose.KineticManager_description_get)
    recommendedDt = _swig_property(_moose.KineticManager_recommendedDt_get)
    eulerError = _swig_property(_moose.KineticManager_eulerError_get, _moose.KineticManager_eulerError_set)
    auto = _swig_property(_moose.KineticManager_auto_get, _moose.KineticManager_auto_set)
    loadEstimate = _swig_property(_moose.KineticManager_loadEstimate_get)
    memEstimate = _swig_property(_moose.KineticManager_memEstimate_get)
KineticManager_swigregister = _moose.KineticManager_swigregister
KineticManager_swigregister(KineticManager)

class Panel(Neutral):
    """Proxy of C++ pymoose::Panel class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Panel self, Id id) -> Panel
        __init__(pymoose::Panel self, std::string path) -> Panel
        __init__(pymoose::Panel self, std::string name, Id parentId) -> Panel
        __init__(pymoose::Panel self, std::string name, PyMooseBase parent) -> Panel
        __init__(pymoose::Panel self, Panel src, std::string name, PyMooseBase parent) -> Panel
        __init__(pymoose::Panel self, Panel src, std::string name, Id parent) -> Panel
        __init__(pymoose::Panel self, Panel src, std::string path) -> Panel
        __init__(pymoose::Panel self, Id src, std::string name, Id parent) -> Panel
        __init__(pymoose::Panel self, Id src, std::string path) -> Panel
        __init__(pymoose::Panel self, std::string typeName, std::string objectName, Id parentId) -> Panel
        __init__(pymoose::Panel self, std::string typeName, std::string path) -> Panel
        __init__(pymoose::Panel self, std::string typeName, std::string objectName, PyMooseBase parent) -> Panel
        """
        this = _moose.new_Panel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Panel
    __del__ = lambda self : None;
    def getType(self):
        """getType(Panel self) -> std::string const &"""
        return _moose.Panel_getType(self)

    def __get_nPts(self):
        """__get_nPts(Panel self) -> unsigned int"""
        return _moose.Panel___get_nPts(self)

    def __get_nDims(self):
        """__get_nDims(Panel self) -> unsigned int"""
        return _moose.Panel___get_nDims(self)

    def __get_nNeighbors(self):
        """__get_nNeighbors(Panel self) -> unsigned int"""
        return _moose.Panel___get_nNeighbors(self)

    def __get_shapeId(self):
        """__get_shapeId(Panel self) -> unsigned int"""
        return _moose.Panel___get_shapeId(self)

    def __get_coords(self):
        """__get_coords(Panel self) -> double_vector"""
        return _moose.Panel___get_coords(self)

    nPts = _swig_property(_moose.Panel_nPts_get)
    nDims = _swig_property(_moose.Panel_nDims_get)
    nNeighbors = _swig_property(_moose.Panel_nNeighbors_get)
    shapeId = _swig_property(_moose.Panel_shapeId_get)
    coords = _swig_property(_moose.Panel_coords_get)
Panel_swigregister = _moose.Panel_swigregister
Panel_swigregister(Panel)

class DiskPanel(Panel):
    """Proxy of C++ pymoose::DiskPanel class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::DiskPanel self, Id id) -> DiskPanel
        __init__(pymoose::DiskPanel self, std::string path) -> DiskPanel
        __init__(pymoose::DiskPanel self, std::string name, Id parentId) -> DiskPanel
        __init__(pymoose::DiskPanel self, std::string name, PyMooseBase parent) -> DiskPanel
        __init__(pymoose::DiskPanel self, DiskPanel src, std::string name, PyMooseBase parent) -> DiskPanel
        __init__(pymoose::DiskPanel self, DiskPanel src, std::string name, Id parent) -> DiskPanel
        __init__(pymoose::DiskPanel self, DiskPanel src, std::string path) -> DiskPanel
        __init__(pymoose::DiskPanel self, Id src, std::string name, Id parent) -> DiskPanel
        __init__(pymoose::DiskPanel self, Id src, std::string path) -> DiskPanel
        """
        this = _moose.new_DiskPanel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_DiskPanel
    __del__ = lambda self : None;
    def getType(self):
        """getType(DiskPanel self) -> std::string const &"""
        return _moose.DiskPanel_getType(self)

DiskPanel_swigregister = _moose.DiskPanel_swigregister
DiskPanel_swigregister(DiskPanel)

class CylPanel(Panel):
    """Proxy of C++ pymoose::CylPanel class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::CylPanel self, Id id) -> CylPanel
        __init__(pymoose::CylPanel self, std::string path) -> CylPanel
        __init__(pymoose::CylPanel self, std::string name, Id parentId) -> CylPanel
        __init__(pymoose::CylPanel self, std::string name, PyMooseBase parent) -> CylPanel
        __init__(pymoose::CylPanel self, CylPanel src, std::string name, PyMooseBase parent) -> CylPanel
        __init__(pymoose::CylPanel self, CylPanel src, std::string name, Id parent) -> CylPanel
        __init__(pymoose::CylPanel self, CylPanel src, std::string path) -> CylPanel
        __init__(pymoose::CylPanel self, Id src, std::string name, Id parent) -> CylPanel
        __init__(pymoose::CylPanel self, Id src, std::string path) -> CylPanel
        """
        this = _moose.new_CylPanel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_CylPanel
    __del__ = lambda self : None;
    def getType(self):
        """getType(CylPanel self) -> std::string const &"""
        return _moose.CylPanel_getType(self)

CylPanel_swigregister = _moose.CylPanel_swigregister
CylPanel_swigregister(CylPanel)

class HemispherePanel(Panel):
    """Proxy of C++ pymoose::HemispherePanel class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::HemispherePanel self, Id id) -> HemispherePanel
        __init__(pymoose::HemispherePanel self, std::string path) -> HemispherePanel
        __init__(pymoose::HemispherePanel self, std::string name, Id parentId) -> HemispherePanel
        __init__(pymoose::HemispherePanel self, std::string name, PyMooseBase parent) -> HemispherePanel
        __init__(pymoose::HemispherePanel self, HemispherePanel src, std::string name, PyMooseBase parent) -> HemispherePanel
        __init__(pymoose::HemispherePanel self, HemispherePanel src, std::string name, Id parent) -> HemispherePanel
        __init__(pymoose::HemispherePanel self, HemispherePanel src, std::string path) -> HemispherePanel
        __init__(pymoose::HemispherePanel self, Id src, std::string name, Id parent) -> HemispherePanel
        __init__(pymoose::HemispherePanel self, Id src, std::string path) -> HemispherePanel
        """
        this = _moose.new_HemispherePanel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_HemispherePanel
    __del__ = lambda self : None;
    def getType(self):
        """getType(HemispherePanel self) -> std::string const &"""
        return _moose.HemispherePanel_getType(self)

HemispherePanel_swigregister = _moose.HemispherePanel_swigregister
HemispherePanel_swigregister(HemispherePanel)

class SpherePanel(Panel):
    """Proxy of C++ pymoose::SpherePanel class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::SpherePanel self, Id id) -> SpherePanel
        __init__(pymoose::SpherePanel self, std::string path) -> SpherePanel
        __init__(pymoose::SpherePanel self, std::string name, Id parentId) -> SpherePanel
        __init__(pymoose::SpherePanel self, std::string name, PyMooseBase parent) -> SpherePanel
        __init__(pymoose::SpherePanel self, SpherePanel src, std::string name, PyMooseBase parent) -> SpherePanel
        __init__(pymoose::SpherePanel self, SpherePanel src, std::string name, Id parent) -> SpherePanel
        __init__(pymoose::SpherePanel self, SpherePanel src, std::string path) -> SpherePanel
        __init__(pymoose::SpherePanel self, Id src, std::string name, Id parent) -> SpherePanel
        __init__(pymoose::SpherePanel self, Id src, std::string path) -> SpherePanel
        """
        this = _moose.new_SpherePanel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_SpherePanel
    __del__ = lambda self : None;
    def getType(self):
        """getType(SpherePanel self) -> std::string const &"""
        return _moose.SpherePanel_getType(self)

SpherePanel_swigregister = _moose.SpherePanel_swigregister
SpherePanel_swigregister(SpherePanel)

class TriPanel(Panel):
    """Proxy of C++ pymoose::TriPanel class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::TriPanel self, Id id) -> TriPanel
        __init__(pymoose::TriPanel self, std::string path) -> TriPanel
        __init__(pymoose::TriPanel self, std::string name, Id parentId) -> TriPanel
        __init__(pymoose::TriPanel self, std::string name, PyMooseBase parent) -> TriPanel
        __init__(pymoose::TriPanel self, TriPanel src, std::string name, PyMooseBase parent) -> TriPanel
        __init__(pymoose::TriPanel self, TriPanel src, std::string name, Id parent) -> TriPanel
        __init__(pymoose::TriPanel self, TriPanel src, std::string path) -> TriPanel
        __init__(pymoose::TriPanel self, Id src, std::string name, Id parent) -> TriPanel
        __init__(pymoose::TriPanel self, Id src, std::string path) -> TriPanel
        """
        this = _moose.new_TriPanel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_TriPanel
    __del__ = lambda self : None;
    def getType(self):
        """getType(TriPanel self) -> std::string const &"""
        return _moose.TriPanel_getType(self)

TriPanel_swigregister = _moose.TriPanel_swigregister
TriPanel_swigregister(TriPanel)

class RectPanel(Panel):
    """Proxy of C++ pymoose::RectPanel class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::RectPanel self, Id id) -> RectPanel
        __init__(pymoose::RectPanel self, std::string path) -> RectPanel
        __init__(pymoose::RectPanel self, std::string name, Id parentId) -> RectPanel
        __init__(pymoose::RectPanel self, std::string name, PyMooseBase parent) -> RectPanel
        __init__(pymoose::RectPanel self, RectPanel src, std::string name, PyMooseBase parent) -> RectPanel
        __init__(pymoose::RectPanel self, RectPanel src, std::string name, Id parent) -> RectPanel
        __init__(pymoose::RectPanel self, RectPanel src, std::string path) -> RectPanel
        __init__(pymoose::RectPanel self, Id src, std::string name, Id parent) -> RectPanel
        __init__(pymoose::RectPanel self, Id src, std::string path) -> RectPanel
        """
        this = _moose.new_RectPanel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_RectPanel
    __del__ = lambda self : None;
    def getType(self):
        """getType(RectPanel self) -> std::string const &"""
        return _moose.RectPanel_getType(self)

RectPanel_swigregister = _moose.RectPanel_swigregister
RectPanel_swigregister(RectPanel)

class Surface(Neutral):
    """Proxy of C++ pymoose::Surface class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Surface self, Id id) -> Surface
        __init__(pymoose::Surface self, std::string path) -> Surface
        __init__(pymoose::Surface self, std::string name, Id parentId) -> Surface
        __init__(pymoose::Surface self, std::string name, PyMooseBase parent) -> Surface
        __init__(pymoose::Surface self, Surface src, std::string name, PyMooseBase parent) -> Surface
        __init__(pymoose::Surface self, Surface src, std::string name, Id parent) -> Surface
        __init__(pymoose::Surface self, Surface src, std::string path) -> Surface
        __init__(pymoose::Surface self, Id src, std::string name, Id parent) -> Surface
        __init__(pymoose::Surface self, Id src, std::string path) -> Surface
        """
        this = _moose.new_Surface(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Surface
    __del__ = lambda self : None;
    def getType(self):
        """getType(Surface self) -> std::string const &"""
        return _moose.Surface_getType(self)

    def __get_volume(self):
        """__get_volume(Surface self) -> double"""
        return _moose.Surface___get_volume(self)

    volume = _swig_property(_moose.Surface_volume_get)
Surface_swigregister = _moose.Surface_swigregister
Surface_swigregister(Surface)

class Geometry(Neutral):
    """Proxy of C++ pymoose::Geometry class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Geometry self, Id id) -> Geometry
        __init__(pymoose::Geometry self, std::string path) -> Geometry
        __init__(pymoose::Geometry self, std::string name, Id parentId) -> Geometry
        __init__(pymoose::Geometry self, std::string name, PyMooseBase parent) -> Geometry
        __init__(pymoose::Geometry self, Geometry src, std::string name, PyMooseBase parent) -> Geometry
        __init__(pymoose::Geometry self, Geometry src, std::string name, Id parent) -> Geometry
        __init__(pymoose::Geometry self, Geometry src, std::string path) -> Geometry
        __init__(pymoose::Geometry self, Id src, std::string name, Id parent) -> Geometry
        __init__(pymoose::Geometry self, Id src, std::string path) -> Geometry
        """
        this = _moose.new_Geometry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Geometry
    __del__ = lambda self : None;
    def getType(self):
        """getType(Geometry self) -> std::string const &"""
        return _moose.Geometry_getType(self)

    def __get_epsilon(self):
        """__get_epsilon(Geometry self) -> double"""
        return _moose.Geometry___get_epsilon(self)

    def __set_epsilon(self, *args):
        """__set_epsilon(Geometry self, double epsilon)"""
        return _moose.Geometry___set_epsilon(self, *args)

    def __get_neighdist(self):
        """__get_neighdist(Geometry self) -> double"""
        return _moose.Geometry___get_neighdist(self)

    def __set_neighdist(self, *args):
        """__set_neighdist(Geometry self, double neighdist)"""
        return _moose.Geometry___set_neighdist(self, *args)

    epsilon = _swig_property(_moose.Geometry_epsilon_get, _moose.Geometry_epsilon_set)
    neighdist = _swig_property(_moose.Geometry_neighdist_get, _moose.Geometry_neighdist_set)
Geometry_swigregister = _moose.Geometry_swigregister
Geometry_swigregister(Geometry)

class Adaptor(Neutral):
    """Proxy of C++ pymoose::Adaptor class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::Adaptor self, Id id) -> Adaptor
        __init__(pymoose::Adaptor self, std::string path) -> Adaptor
        __init__(pymoose::Adaptor self, std::string name, Id parentId) -> Adaptor
        __init__(pymoose::Adaptor self, std::string name, PyMooseBase parent) -> Adaptor
        __init__(pymoose::Adaptor self, Adaptor src, std::string name, PyMooseBase parent) -> Adaptor
        __init__(pymoose::Adaptor self, Adaptor src, std::string name, Id parent) -> Adaptor
        __init__(pymoose::Adaptor self, Adaptor src, std::string path) -> Adaptor
        __init__(pymoose::Adaptor self, Id src, std::string name, Id parent) -> Adaptor
        __init__(pymoose::Adaptor self, Id src, std::string path) -> Adaptor
        """
        this = _moose.new_Adaptor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Adaptor
    __del__ = lambda self : None;
    def getType(self):
        """getType(Adaptor self) -> std::string const &"""
        return _moose.Adaptor_getType(self)

    def __get_inputOffset(self):
        """__get_inputOffset(Adaptor self) -> double"""
        return _moose.Adaptor___get_inputOffset(self)

    def __set_inputOffset(self, *args):
        """__set_inputOffset(Adaptor self, double inputOffset)"""
        return _moose.Adaptor___set_inputOffset(self, *args)

    def __get_outputOffset(self):
        """__get_outputOffset(Adaptor self) -> double"""
        return _moose.Adaptor___get_outputOffset(self)

    def __set_outputOffset(self, *args):
        """__set_outputOffset(Adaptor self, double outputOffset)"""
        return _moose.Adaptor___set_outputOffset(self, *args)

    def __get_scale(self):
        """__get_scale(Adaptor self) -> double"""
        return _moose.Adaptor___get_scale(self)

    def __set_scale(self, *args):
        """__set_scale(Adaptor self, double scale)"""
        return _moose.Adaptor___set_scale(self, *args)

    def __get_output(self):
        """__get_output(Adaptor self) -> double"""
        return _moose.Adaptor___get_output(self)

    inputOffset = _swig_property(_moose.Adaptor_inputOffset_get, _moose.Adaptor_inputOffset_set)
    outputOffset = _swig_property(_moose.Adaptor_outputOffset_get, _moose.Adaptor_outputOffset_set)
    scale = _swig_property(_moose.Adaptor_scale_get, _moose.Adaptor_scale_set)
    output = _swig_property(_moose.Adaptor_output_get)
Adaptor_swigregister = _moose.Adaptor_swigregister
Adaptor_swigregister(Adaptor)

class SigNeur(Neutral):
    """Proxy of C++ pymoose::SigNeur class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::SigNeur self, Id id) -> SigNeur
        __init__(pymoose::SigNeur self, std::string path) -> SigNeur
        __init__(pymoose::SigNeur self, std::string name, Id parentId) -> SigNeur
        __init__(pymoose::SigNeur self, std::string name, PyMooseBase parent) -> SigNeur
        __init__(pymoose::SigNeur self, SigNeur src, std::string name, PyMooseBase parent) -> SigNeur
        __init__(pymoose::SigNeur self, SigNeur src, std::string name, Id parent) -> SigNeur
        __init__(pymoose::SigNeur self, SigNeur src, std::string path) -> SigNeur
        __init__(pymoose::SigNeur self, Id src, std::string name, Id parent) -> SigNeur
        __init__(pymoose::SigNeur self, Id src, std::string path) -> SigNeur
        """
        this = _moose.new_SigNeur(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_SigNeur
    __del__ = lambda self : None;
    def getType(self):
        """getType(SigNeur self) -> std::string const &"""
        return _moose.SigNeur_getType(self)

    def __get_cellProto(self):
        """__get_cellProto(SigNeur self) -> std::string"""
        return _moose.SigNeur___get_cellProto(self)

    def __set_cellProto(self, *args):
        """__set_cellProto(SigNeur self, std::string cellProto)"""
        return _moose.SigNeur___set_cellProto(self, *args)

    def __get_spineProto(self):
        """__get_spineProto(SigNeur self) -> std::string"""
        return _moose.SigNeur___get_spineProto(self)

    def __set_spineProto(self, *args):
        """__set_spineProto(SigNeur self, std::string spineProto)"""
        return _moose.SigNeur___set_spineProto(self, *args)

    def __get_dendProto(self):
        """__get_dendProto(SigNeur self) -> std::string"""
        return _moose.SigNeur___get_dendProto(self)

    def __set_dendProto(self, *args):
        """__set_dendProto(SigNeur self, std::string dendProto)"""
        return _moose.SigNeur___set_dendProto(self, *args)

    def __get_somaProto(self):
        """__get_somaProto(SigNeur self) -> std::string"""
        return _moose.SigNeur___get_somaProto(self)

    def __set_somaProto(self, *args):
        """__set_somaProto(SigNeur self, std::string somaProto)"""
        return _moose.SigNeur___set_somaProto(self, *args)

    def __get_cell(self):
        """__get_cell(SigNeur self) -> std::string"""
        return _moose.SigNeur___get_cell(self)

    def __get_spine(self):
        """__get_spine(SigNeur self) -> std::string"""
        return _moose.SigNeur___get_spine(self)

    def __get_dend(self):
        """__get_dend(SigNeur self) -> std::string"""
        return _moose.SigNeur___get_dend(self)

    def __get_soma(self):
        """__get_soma(SigNeur self) -> std::string"""
        return _moose.SigNeur___get_soma(self)

    def __get_cellMethod(self):
        """__get_cellMethod(SigNeur self) -> std::string"""
        return _moose.SigNeur___get_cellMethod(self)

    def __set_cellMethod(self, *args):
        """__set_cellMethod(SigNeur self, std::string cellMethod)"""
        return _moose.SigNeur___set_cellMethod(self, *args)

    def __get_spineMethod(self):
        """__get_spineMethod(SigNeur self) -> std::string"""
        return _moose.SigNeur___get_spineMethod(self)

    def __set_spineMethod(self, *args):
        """__set_spineMethod(SigNeur self, std::string spineMethod)"""
        return _moose.SigNeur___set_spineMethod(self, *args)

    def __get_dendMethod(self):
        """__get_dendMethod(SigNeur self) -> std::string"""
        return _moose.SigNeur___get_dendMethod(self)

    def __set_dendMethod(self, *args):
        """__set_dendMethod(SigNeur self, std::string dendMethod)"""
        return _moose.SigNeur___set_dendMethod(self, *args)

    def __get_somaMethod(self):
        """__get_somaMethod(SigNeur self) -> std::string"""
        return _moose.SigNeur___get_somaMethod(self)

    def __set_somaMethod(self, *args):
        """__set_somaMethod(SigNeur self, std::string somaMethod)"""
        return _moose.SigNeur___set_somaMethod(self, *args)

    def __get_sigDt(self):
        """__get_sigDt(SigNeur self) -> double"""
        return _moose.SigNeur___get_sigDt(self)

    def __set_sigDt(self, *args):
        """__set_sigDt(SigNeur self, double sigDt)"""
        return _moose.SigNeur___set_sigDt(self, *args)

    def __get_cellDt(self):
        """__get_cellDt(SigNeur self) -> double"""
        return _moose.SigNeur___get_cellDt(self)

    def __set_cellDt(self, *args):
        """__set_cellDt(SigNeur self, double cellDt)"""
        return _moose.SigNeur___set_cellDt(self, *args)

    def __get_Dscale(self):
        """__get_Dscale(SigNeur self) -> double"""
        return _moose.SigNeur___get_Dscale(self)

    def __set_Dscale(self, *args):
        """__set_Dscale(SigNeur self, double Dscale)"""
        return _moose.SigNeur___set_Dscale(self, *args)

    def __get_lambda(self):
        """__get_lambda(SigNeur self) -> double"""
        return _moose.SigNeur___get_lambda(self)

    def __set_lambda(self, *args):
        """__set_lambda(SigNeur self, double _lambda)"""
        return _moose.SigNeur___set_lambda(self, *args)

    def __get_parallelMode(self):
        """__get_parallelMode(SigNeur self) -> int"""
        return _moose.SigNeur___get_parallelMode(self)

    def __set_parallelMode(self, *args):
        """__set_parallelMode(SigNeur self, int parallelMode)"""
        return _moose.SigNeur___set_parallelMode(self, *args)

    def __get_updateStep(self):
        """__get_updateStep(SigNeur self) -> double"""
        return _moose.SigNeur___get_updateStep(self)

    def __set_updateStep(self, *args):
        """__set_updateStep(SigNeur self, double updateStep)"""
        return _moose.SigNeur___set_updateStep(self, *args)

    def __get_calciumScale(self):
        """__get_calciumScale(SigNeur self) -> double"""
        return _moose.SigNeur___get_calciumScale(self)

    def __set_calciumScale(self, *args):
        """__set_calciumScale(SigNeur self, double calciumScale)"""
        return _moose.SigNeur___set_calciumScale(self, *args)

    def __get_dendInclude(self):
        """__get_dendInclude(SigNeur self) -> std::string"""
        return _moose.SigNeur___get_dendInclude(self)

    def __set_dendInclude(self, *args):
        """__set_dendInclude(SigNeur self, std::string dendInclude)"""
        return _moose.SigNeur___set_dendInclude(self, *args)

    def __get_dendExclude(self):
        """__get_dendExclude(SigNeur self) -> std::string"""
        return _moose.SigNeur___get_dendExclude(self)

    def __set_dendExclude(self, *args):
        """__set_dendExclude(SigNeur self, std::string dendExclude)"""
        return _moose.SigNeur___set_dendExclude(self, *args)

    def build(self):
        """build(SigNeur self)"""
        return _moose.SigNeur_build(self)

    cellProto = _swig_property(_moose.SigNeur_cellProto_get, _moose.SigNeur_cellProto_set)
    spineProto = _swig_property(_moose.SigNeur_spineProto_get, _moose.SigNeur_spineProto_set)
    dendProto = _swig_property(_moose.SigNeur_dendProto_get, _moose.SigNeur_dendProto_set)
    somaProto = _swig_property(_moose.SigNeur_somaProto_get, _moose.SigNeur_somaProto_set)
    cell = _swig_property(_moose.SigNeur_cell_get)
    spine = _swig_property(_moose.SigNeur_spine_get)
    dend = _swig_property(_moose.SigNeur_dend_get)
    soma = _swig_property(_moose.SigNeur_soma_get)
    cellMethod = _swig_property(_moose.SigNeur_cellMethod_get, _moose.SigNeur_cellMethod_set)
    spineMethod = _swig_property(_moose.SigNeur_spineMethod_get, _moose.SigNeur_spineMethod_set)
    dendMethod = _swig_property(_moose.SigNeur_dendMethod_get, _moose.SigNeur_dendMethod_set)
    somaMethod = _swig_property(_moose.SigNeur_somaMethod_get, _moose.SigNeur_somaMethod_set)
    sigDt = _swig_property(_moose.SigNeur_sigDt_get, _moose.SigNeur_sigDt_set)
    cellDt = _swig_property(_moose.SigNeur_cellDt_get, _moose.SigNeur_cellDt_set)
    Dscale = _swig_property(_moose.SigNeur_Dscale_get, _moose.SigNeur_Dscale_set)
    lambda_ = _swig_property(_moose.SigNeur_lambda__get, _moose.SigNeur_lambda__set)
    parallelMode = _swig_property(_moose.SigNeur_parallelMode_get, _moose.SigNeur_parallelMode_set)
    updateStep = _swig_property(_moose.SigNeur_updateStep_get, _moose.SigNeur_updateStep_set)
    calciumScale = _swig_property(_moose.SigNeur_calciumScale_get, _moose.SigNeur_calciumScale_set)
    dendInclude = _swig_property(_moose.SigNeur_dendInclude_get, _moose.SigNeur_dendInclude_set)
    dendExclude = _swig_property(_moose.SigNeur_dendExclude_get, _moose.SigNeur_dendExclude_set)
SigNeur_swigregister = _moose.SigNeur_swigregister
SigNeur_swigregister(SigNeur)

class AscFile(Neutral):
    """Proxy of C++ pymoose::AscFile class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::AscFile self, Id id) -> AscFile
        __init__(pymoose::AscFile self, std::string path) -> AscFile
        __init__(pymoose::AscFile self, std::string name, Id parentId) -> AscFile
        __init__(pymoose::AscFile self, std::string name, PyMooseBase parent) -> AscFile
        __init__(pymoose::AscFile self, AscFile src, std::string name, PyMooseBase parent) -> AscFile
        __init__(pymoose::AscFile self, AscFile src, std::string name, Id parent) -> AscFile
        __init__(pymoose::AscFile self, AscFile src, std::string path) -> AscFile
        __init__(pymoose::AscFile self, Id src, std::string name, Id parent) -> AscFile
        __init__(pymoose::AscFile self, Id src, std::string path) -> AscFile
        """
        this = _moose.new_AscFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_AscFile
    __del__ = lambda self : None;
    def getType(self):
        """getType(AscFile self) -> std::string const &"""
        return _moose.AscFile_getType(self)

    def __get_filename(self):
        """__get_filename(AscFile self) -> std::string const &"""
        return _moose.AscFile___get_filename(self)

    def __set_filename(self, *args):
        """__set_filename(AscFile self, std::string filename)"""
        return _moose.AscFile___set_filename(self, *args)

    def __get_append(self):
        """__get_append(AscFile self) -> int"""
        return _moose.AscFile___get_append(self)

    def __set_append(self, *args):
        """__set_append(AscFile self, int append)"""
        return _moose.AscFile___set_append(self, *args)

    def __get_time(self):
        """__get_time(AscFile self) -> int"""
        return _moose.AscFile___get_time(self)

    def __set_time(self, *args):
        """__set_time(AscFile self, int time)"""
        return _moose.AscFile___set_time(self, *args)

    def __get_header(self):
        """__get_header(AscFile self) -> int"""
        return _moose.AscFile___get_header(self)

    def __set_header(self, *args):
        """__set_header(AscFile self, int header)"""
        return _moose.AscFile___set_header(self, *args)

    def __get_comment(self):
        """__get_comment(AscFile self) -> std::string const &"""
        return _moose.AscFile___get_comment(self)

    def __set_comment(self, *args):
        """__set_comment(AscFile self, std::string comment)"""
        return _moose.AscFile___set_comment(self, *args)

    def __get_delimiter(self):
        """__get_delimiter(AscFile self) -> std::string const &"""
        return _moose.AscFile___get_delimiter(self)

    def __set_delimiter(self, *args):
        """__set_delimiter(AscFile self, std::string delimiter)"""
        return _moose.AscFile___set_delimiter(self, *args)

    filename = _swig_property(_moose.AscFile_filename_get, _moose.AscFile_filename_set)
    appendFlag = _swig_property(_moose.AscFile_appendFlag_get, _moose.AscFile_appendFlag_set)
    time = _swig_property(_moose.AscFile_time_get, _moose.AscFile_time_set)
    header = _swig_property(_moose.AscFile_header_get, _moose.AscFile_header_set)
    comment = _swig_property(_moose.AscFile_comment_get, _moose.AscFile_comment_set)
    delimiter = _swig_property(_moose.AscFile_delimiter_get, _moose.AscFile_delimiter_set)
AscFile_swigregister = _moose.AscFile_swigregister
AscFile_swigregister(AscFile)

class DifShell(Neutral):
    """Proxy of C++ pymoose::DifShell class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::DifShell self, Id id) -> DifShell
        __init__(pymoose::DifShell self, std::string path) -> DifShell
        __init__(pymoose::DifShell self, std::string name, Id parentId) -> DifShell
        __init__(pymoose::DifShell self, std::string name, PyMooseBase parent) -> DifShell
        __init__(pymoose::DifShell self, DifShell src, std::string name, PyMooseBase parent) -> DifShell
        __init__(pymoose::DifShell self, DifShell src, std::string name, Id parent) -> DifShell
        __init__(pymoose::DifShell self, DifShell src, std::string path) -> DifShell
        __init__(pymoose::DifShell self, Id src, std::string name, Id parent) -> DifShell
        __init__(pymoose::DifShell self, Id src, std::string path) -> DifShell
        """
        this = _moose.new_DifShell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_DifShell
    __del__ = lambda self : None;
    def getType(self):
        """getType(DifShell self) -> std::string const &"""
        return _moose.DifShell_getType(self)

    def __get_C(self):
        """__get_C(DifShell self) -> double"""
        return _moose.DifShell___get_C(self)

    def __get_Ceq(self):
        """__get_Ceq(DifShell self) -> double"""
        return _moose.DifShell___get_Ceq(self)

    def __set_Ceq(self, *args):
        """__set_Ceq(DifShell self, double Ceq)"""
        return _moose.DifShell___set_Ceq(self, *args)

    def __get_D(self):
        """__get_D(DifShell self) -> double"""
        return _moose.DifShell___get_D(self)

    def __set_D(self, *args):
        """__set_D(DifShell self, double D)"""
        return _moose.DifShell___set_D(self, *args)

    def __get_valence(self):
        """__get_valence(DifShell self) -> double"""
        return _moose.DifShell___get_valence(self)

    def __set_valence(self, *args):
        """__set_valence(DifShell self, double valence)"""
        return _moose.DifShell___set_valence(self, *args)

    def __get_leak(self):
        """__get_leak(DifShell self) -> double"""
        return _moose.DifShell___get_leak(self)

    def __set_leak(self, *args):
        """__set_leak(DifShell self, double leak)"""
        return _moose.DifShell___set_leak(self, *args)

    def __get_shapeMode(self):
        """__get_shapeMode(DifShell self) -> unsigned int"""
        return _moose.DifShell___get_shapeMode(self)

    def __set_shapeMode(self, *args):
        """__set_shapeMode(DifShell self, unsigned int shapeMode)"""
        return _moose.DifShell___set_shapeMode(self, *args)

    def __get_length(self):
        """__get_length(DifShell self) -> double"""
        return _moose.DifShell___get_length(self)

    def __set_length(self, *args):
        """__set_length(DifShell self, double length)"""
        return _moose.DifShell___set_length(self, *args)

    def __get_diameter(self):
        """__get_diameter(DifShell self) -> double"""
        return _moose.DifShell___get_diameter(self)

    def __set_diameter(self, *args):
        """__set_diameter(DifShell self, double diameter)"""
        return _moose.DifShell___set_diameter(self, *args)

    def __get_thickness(self):
        """__get_thickness(DifShell self) -> double"""
        return _moose.DifShell___get_thickness(self)

    def __set_thickness(self, *args):
        """__set_thickness(DifShell self, double thickness)"""
        return _moose.DifShell___set_thickness(self, *args)

    def __get_volume(self):
        """__get_volume(DifShell self) -> double"""
        return _moose.DifShell___get_volume(self)

    def __set_volume(self, *args):
        """__set_volume(DifShell self, double volume)"""
        return _moose.DifShell___set_volume(self, *args)

    def __get_outerArea(self):
        """__get_outerArea(DifShell self) -> double"""
        return _moose.DifShell___get_outerArea(self)

    def __set_outerArea(self, *args):
        """__set_outerArea(DifShell self, double outerArea)"""
        return _moose.DifShell___set_outerArea(self, *args)

    def __get_innerArea(self):
        """__get_innerArea(DifShell self) -> double"""
        return _moose.DifShell___get_innerArea(self)

    def __set_innerArea(self, *args):
        """__set_innerArea(DifShell self, double innerArea)"""
        return _moose.DifShell___set_innerArea(self, *args)

    C = _swig_property(_moose.DifShell_C_get)
    Ceq = _swig_property(_moose.DifShell_Ceq_get, _moose.DifShell_Ceq_set)
    D = _swig_property(_moose.DifShell_D_get, _moose.DifShell_D_set)
    valence = _swig_property(_moose.DifShell_valence_get, _moose.DifShell_valence_set)
    leak = _swig_property(_moose.DifShell_leak_get, _moose.DifShell_leak_set)
    shapeMode = _swig_property(_moose.DifShell_shapeMode_get, _moose.DifShell_shapeMode_set)
    length = _swig_property(_moose.DifShell_length_get, _moose.DifShell_length_set)
    diameter = _swig_property(_moose.DifShell_diameter_get, _moose.DifShell_diameter_set)
    thickness = _swig_property(_moose.DifShell_thickness_get, _moose.DifShell_thickness_set)
    volume = _swig_property(_moose.DifShell_volume_get, _moose.DifShell_volume_set)
    outerArea = _swig_property(_moose.DifShell_outerArea_get, _moose.DifShell_outerArea_set)
    innerArea = _swig_property(_moose.DifShell_innerArea_get, _moose.DifShell_innerArea_set)
DifShell_swigregister = _moose.DifShell_swigregister
DifShell_swigregister(DifShell)

class GssaStoich(Stoich):
    """Proxy of C++ pymoose::GssaStoich class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::GssaStoich self, Id id) -> GssaStoich
        __init__(pymoose::GssaStoich self, std::string path) -> GssaStoich
        __init__(pymoose::GssaStoich self, std::string name, Id parentId) -> GssaStoich
        __init__(pymoose::GssaStoich self, std::string name, PyMooseBase parent) -> GssaStoich
        __init__(pymoose::GssaStoich self, GssaStoich src, std::string name, PyMooseBase parent) -> GssaStoich
        __init__(pymoose::GssaStoich self, GssaStoich src, std::string name, Id parent) -> GssaStoich
        __init__(pymoose::GssaStoich self, GssaStoich src, std::string path) -> GssaStoich
        __init__(pymoose::GssaStoich self, Id src, std::string name, Id parent) -> GssaStoich
        __init__(pymoose::GssaStoich self, Id src, std::string path) -> GssaStoich
        """
        this = _moose.new_GssaStoich(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_GssaStoich
    __del__ = lambda self : None;
    def getType(self):
        """getType(GssaStoich self) -> std::string const &"""
        return _moose.GssaStoich_getType(self)

    def __get_method(self):
        """__get_method(GssaStoich self) -> std::string"""
        return _moose.GssaStoich___get_method(self)

    def __set_method(self, *args):
        """__set_method(GssaStoich self, std::string method)"""
        return _moose.GssaStoich___set_method(self, *args)

    def __set_path(self, *args):
        """__set_path(GssaStoich self, std::string path)"""
        return _moose.GssaStoich___set_path(self, *args)

    method = _swig_property(_moose.GssaStoich_method_get, _moose.GssaStoich_method_set)
    path = _swig_property(_moose.GssaStoich_path_get)
GssaStoich_swigregister = _moose.GssaStoich_swigregister
GssaStoich_swigregister(GssaStoich)

class TauPump(Neutral):
    """Proxy of C++ pymoose::TauPump class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::TauPump self, Id id) -> TauPump
        __init__(pymoose::TauPump self, std::string path) -> TauPump
        __init__(pymoose::TauPump self, std::string name, Id parentId) -> TauPump
        __init__(pymoose::TauPump self, std::string name, PyMooseBase parent) -> TauPump
        __init__(pymoose::TauPump self, TauPump src, std::string name, PyMooseBase parent) -> TauPump
        __init__(pymoose::TauPump self, TauPump src, std::string name, Id parent) -> TauPump
        __init__(pymoose::TauPump self, TauPump src, std::string path) -> TauPump
        __init__(pymoose::TauPump self, Id src, std::string name, Id parent) -> TauPump
        __init__(pymoose::TauPump self, Id src, std::string path) -> TauPump
        """
        this = _moose.new_TauPump(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_TauPump
    __del__ = lambda self : None;
    def getType(self):
        """getType(TauPump self) -> std::string const &"""
        return _moose.TauPump_getType(self)

    def __get_pumpRate(self):
        """__get_pumpRate(TauPump self) -> double"""
        return _moose.TauPump___get_pumpRate(self)

    def __set_pumpRate(self, *args):
        """__set_pumpRate(TauPump self, double pumpRate)"""
        return _moose.TauPump___set_pumpRate(self, *args)

    def __get_eqConc(self):
        """__get_eqConc(TauPump self) -> double"""
        return _moose.TauPump___get_eqConc(self)

    def __set_eqConc(self, *args):
        """__set_eqConc(TauPump self, double eqConc)"""
        return _moose.TauPump___set_eqConc(self, *args)

    def __get_TA(self):
        """__get_TA(TauPump self) -> double"""
        return _moose.TauPump___get_TA(self)

    def __set_TA(self, *args):
        """__set_TA(TauPump self, double TA)"""
        return _moose.TauPump___set_TA(self, *args)

    def __get_TB(self):
        """__get_TB(TauPump self) -> double"""
        return _moose.TauPump___get_TB(self)

    def __set_TB(self, *args):
        """__set_TB(TauPump self, double TB)"""
        return _moose.TauPump___set_TB(self, *args)

    def __get_TC(self):
        """__get_TC(TauPump self) -> double"""
        return _moose.TauPump___get_TC(self)

    def __set_TC(self, *args):
        """__set_TC(TauPump self, double TC)"""
        return _moose.TauPump___set_TC(self, *args)

    def __get_TV(self):
        """__get_TV(TauPump self) -> double"""
        return _moose.TauPump___get_TV(self)

    def __set_TV(self, *args):
        """__set_TV(TauPump self, double TV)"""
        return _moose.TauPump___set_TV(self, *args)

    pumpRate = _swig_property(_moose.TauPump_pumpRate_get, _moose.TauPump_pumpRate_set)
    eqConc = _swig_property(_moose.TauPump_eqConc_get, _moose.TauPump_eqConc_set)
    TA = _swig_property(_moose.TauPump_TA_get, _moose.TauPump_TA_set)
    TB = _swig_property(_moose.TauPump_TB_get, _moose.TauPump_TB_set)
    TC = _swig_property(_moose.TauPump_TC_get, _moose.TauPump_TC_set)
    TV = _swig_property(_moose.TauPump_TV_get, _moose.TauPump_TV_set)
TauPump_swigregister = _moose.TauPump_swigregister
TauPump_swigregister(TauPump)

class TimeTable(Neutral):
    """Proxy of C++ pymoose::TimeTable class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::TimeTable self, Id id) -> TimeTable
        __init__(pymoose::TimeTable self, std::string path) -> TimeTable
        __init__(pymoose::TimeTable self, std::string name, Id parentId) -> TimeTable
        __init__(pymoose::TimeTable self, std::string name, PyMooseBase parent) -> TimeTable
        __init__(pymoose::TimeTable self, TimeTable src, std::string name, PyMooseBase parent) -> TimeTable
        __init__(pymoose::TimeTable self, TimeTable src, std::string name, Id parent) -> TimeTable
        __init__(pymoose::TimeTable self, TimeTable src, std::string path) -> TimeTable
        __init__(pymoose::TimeTable self, Id src, std::string name, Id parent) -> TimeTable
        __init__(pymoose::TimeTable self, Id src, std::string path) -> TimeTable
        """
        this = _moose.new_TimeTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_TimeTable
    __del__ = lambda self : None;
    def getType(self):
        """getType(TimeTable self) -> std::string const &"""
        return _moose.TimeTable_getType(self)

    def __get_maxTime(self):
        """__get_maxTime(TimeTable self) -> double"""
        return _moose.TimeTable___get_maxTime(self)

    def __set_maxTime(self, *args):
        """__set_maxTime(TimeTable self, double maxTime)"""
        return _moose.TimeTable___set_maxTime(self, *args)

    def __get_tableVector(self):
        """__get_tableVector(TimeTable self) -> double_vector"""
        return _moose.TimeTable___get_tableVector(self)

    def __set_tableVector(self, *args):
        """__set_tableVector(TimeTable self, double_vector tableVector)"""
        return _moose.TimeTable___set_tableVector(self, *args)

    def __get_tableSize(self):
        """__get_tableSize(TimeTable self) -> unsigned int"""
        return _moose.TimeTable___get_tableSize(self)

    def __getitem__(self, *args):
        """__getitem__(TimeTable self, unsigned int const index) -> double"""
        return _moose.TimeTable___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(TimeTable self, unsigned int const index, double value)"""
        return _moose.TimeTable___setitem__(self, *args)

    def __get_state(self):
        """__get_state(TimeTable self) -> double"""
        return _moose.TimeTable___get_state(self)

    def __get_method(self):
        """__get_method(TimeTable self) -> int"""
        return _moose.TimeTable___get_method(self)

    def __set_method(self, *args):
        """__set_method(TimeTable self, int const method)"""
        return _moose.TimeTable___set_method(self, *args)

    def __get_filename(self):
        """__get_filename(TimeTable self) -> std::string const"""
        return _moose.TimeTable___get_filename(self)

    def __set_filename(self, *args):
        """__set_filename(TimeTable self, std::string const & filename)"""
        return _moose.TimeTable___set_filename(self, *args)

    maxTime = _swig_property(_moose.TimeTable_maxTime_get, _moose.TimeTable_maxTime_set)
    tableSize = _swig_property(_moose.TimeTable_tableSize_get)
    state = _swig_property(_moose.TimeTable_state_get)
    method = _swig_property(_moose.TimeTable_method_get, _moose.TimeTable_method_set)
    filename = _swig_property(_moose.TimeTable_filename_get, _moose.TimeTable_filename_set)
TimeTable_swigregister = _moose.TimeTable_swigregister
TimeTable_swigregister(TimeTable)

class RC(Neutral):
    """Proxy of C++ pymoose::RC class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::RC self, Id id) -> RC
        __init__(pymoose::RC self, std::string path) -> RC
        __init__(pymoose::RC self, std::string name, Id parentId) -> RC
        __init__(pymoose::RC self, std::string name, PyMooseBase parent) -> RC
        __init__(pymoose::RC self, RC src, std::string name, PyMooseBase parent) -> RC
        __init__(pymoose::RC self, RC src, std::string name, Id parent) -> RC
        __init__(pymoose::RC self, RC src, std::string path) -> RC
        __init__(pymoose::RC self, Id src, std::string name, Id parent) -> RC
        __init__(pymoose::RC self, Id src, std::string path) -> RC
        """
        this = _moose.new_RC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_RC
    __del__ = lambda self : None;
    def getType(self):
        """getType(RC self) -> std::string const &"""
        return _moose.RC_getType(self)

    def __get_V0(self):
        """__get_V0(RC self) -> double"""
        return _moose.RC___get_V0(self)

    def __set_V0(self, *args):
        """__set_V0(RC self, double V0)"""
        return _moose.RC___set_V0(self, *args)

    def __get_R(self):
        """__get_R(RC self) -> double"""
        return _moose.RC___get_R(self)

    def __set_R(self, *args):
        """__set_R(RC self, double R)"""
        return _moose.RC___set_R(self, *args)

    def __get_C(self):
        """__get_C(RC self) -> double"""
        return _moose.RC___get_C(self)

    def __set_C(self, *args):
        """__set_C(RC self, double C)"""
        return _moose.RC___set_C(self, *args)

    def __get_state(self):
        """__get_state(RC self) -> double"""
        return _moose.RC___get_state(self)

    def __get_inject(self):
        """__get_inject(RC self) -> double"""
        return _moose.RC___get_inject(self)

    def __set_inject(self, *args):
        """__set_inject(RC self, double inject)"""
        return _moose.RC___set_inject(self, *args)

    V0 = _swig_property(_moose.RC_V0_get, _moose.RC_V0_set)
    R = _swig_property(_moose.RC_R_get, _moose.RC_R_set)
    C = _swig_property(_moose.RC_C_get, _moose.RC_C_set)
    state = _swig_property(_moose.RC_state_get)
    inject = _swig_property(_moose.RC_inject_get, _moose.RC_inject_set)
RC_swigregister = _moose.RC_swigregister
RC_swigregister(RC)

class PIDController(Neutral):
    """Proxy of C++ pymoose::PIDController class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::PIDController self, Id id) -> PIDController
        __init__(pymoose::PIDController self, std::string path) -> PIDController
        __init__(pymoose::PIDController self, std::string name, Id parentId) -> PIDController
        __init__(pymoose::PIDController self, std::string name, PyMooseBase parent) -> PIDController
        __init__(pymoose::PIDController self, PIDController src, std::string name, PyMooseBase parent) -> PIDController
        __init__(pymoose::PIDController self, PIDController src, std::string name, Id parent) -> PIDController
        __init__(pymoose::PIDController self, PIDController src, std::string path) -> PIDController
        __init__(pymoose::PIDController self, Id src, std::string name, Id parent) -> PIDController
        __init__(pymoose::PIDController self, Id src, std::string path) -> PIDController
        """
        this = _moose.new_PIDController(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_PIDController
    __del__ = lambda self : None;
    def getType(self):
        """getType(PIDController self) -> std::string const &"""
        return _moose.PIDController_getType(self)

    def __get_gain(self):
        """__get_gain(PIDController self) -> double"""
        return _moose.PIDController___get_gain(self)

    def __set_gain(self, *args):
        """__set_gain(PIDController self, double gain)"""
        return _moose.PIDController___set_gain(self, *args)

    def __get_saturation(self):
        """__get_saturation(PIDController self) -> double"""
        return _moose.PIDController___get_saturation(self)

    def __set_saturation(self, *args):
        """__set_saturation(PIDController self, double saturation)"""
        return _moose.PIDController___set_saturation(self, *args)

    def __get_command(self):
        """__get_command(PIDController self) -> double"""
        return _moose.PIDController___get_command(self)

    def __set_command(self, *args):
        """__set_command(PIDController self, double command)"""
        return _moose.PIDController___set_command(self, *args)

    def __get_sensed(self):
        """__get_sensed(PIDController self) -> double"""
        return _moose.PIDController___get_sensed(self)

    def __get_tauI(self):
        """__get_tauI(PIDController self) -> double"""
        return _moose.PIDController___get_tauI(self)

    def __set_tauI(self, *args):
        """__set_tauI(PIDController self, double tauI)"""
        return _moose.PIDController___set_tauI(self, *args)

    def __get_tauD(self):
        """__get_tauD(PIDController self) -> double"""
        return _moose.PIDController___get_tauD(self)

    def __set_tauD(self, *args):
        """__set_tauD(PIDController self, double tauD)"""
        return _moose.PIDController___set_tauD(self, *args)

    def __get_output(self):
        """__get_output(PIDController self) -> double"""
        return _moose.PIDController___get_output(self)

    def __get_error(self):
        """__get_error(PIDController self) -> double"""
        return _moose.PIDController___get_error(self)

    def __get_integral(self):
        """__get_integral(PIDController self) -> double"""
        return _moose.PIDController___get_integral(self)

    def __get_derivative(self):
        """__get_derivative(PIDController self) -> double"""
        return _moose.PIDController___get_derivative(self)

    def __get_e_previous(self):
        """__get_e_previous(PIDController self) -> double"""
        return _moose.PIDController___get_e_previous(self)

    gain = _swig_property(_moose.PIDController_gain_get, _moose.PIDController_gain_set)
    saturation = _swig_property(_moose.PIDController_saturation_get, _moose.PIDController_saturation_set)
    command = _swig_property(_moose.PIDController_command_get, _moose.PIDController_command_set)
    sensed = _swig_property(_moose.PIDController_sensed_get)
    tauI = _swig_property(_moose.PIDController_tauI_get, _moose.PIDController_tauI_set)
    tauD = _swig_property(_moose.PIDController_tauD_get, _moose.PIDController_tauD_set)
    output = _swig_property(_moose.PIDController_output_get)
PIDController_swigregister = _moose.PIDController_swigregister
PIDController_swigregister(PIDController)

class DiffAmp(Neutral):
    """Proxy of C++ pymoose::DiffAmp class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::DiffAmp self, Id id) -> DiffAmp
        __init__(pymoose::DiffAmp self, std::string path) -> DiffAmp
        __init__(pymoose::DiffAmp self, std::string name, Id parentId) -> DiffAmp
        __init__(pymoose::DiffAmp self, std::string name, PyMooseBase parent) -> DiffAmp
        __init__(pymoose::DiffAmp self, DiffAmp src, std::string name, PyMooseBase parent) -> DiffAmp
        __init__(pymoose::DiffAmp self, DiffAmp src, std::string name, Id parent) -> DiffAmp
        __init__(pymoose::DiffAmp self, DiffAmp src, std::string path) -> DiffAmp
        __init__(pymoose::DiffAmp self, Id src, std::string name, Id parent) -> DiffAmp
        __init__(pymoose::DiffAmp self, Id src, std::string path) -> DiffAmp
        """
        this = _moose.new_DiffAmp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_DiffAmp
    __del__ = lambda self : None;
    def getType(self):
        """getType(DiffAmp self) -> std::string const &"""
        return _moose.DiffAmp_getType(self)

    def __get_gain(self):
        """__get_gain(DiffAmp self) -> double"""
        return _moose.DiffAmp___get_gain(self)

    def __set_gain(self, *args):
        """__set_gain(DiffAmp self, double gain)"""
        return _moose.DiffAmp___set_gain(self, *args)

    def __get_saturation(self):
        """__get_saturation(DiffAmp self) -> double"""
        return _moose.DiffAmp___get_saturation(self)

    def __set_saturation(self, *args):
        """__set_saturation(DiffAmp self, double saturation)"""
        return _moose.DiffAmp___set_saturation(self, *args)

    def __get_plus(self):
        """__get_plus(DiffAmp self) -> double"""
        return _moose.DiffAmp___get_plus(self)

    def __get_minus(self):
        """__get_minus(DiffAmp self) -> double"""
        return _moose.DiffAmp___get_minus(self)

    def __get_output(self):
        """__get_output(DiffAmp self) -> double"""
        return _moose.DiffAmp___get_output(self)

    gain = _swig_property(_moose.DiffAmp_gain_get, _moose.DiffAmp_gain_set)
    saturation = _swig_property(_moose.DiffAmp_saturation_get, _moose.DiffAmp_saturation_set)
    plus = _swig_property(_moose.DiffAmp_plus_get)
    minus = _swig_property(_moose.DiffAmp_minus_get)
    output = _swig_property(_moose.DiffAmp_output_get)
DiffAmp_swigregister = _moose.DiffAmp_swigregister
DiffAmp_swigregister(DiffAmp)

class IntFire(Neutral):
    """Proxy of C++ pymoose::IntFire class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::IntFire self, Id id) -> IntFire
        __init__(pymoose::IntFire self, std::string path) -> IntFire
        __init__(pymoose::IntFire self, std::string name, Id parentId) -> IntFire
        __init__(pymoose::IntFire self, std::string name, PyMooseBase parent) -> IntFire
        __init__(pymoose::IntFire self, IntFire src, std::string name, PyMooseBase parent) -> IntFire
        __init__(pymoose::IntFire self, IntFire src, std::string name, Id parent) -> IntFire
        __init__(pymoose::IntFire self, IntFire src, std::string path) -> IntFire
        __init__(pymoose::IntFire self, Id src, std::string name, Id parent) -> IntFire
        __init__(pymoose::IntFire self, Id src, std::string path) -> IntFire
        """
        this = _moose.new_IntFire(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_IntFire
    __del__ = lambda self : None;
    def getType(self):
        """getType(IntFire self) -> std::string const &"""
        return _moose.IntFire_getType(self)

    def __get_Vt(self):
        """__get_Vt(IntFire self) -> double"""
        return _moose.IntFire___get_Vt(self)

    def __set_Vt(self, *args):
        """__set_Vt(IntFire self, double Vt)"""
        return _moose.IntFire___set_Vt(self, *args)

    def __get_Vr(self):
        """__get_Vr(IntFire self) -> double"""
        return _moose.IntFire___get_Vr(self)

    def __set_Vr(self, *args):
        """__set_Vr(IntFire self, double Vr)"""
        return _moose.IntFire___set_Vr(self, *args)

    def __get_Rm(self):
        """__get_Rm(IntFire self) -> double"""
        return _moose.IntFire___get_Rm(self)

    def __set_Rm(self, *args):
        """__set_Rm(IntFire self, double Rm)"""
        return _moose.IntFire___set_Rm(self, *args)

    def __get_Cm(self):
        """__get_Cm(IntFire self) -> double"""
        return _moose.IntFire___get_Cm(self)

    def __set_Cm(self, *args):
        """__set_Cm(IntFire self, double Cm)"""
        return _moose.IntFire___set_Cm(self, *args)

    def __get_Vm(self):
        """__get_Vm(IntFire self) -> double"""
        return _moose.IntFire___get_Vm(self)

    def __set_Vm(self, *args):
        """__set_Vm(IntFire self, double Vm)"""
        return _moose.IntFire___set_Vm(self, *args)

    def __get_tau(self):
        """__get_tau(IntFire self) -> double"""
        return _moose.IntFire___get_tau(self)

    def __get_Em(self):
        """__get_Em(IntFire self) -> double"""
        return _moose.IntFire___get_Em(self)

    def __set_Em(self, *args):
        """__set_Em(IntFire self, double Em)"""
        return _moose.IntFire___set_Em(self, *args)

    def __get_refractT(self):
        """__get_refractT(IntFire self) -> double"""
        return _moose.IntFire___get_refractT(self)

    def __set_refractT(self, *args):
        """__set_refractT(IntFire self, double refractT)"""
        return _moose.IntFire___set_refractT(self, *args)

    def __get_initVm(self):
        """__get_initVm(IntFire self) -> double"""
        return _moose.IntFire___get_initVm(self)

    def __set_initVm(self, *args):
        """__set_initVm(IntFire self, double initVm)"""
        return _moose.IntFire___set_initVm(self, *args)

    def __get_inject(self):
        """__get_inject(IntFire self) -> double"""
        return _moose.IntFire___get_inject(self)

    def __set_inject(self, *args):
        """__set_inject(IntFire self, double inject)"""
        return _moose.IntFire___set_inject(self, *args)

    Vt = _swig_property(_moose.IntFire_Vt_get, _moose.IntFire_Vt_set)
    Vr = _swig_property(_moose.IntFire_Vr_get, _moose.IntFire_Vr_set)
    Rm = _swig_property(_moose.IntFire_Rm_get, _moose.IntFire_Rm_set)
    Cm = _swig_property(_moose.IntFire_Cm_get, _moose.IntFire_Cm_set)
    Vm = _swig_property(_moose.IntFire_Vm_get, _moose.IntFire_Vm_set)
    tau = _swig_property(_moose.IntFire_tau_get)
    Em = _swig_property(_moose.IntFire_Em_get, _moose.IntFire_Em_set)
    refractT = _swig_property(_moose.IntFire_refractT_get, _moose.IntFire_refractT_set)
    initVm = _swig_property(_moose.IntFire_initVm_get, _moose.IntFire_initVm_set)
    inject = _swig_property(_moose.IntFire_inject_get, _moose.IntFire_inject_set)
IntFire_swigregister = _moose.IntFire_swigregister
IntFire_swigregister(IntFire)

class IzhikevichNrn(Neutral):
    """Proxy of C++ pymoose::IzhikevichNrn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::IzhikevichNrn self, Id id) -> IzhikevichNrn
        __init__(pymoose::IzhikevichNrn self, std::string path) -> IzhikevichNrn
        __init__(pymoose::IzhikevichNrn self, std::string name, Id parentId) -> IzhikevichNrn
        __init__(pymoose::IzhikevichNrn self, std::string name, PyMooseBase parent) -> IzhikevichNrn
        __init__(pymoose::IzhikevichNrn self, IzhikevichNrn src, std::string name, PyMooseBase parent) -> IzhikevichNrn
        __init__(pymoose::IzhikevichNrn self, IzhikevichNrn src, std::string name, Id parent) -> IzhikevichNrn
        __init__(pymoose::IzhikevichNrn self, IzhikevichNrn src, std::string path) -> IzhikevichNrn
        __init__(pymoose::IzhikevichNrn self, Id src, std::string name, Id parent) -> IzhikevichNrn
        __init__(pymoose::IzhikevichNrn self, Id src, std::string path) -> IzhikevichNrn
        """
        this = _moose.new_IzhikevichNrn(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_IzhikevichNrn
    __del__ = lambda self : None;
    def getType(self):
        """getType(IzhikevichNrn self) -> std::string const &"""
        return _moose.IzhikevichNrn_getType(self)

    def __get_Vmax(self):
        """__get_Vmax(IzhikevichNrn self) -> double"""
        return _moose.IzhikevichNrn___get_Vmax(self)

    def __set_Vmax(self, *args):
        """__set_Vmax(IzhikevichNrn self, double Vmax)"""
        return _moose.IzhikevichNrn___set_Vmax(self, *args)

    def __get_c(self):
        """__get_c(IzhikevichNrn self) -> double"""
        return _moose.IzhikevichNrn___get_c(self)

    def __set_c(self, *args):
        """__set_c(IzhikevichNrn self, double c)"""
        return _moose.IzhikevichNrn___set_c(self, *args)

    def __get_d(self):
        """__get_d(IzhikevichNrn self) -> double"""
        return _moose.IzhikevichNrn___get_d(self)

    def __set_d(self, *args):
        """__set_d(IzhikevichNrn self, double d)"""
        return _moose.IzhikevichNrn___set_d(self, *args)

    def __get_a(self):
        """__get_a(IzhikevichNrn self) -> double"""
        return _moose.IzhikevichNrn___get_a(self)

    def __set_a(self, *args):
        """__set_a(IzhikevichNrn self, double a)"""
        return _moose.IzhikevichNrn___set_a(self, *args)

    def __get_b(self):
        """__get_b(IzhikevichNrn self) -> double"""
        return _moose.IzhikevichNrn___get_b(self)

    def __set_b(self, *args):
        """__set_b(IzhikevichNrn self, double b)"""
        return _moose.IzhikevichNrn___set_b(self, *args)

    def __get_Vm(self):
        """__get_Vm(IzhikevichNrn self) -> double"""
        return _moose.IzhikevichNrn___get_Vm(self)

    def __set_Vm(self, *args):
        """__set_Vm(IzhikevichNrn self, double Vm)"""
        return _moose.IzhikevichNrn___set_Vm(self, *args)

    def __get_u(self):
        """__get_u(IzhikevichNrn self) -> double"""
        return _moose.IzhikevichNrn___get_u(self)

    def __get_Im(self):
        """__get_Im(IzhikevichNrn self) -> double"""
        return _moose.IzhikevichNrn___get_Im(self)

    def __get_initVm(self):
        """__get_initVm(IzhikevichNrn self) -> double"""
        return _moose.IzhikevichNrn___get_initVm(self)

    def __set_initVm(self, *args):
        """__set_initVm(IzhikevichNrn self, double initVm)"""
        return _moose.IzhikevichNrn___set_initVm(self, *args)

    def __get_initU(self):
        """__get_initU(IzhikevichNrn self) -> double"""
        return _moose.IzhikevichNrn___get_initU(self)

    def __set_initU(self, *args):
        """__set_initU(IzhikevichNrn self, double initU)"""
        return _moose.IzhikevichNrn___set_initU(self, *args)

    def __get_alpha(self):
        """__get_alpha(IzhikevichNrn self) -> double"""
        return _moose.IzhikevichNrn___get_alpha(self)

    def __set_alpha(self, *args):
        """__set_alpha(IzhikevichNrn self, double alpha)"""
        return _moose.IzhikevichNrn___set_alpha(self, *args)

    def __get_beta(self):
        """__get_beta(IzhikevichNrn self) -> double"""
        return _moose.IzhikevichNrn___get_beta(self)

    def __set_beta(self, *args):
        """__set_beta(IzhikevichNrn self, double beta)"""
        return _moose.IzhikevichNrn___set_beta(self, *args)

    def __get_gamma(self):
        """__get_gamma(IzhikevichNrn self) -> double"""
        return _moose.IzhikevichNrn___get_gamma(self)

    def __set_gamma(self, *args):
        """__set_gamma(IzhikevichNrn self, double gamma)"""
        return _moose.IzhikevichNrn___set_gamma(self, *args)

    def __get_Rm(self):
        """__get_Rm(IzhikevichNrn self) -> double"""
        return _moose.IzhikevichNrn___get_Rm(self)

    def __set_Rm(self, *args):
        """__set_Rm(IzhikevichNrn self, double Rm)"""
        return _moose.IzhikevichNrn___set_Rm(self, *args)

    Vmax = _swig_property(_moose.IzhikevichNrn_Vmax_get, _moose.IzhikevichNrn_Vmax_set)
    c = _swig_property(_moose.IzhikevichNrn_c_get, _moose.IzhikevichNrn_c_set)
    d = _swig_property(_moose.IzhikevichNrn_d_get, _moose.IzhikevichNrn_d_set)
    a = _swig_property(_moose.IzhikevichNrn_a_get, _moose.IzhikevichNrn_a_set)
    b = _swig_property(_moose.IzhikevichNrn_b_get, _moose.IzhikevichNrn_b_set)
    Vm = _swig_property(_moose.IzhikevichNrn_Vm_get, _moose.IzhikevichNrn_Vm_set)
    u = _swig_property(_moose.IzhikevichNrn_u_get)
    Im = _swig_property(_moose.IzhikevichNrn_Im_get)
    initVm = _swig_property(_moose.IzhikevichNrn_initVm_get, _moose.IzhikevichNrn_initVm_set)
    initU = _swig_property(_moose.IzhikevichNrn_initU_get, _moose.IzhikevichNrn_initU_set)
    alpha = _swig_property(_moose.IzhikevichNrn_alpha_get, _moose.IzhikevichNrn_alpha_set)
    beta = _swig_property(_moose.IzhikevichNrn_beta_get, _moose.IzhikevichNrn_beta_set)
    gamma = _swig_property(_moose.IzhikevichNrn_gamma_get, _moose.IzhikevichNrn_gamma_set)
IzhikevichNrn_swigregister = _moose.IzhikevichNrn_swigregister
IzhikevichNrn_swigregister(IzhikevichNrn)

class GHK(Neutral):
    """Proxy of C++ pymoose::GHK class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::GHK self, Id id) -> GHK
        __init__(pymoose::GHK self, std::string path) -> GHK
        __init__(pymoose::GHK self, std::string name, Id parentId) -> GHK
        __init__(pymoose::GHK self, std::string name, PyMooseBase parent) -> GHK
        __init__(pymoose::GHK self, GHK src, std::string name, PyMooseBase parent) -> GHK
        __init__(pymoose::GHK self, GHK src, std::string name, Id parent) -> GHK
        __init__(pymoose::GHK self, GHK src, std::string path) -> GHK
        __init__(pymoose::GHK self, Id src, std::string name, Id parent) -> GHK
        __init__(pymoose::GHK self, Id src, std::string path) -> GHK
        """
        this = _moose.new_GHK(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_GHK
    __del__ = lambda self : None;
    def getType(self):
        """getType(GHK self) -> std::string const &"""
        return _moose.GHK_getType(self)

    def __get_Ik(self):
        """__get_Ik(GHK self) -> double"""
        return _moose.GHK___get_Ik(self)

    def __get_Gk(self):
        """__get_Gk(GHK self) -> double"""
        return _moose.GHK___get_Gk(self)

    def __get_Ek(self):
        """__get_Ek(GHK self) -> double"""
        return _moose.GHK___get_Ek(self)

    def __get_T(self):
        """__get_T(GHK self) -> double"""
        return _moose.GHK___get_T(self)

    def __set_T(self, *args):
        """__set_T(GHK self, double T)"""
        return _moose.GHK___set_T(self, *args)

    def __get_p(self):
        """__get_p(GHK self) -> double"""
        return _moose.GHK___get_p(self)

    def __set_p(self, *args):
        """__set_p(GHK self, double p)"""
        return _moose.GHK___set_p(self, *args)

    def __get_Vm(self):
        """__get_Vm(GHK self) -> double"""
        return _moose.GHK___get_Vm(self)

    def __set_Vm(self, *args):
        """__set_Vm(GHK self, double Vm)"""
        return _moose.GHK___set_Vm(self, *args)

    def __get_Cin(self):
        """__get_Cin(GHK self) -> double"""
        return _moose.GHK___get_Cin(self)

    def __set_Cin(self, *args):
        """__set_Cin(GHK self, double Cin)"""
        return _moose.GHK___set_Cin(self, *args)

    def __get_Cout(self):
        """__get_Cout(GHK self) -> double"""
        return _moose.GHK___get_Cout(self)

    def __set_Cout(self, *args):
        """__set_Cout(GHK self, double Cout)"""
        return _moose.GHK___set_Cout(self, *args)

    def __get_valency(self):
        """__get_valency(GHK self) -> double"""
        return _moose.GHK___get_valency(self)

    def __set_valency(self, *args):
        """__set_valency(GHK self, double valency)"""
        return _moose.GHK___set_valency(self, *args)

    Ik = _swig_property(_moose.GHK_Ik_get)
    Gk = _swig_property(_moose.GHK_Gk_get)
    Ek = _swig_property(_moose.GHK_Ek_get)
    T = _swig_property(_moose.GHK_T_get, _moose.GHK_T_set)
    p = _swig_property(_moose.GHK_p_get, _moose.GHK_p_set)
    Vm = _swig_property(_moose.GHK_Vm_get, _moose.GHK_Vm_set)
    Cin = _swig_property(_moose.GHK_Cin_get, _moose.GHK_Cin_set)
    Cout = _swig_property(_moose.GHK_Cout_get, _moose.GHK_Cout_set)
    valency = _swig_property(_moose.GHK_valency_get, _moose.GHK_valency_set)
GHK_swigregister = _moose.GHK_swigregister
GHK_swigregister(GHK)

class HHGate2D(HHGate):
    """Proxy of C++ pymoose::HHGate2D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::HHGate2D self, Id id) -> HHGate2D
        __init__(pymoose::HHGate2D self, std::string path) -> HHGate2D
        __init__(pymoose::HHGate2D self, std::string name, Id parentId) -> HHGate2D
        __init__(pymoose::HHGate2D self, std::string name, PyMooseBase parent) -> HHGate2D
        __init__(pymoose::HHGate2D self, HHGate2D src, std::string name, PyMooseBase parent) -> HHGate2D
        __init__(pymoose::HHGate2D self, HHGate2D src, std::string name, Id parent) -> HHGate2D
        __init__(pymoose::HHGate2D self, HHGate2D src, std::string path) -> HHGate2D
        __init__(pymoose::HHGate2D self, Id src, std::string name, Id parent) -> HHGate2D
        __init__(pymoose::HHGate2D self, Id src, std::string path) -> HHGate2D
        """
        this = _moose.new_HHGate2D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_HHGate2D
    __del__ = lambda self : None;
    def getType(self):
        """getType(HHGate2D self) -> std::string const &"""
        return _moose.HHGate2D_getType(self)

    A = _swig_property(_moose.HHGate2D_A_get)
    B = _swig_property(_moose.HHGate2D_B_get)
HHGate2D_swigregister = _moose.HHGate2D_swigregister
HHGate2D_swigregister(HHGate2D)

class HHChannel2D(HHChannel):
    """Proxy of C++ pymoose::HHChannel2D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(pymoose::HHChannel2D self, Id id) -> HHChannel2D
        __init__(pymoose::HHChannel2D self, std::string path) -> HHChannel2D
        __init__(pymoose::HHChannel2D self, std::string name, Id parentId) -> HHChannel2D
        __init__(pymoose::HHChannel2D self, std::string name, PyMooseBase parent) -> HHChannel2D
        __init__(pymoose::HHChannel2D self, HHChannel2D src, std::string name, PyMooseBase parent) -> HHChannel2D
        __init__(pymoose::HHChannel2D self, HHChannel2D src, std::string name, Id parent) -> HHChannel2D
        __init__(pymoose::HHChannel2D self, HHChannel2D src, std::string path) -> HHChannel2D
        __init__(pymoose::HHChannel2D self, Id src, std::string name, Id parent) -> HHChannel2D
        __init__(pymoose::HHChannel2D self, Id src, std::string path) -> HHChannel2D
        """
        this = _moose.new_HHChannel2D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_HHChannel2D
    __del__ = lambda self : None;
    def getType(self):
        """getType(HHChannel2D self) -> std::string const &"""
        return _moose.HHChannel2D_getType(self)

    def __get_Xindex(self):
        """__get_Xindex(HHChannel2D self) -> std::string"""
        return _moose.HHChannel2D___get_Xindex(self)

    def __set_Xindex(self, *args):
        """__set_Xindex(HHChannel2D self, std::string Xindex)"""
        return _moose.HHChannel2D___set_Xindex(self, *args)

    def __get_Yindex(self):
        """__get_Yindex(HHChannel2D self) -> std::string"""
        return _moose.HHChannel2D___get_Yindex(self)

    def __set_Yindex(self, *args):
        """__set_Yindex(HHChannel2D self, std::string Yindex)"""
        return _moose.HHChannel2D___set_Yindex(self, *args)

    def __get_Zindex(self):
        """__get_Zindex(HHChannel2D self) -> std::string"""
        return _moose.HHChannel2D___get_Zindex(self)

    def __set_Zindex(self, *args):
        """__set_Zindex(HHChannel2D self, std::string Zindex)"""
        return _moose.HHChannel2D___set_Zindex(self, *args)

    Xindex = _swig_property(_moose.HHChannel2D_Xindex_get, _moose.HHChannel2D_Xindex_set)
    Yindex = _swig_property(_moose.HHChannel2D_Yindex_get, _moose.HHChannel2D_Yindex_set)
    Zindex = _swig_property(_moose.HHChannel2D_Zindex_get, _moose.HHChannel2D_Zindex_set)
    def __get_xGate(self):
        if self.Xpower != 0:
            return HHGate2D('xGate', self)
        else:
            return None

    def __get_yGate(self):
        if self.Ypower != 0:
            return HHGate2D('yGate', self)
        else:
            return None
    def __get_zGate(self):
        if self.Zpower != 0:
            return HHGate2D('zGate', self)
        else:
            return None

    xGate = property(__get_xGate)
    yGate = property(__get_yGate)
    zGate = property(__get_zGate)                    

HHChannel2D_swigregister = _moose.HHChannel2D_swigregister
HHChannel2D_swigregister(HHChannel2D)



